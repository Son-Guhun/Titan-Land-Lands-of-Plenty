globals
//globals from ArrayAgent:
constant boolean LIBRARY_ArrayAgent=true
hashtable ArrayAgent_hashTable= InitHashtable()
//endglobals from ArrayAgent
//globals from Base36:
constant boolean LIBRARY_Base36=true
//endglobals from Base36
//globals from CircleObjectSystem:
constant boolean LIBRARY_CircleObjectSystem=true
//endglobals from CircleObjectSystem
//globals from CombatTag:
constant boolean LIBRARY_CombatTag=true
constant real CombatTag_PHYSICAL_RED= 100.00
constant real CombatTag_PHYSICAL_GREEN= 100.00
constant real CombatTag_PHYSICAL_BLUE= 100.00
constant real CombatTag_SPELL_RED= 10.00
constant real CombatTag_SPELL_GREEN= 30.00
constant real CombatTag_SPELL_BLUE= 100.00
constant real CombatTag_HEAL_RED= 0.
constant real CombatTag_HEAL_GREEN= 0.
constant real CombatTag_HEAL_BLUE= 0.
integer CombatTag_PHYS_DAMAGE
integer CombatTag_SPELL_DAMAGE
integer CombatTag_HEALING
    
integer CombatTag__timerData
//endglobals from CombatTag
//globals from CustomStatSystem:
constant boolean LIBRARY_CustomStatSystem=true
//endglobals from CustomStatSystem
//globals from CutToComma:
constant boolean LIBRARY_CutToComma=true
//endglobals from CutToComma
//globals from DecoBuilderCount:
constant boolean LIBRARY_DecoBuilderCount=true
//endglobals from DecoBuilderCount
//globals from DestructableLib:
constant boolean LIBRARY_DestructableLib=true
constant integer DestructableLib___DUMMY_UNIT_ID= 'hfoo'
constant integer DestructableLib___HARVEST_ID= 'Ahrl'
constant player DestructableLib___OWNING_PLAYER= Player(PLAYER_NEUTRAL_PASSIVE)
    
unit DestructableLib___dummy= null
//endglobals from DestructableLib
//globals from GMUI:
constant boolean LIBRARY_GMUI=true

constant integer GMUI_GENERIC_KEY= 0
constant boolean GMUI_ENABLE_GUI= false
hashtable GMUI_hashTable= InitHashtable()
boolexpr array GMUI_Init_Funcs
integer GMUI_Init_Funcs_Size= 0
//endglobals from GMUI
//globals from GroupTools:
constant boolean LIBRARY_GroupTools=true
        // The highest collision size you're using in your map.
constant real GroupTools___MAX_COLLISION_SIZE= 197.
        // Data Variables
group array GroupTools___groups
group GroupTools___gT= null
integer GroupTools___gN= 0
boolean GroupTools___f= false
        // Global Group (Change it to CreateGroup() if you want)
group ENUM_GROUP= bj_lastCreatedGroup
//endglobals from GroupTools
//globals from Iterator:
constant boolean LIBRARY_Iterator=true
//endglobals from Iterator
//globals from LoPDebug:
constant boolean LIBRARY_LoPDebug=true
//endglobals from LoPDebug
//globals from LoPInitQuests:
constant boolean LIBRARY_LoPInitQuests=true
//endglobals from LoPInitQuests
//globals from MultiPatrol:
constant boolean LIBRARY_MultiPatrol=true
    // Maximum number of patrol points a single unit can have.
constant integer MultiPatrol___MAX_POINTS= 128
    
    // Determines how close a unit must get to a patrol point before moving onto the next.
constant real MultiPatrol___RANGE= 32.
    
    // Determines the minimum distance between two consecutive patrol points.
constant real MultiPatrol___MINIMUM_DISTANCE= 100.
constant integer MultiPatrol_ERROR_OVERFLOW= 2
constant integer MultiPatrol_ERROR_NULL_POINTER= 3
constant integer MultiPatrol_ERROR_TOO_CLOSE= 1
constant integer MultiPatrol_ERROR_NONE= 0
hashtable MultiPatrol___data= InitHashtable()
boolean MultiPatrol___orderBool= false
rect MultiPatrol___ptrlRect
    
constant integer MultiPatrol___INDEX_DISPLAY= 9999
//endglobals from MultiPatrol
//globals from PlayerUnitLimit:
constant boolean LIBRARY_PlayerUnitLimit=true
//endglobals from PlayerUnitLimit
//globals from Rawcode2String:
constant boolean LIBRARY_Rawcode2String=true
//endglobals from Rawcode2String
//globals from Table:
constant boolean LIBRARY_Table=true
integer Table___less= 0
integer Table___more= 8190
    //Configure it if you use more than 8190 "key" variables in your map (this will never happen though).
   
hashtable Table___ht= InitHashtable()
constant integer Table___sizeK=4
constant integer Table___listK=6
//endglobals from Table
//globals from ThirdPersonCamera:
constant boolean LIBRARY_ThirdPersonCamera=true
hashtable ThirdPersonCamera___data= InitHashtable()
    
trigger ThirdPersonCamera___triggerMouse= CreateTrigger()
trigger ThirdPersonCamera___triggerLeft= CreateTrigger()
trigger ThirdPersonCamera___triggerRight= CreateTrigger()
trigger ThirdPersonCamera___triggerEsc= CreateTrigger()
trigger ThirdPersonCamera___triggerCleanup= CreateTrigger()
    
unit array ThirdPersonCamera___focusUnits
//endglobals from ThirdPersonCamera
//globals from WorldBounds:
constant boolean LIBRARY_WorldBounds=true
//endglobals from WorldBounds
//globals from ConstTable:
constant boolean LIBRARY_ConstTable=true
hashtable ConstTable___ht= InitHashtable()
//endglobals from ConstTable
//globals from DummyRecycler:
constant boolean LIBRARY_DummyRecycler=true
        //The rawcode of the Dummy Unit
constant integer DummyRecycler___DUMMY_ID= 'h07Q'
     
        //The owner of the Dummy Unit
constant player DummyRecycler___OWNER= Player(bj_PLAYER_NEUTRAL_VICTIM)
     
        //The number of indexed angle. The higher the value the:
        // - Lesser the turning time for the Dummy Units.
        // - Higher the total number of Dummy Units created at Map Initialization.
        //          Recommended Value: 10 (Max difference of 18 degrees)
constant integer DummyRecycler___ANGLES_COUNT= 10
     
        //The number of Dummy units per ANGLES_COUNT. The higher the value the:
        // - Higher the number of units that can be recycled per angle, when
        //   no more units are in queue, the system will resort to use CreateUnit.
        // - Higher the total number of Dummy Units created at Map Initialization.
        //    Recommended Value: 3 to 5 (for less overhead in Map Loading Screen)
constant integer DummyRecycler___STORED_UNIT_COUNT= 3
     
        //The maximum number of Dummy units that can exist. When the system resort
        //to using CreateUnit, the unit will be permanently added to the Dummy
        //List. To avoid spamming Dummy Units and having too much free Dummy
        //Units to allocate, the maximum number of Dummy Units is capped.
        //               Recommended Value: 80 to 120
constant integer DummyRecycler___MAX_DUMMY_COUNT= 100
     
        //When a certain angle have less than BORROW_REQUEST units in its list,
        //it will start to borrow Dummy Units from the list with the highest
        //Dummy Unit count.
        //      Recommended Value: Half of maximum STORED_UNIT_COUNT
constant integer DummyRecycler___BORROW_REQUEST= 5
     
        //It will only return a Dummy if the current dummy is close
        //to it's appropriate facing angle. This is to avoid returning
        //a Dummy which is still turning to face it's list angle.
constant real DummyRecycler___ANGLE_TOLERANCE= 10.0
     
        //An additional option to automatically hide recycled dummy units in the
        //corner of the map camera bounds
constant boolean DummyRecycler___HIDE_ON_MAP_CORNER= true
integer DummyRecycler___dummyCount= DummyRecycler___ANGLES_COUNT * DummyRecycler___STORED_UNIT_COUNT
real array DummyRecycler___angle
integer array DummyRecycler___count
integer array DummyRecycler___countHead
integer array DummyRecycler___countNext
integer array DummyRecycler___countPrev
integer array DummyRecycler___next
integer array DummyRecycler___prev
unit array DummyRecycler___dummy
integer DummyRecycler___upper
integer DummyRecycler___lower
integer DummyRecycler___lastInstance
constant real DummyRecycler___FACING_OFFSET= 180.0 / DummyRecycler___ANGLES_COUNT
//endglobals from DummyRecycler
//globals from Lists:
constant boolean LIBRARY_Lists=true
constant integer Lists_RECYCLE_KEY=8
constant boolean Lists_ENABLE_GUI= false
hashtable Lists___hashTable= InitHashtable()
//endglobals from Lists
//globals from MoveSpeedBonus:
constant boolean LIBRARY_MoveSpeedBonus=true
    // Use a Table instance instead of a Hashtable (requires library: Table https://www.hiveworkshop.com/threads/snippet-new-table.188084/ )
constant boolean MoveSpeedBonus_USE_TABLE= false
    
    // Create a new Hashtable for the system, instead of using an existing one.
    // If this is false, and you are not using GUI, make sure to also change the 2 textmacros below.
constant boolean MoveSpeedBonus_INIT_HASHTABLE= false
    
    // This textmacro returns the Alternate Hashtable when INIT_HASHTABLE is false.
    
    // This textmacro returns the integer Key used for storing data when INIT_HASHTABLE is false.
    
    // Automatically clean up unit data by removing any data when a unit is created that has an ID that was previously used
    // If you disable this, then you must call GMSS_ClearData whenever a unit enters the game or is removed from it
constant boolean MoveSpeedBonus_AUTO_CLEANUP= false
integer MoveSpeedBonus___data
hashtable MoveSpeedBonus___hashTable= null
//endglobals from MoveSpeedBonus
//globals from StructureTileDefinition:
constant boolean LIBRARY_StructureTileDefinition=true
//endglobals from StructureTileDefinition
//globals from TileDefinition:
constant boolean LIBRARY_TileDefinition=true
    
    // If you do not use these functions, setting this to false will spare you 2 global variables and an init function
    // Requires WorldBounds.
constant boolean TileDefinition___ENABLE_ID_FUNCTIONS= true

integer WorldTilesX
integer WorldTilesY
//endglobals from TileDefinition
//globals from DummyDmg:
constant boolean LIBRARY_DummyDmg=true
//endglobals from DummyDmg
//globals from GLHS:
constant boolean LIBRARY_GLHS=true
constant boolean GLHS_ENABLE_GUI= false
//endglobals from GLHS
//globals from HashtableWrapper:
constant boolean LIBRARY_HashtableWrapper=true
//endglobals from HashtableWrapper
//globals from MoveSpeedModification:
constant boolean LIBRARY_MoveSpeedModification=true
//endglobals from MoveSpeedModification
//globals from TableStruct:
constant boolean LIBRARY_TableStruct=true
//endglobals from TableStruct
//globals from TimedBonus:
constant boolean LIBRARY_TimedBonus=true
constant integer CSS_ARMOR= 0
constant integer CSS_ATKSPEED= 1
constant integer CSS_DAMAGE= 2
constant integer CSS_AGI= 3
constant integer CSS_INT= 4
constant integer CSS_STR= 5
constant integer CSS_LIFE_REGEN= 6
constant integer CSS_MANA_REGEN= 7
constant integer CSS_LIFE= 8
constant integer CSS_MANA= 9
constant integer CSS_SIGHT_RANGE= 10
//endglobals from TimedBonus
//globals from FilterTransformations:
constant boolean LIBRARY_FilterTransformations=true
//endglobals from FilterTransformations
//globals from LoPDecoBuilders:
constant boolean LIBRARY_LoPDecoBuilders=true
    
    
//endglobals from LoPDecoBuilders
//globals from LoPInit:
constant boolean LIBRARY_LoPInit=true
//endglobals from LoPInit
//globals from MultiBoard:
constant boolean LIBRARY_MultiBoard=true
//endglobals from MultiBoard
//globals from RectEnvironment:
constant boolean LIBRARY_RectEnvironment=true
//endglobals from RectEnvironment
//globals from UnitVisualMods:
constant boolean LIBRARY_UnitVisualMods=true
playercolor array UnitVisualMods___I2PC
hashtable UnitVisualMods___hashTable= null
group UnitVisualMods___loopGroup= CreateGroup()
    
constant boolean UnitVisualMods___INIT_HASHTABLE= true
constant integer UnitVisualMods___SCALE= 0
constant integer UnitVisualMods___RED= 1
constant integer UnitVisualMods___GREEN= 2
constant integer UnitVisualMods___BLUE= 3
constant integer UnitVisualMods___ALPHA= 4
constant integer UnitVisualMods___COLOR= 5
constant integer UnitVisualMods___ASPEED= 6
constant integer UnitVisualMods___ATAG= 7
constant integer UnitVisualMods___SELECT= 8
constant integer UnitVisualMods___NAME= 9

//endglobals from UnitVisualMods
//globals from AutoRectEnvironment:
constant boolean LIBRARY_AutoRectEnvironment=true
constant boolean AutoRectEnvironment___ENABLE_SET_HOOK= false
constant boolean AutoRectEnvironment___ENABLE_MOVE_HOOK= false
constant boolean AutoRectEnvironment___ENABLE_REMOVE_HOOK= false
constant real AutoRectEnvironment___PERIOD= 0.03
//endglobals from AutoRectEnvironment
//globals from GameTime:
constant boolean LIBRARY_GameTime=true
//endglobals from GameTime
//globals from LoPInitDecoBuilders:
constant boolean LIBRARY_LoPInitDecoBuilders=true
//endglobals from LoPInitDecoBuilders
//globals from UserDefinedRects:
constant boolean LIBRARY_UserDefinedRects=true
hashtable UserDefinedRects___hashTable= InitHashtable()
weathereffect array UserDefinedRects___weatherEffects
constant integer UserDefinedRects___RECYCLE_KEY=10
integer array UserDefinedRects___instances
//endglobals from UserDefinedRects
//globals from LoPHeader:
constant boolean LIBRARY_LoPHeader=true
//endglobals from LoPHeader
//globals from RectGenerator:
constant boolean LIBRARY_RectGenerator=true
    // Units
    //======================
    // The rawcode of the generator unit. Only used in the Conditions function of the advanced configuration.
constant integer RectGenerator_GENERATOR_ID= 'udr0'
    
    // The rawcode of the unit created by the MOVE ability. Listed here to make importing easier.
constant integer RectGenerator_DUMMY_ID= 'udr1'

    // Abilities
    //======================
    // Set the constants below to the rawcodes of each appropirate GUDR ability
constant integer RectGenerator_CREATE_OR_DESTROY= 'UDR2'
constant integer RectGenerator_TOGGLE_VISIBILITY= 'UDRA'
constant integer RectGenerator_MOVE= 'UDR4'
constant integer RectGenerator_MOVE_TERRAIN= 'UDRT'

constant integer RectGenerator_RETRACT_Y= 'UDR7'
constant integer RectGenerator_EXPAND_Y= 'UDR8'
constant integer RectGenerator_EXPAND_X= 'UDR6'
constant integer RectGenerator_RETRACT_X= 'UDR5'
    
constant integer RectGenerator_CHANGE_WEATHER_NEXT= 'UDR1'
constant integer RectGenerator_CHANGE_WEATHER_PREV= 'UDR0'
constant integer RectGenerator_TOGGLE_WEATHER= 'UDR9'
    
constant integer RectGenerator_LOCK_UNITS= 'UDR3'
constant integer RectGenerator_UNLOCK_UNITS= 'UDRB'
    
constant integer RectGenerator_PAGE_NEXT= 'UDRQ'
constant integer RectGenerator_PAGE_PREV= 'UDRR'
    
constant integer RectGenerator_TOGGLE_FOG= 'UDRS'
    
    // AutoRectEnvironment abilities: not needed if you are not using AutoRectEnvironment
constant integer RectGenerator_FOG_STYLE_UP= 'UDRI'
constant integer RectGenerator_FOG_STYLE_DOWN= 'UDRJ'
    
constant integer RectGenerator_FOG_ZSTART_UP= 'UDRK'
constant integer RectGenerator_FOG_ZSTART_DOWN= 'UDRL'
    
constant integer RectGenerator_FOG_ZEND_UP= 'UDRM'
constant integer RectGenerator_FOG_ZEND_DOWN= 'UDRN'
    
constant integer RectGenerator_FOG_DENSITY_UP= 'UDRO'
constant integer RectGenerator_FOG_DENSITY_DOWN= 'UDRP'
    
constant integer RectGenerator_FOG_RED_UP= 'UDRC'
constant integer RectGenerator_FOG_RED_DOWN= 'UDRD'
    
constant integer RectGenerator_FOG_GREEN_UP= 'UDRG'
constant integer RectGenerator_FOG_GREEN_DOWN= 'UDRH'
    
constant integer RectGenerator_FOG_BLUE_UP= 'UDRE'
constant integer RectGenerator_FOG_BLUE_DOWN= 'UDRF'
    // This is the maximum number of units that can be moved at a time with a GUDR (high limits may cause crashes)
constant integer RectGenerator___MAXIMUM_MOVE_LIMIT= 300
    
    // If this is set to false, you will need to manually remove 'Amov' and 'Aatk' when a generator enters the map
    // You will also need to automatically set it's abilities by calling //! runtextmacro GUDR_FirstPage("ADD"," unitVar" )
constant boolean RectGenerator___AUTOMATIC_ON_SPAWN= false
//endglobals from RectGenerator
//globals from SaveNLoad:
constant boolean LIBRARY_SaveNLoad=true
//endglobals from SaveNLoad
//globals from LoPone:
constant boolean LIBRARY_LoPone=true
//endglobals from LoPone
//globals from SaveUnit:
constant boolean LIBRARY_SaveUnit=true
force ENUM_FORCE= CreateForce()
boolean stillSaving= false
timer loopTimer
//endglobals from SaveUnit
//globals from LoPfour:
constant boolean LIBRARY_LoPfour=true
//endglobals from LoPfour
//globals from LoPtwo:
constant boolean LIBRARY_LoPtwo=true
//endglobals from LoPtwo
//globals from LoPthree:
constant boolean LIBRARY_LoPthree=true
//endglobals from LoPthree
    // User-defined
force udg_ALL_PLAYERS_FORCE= null
unit udg_RootUnit= null
integer udg_ItemAbilityForInteger= 0
rect udg_WholeMapRegion= null
unit udg_CometUnit= null
group udg_LegendaryScrollSpellGroup= null
integer udg_LegendaryScrollSpellInteger= 0
string array udg_RealNames
integer udg_PathWayForInteger= 0
effect udg_SoulPactDefenseEffect= null
integer udg_temp_integer= 0
string array udg_save_password
group array udg_save_grp
integer array udg_save_unit_nmbr
boolean array udg_save_load_boolean
unit udg_temp_unit= null
integer array udg_load_number
group udg_temp_group= null
location udg_temp_point= null
real array udg_load_center
integer udg_load_limit= 0
player udg_GAME_MASTER= null
integer udg_save_LoadUnitType= 0
location udg_temp_point2= null
hashtable udg_Hashtable_1= null
location array udg_PLAYER_LOCATIONS
force array udg_FORCES_PLAYER
integer array udg_TileSystem_TILES
integer array udg_TileSystem_ABILITIES
integer array udg_DecoSystem_Value
integer array udg_TreeSystem_TREES
integer array udg_TreeSystem_ABILITIES
integer udg_temp_integer2= 0
real array udg_TreeSystem_Space
real udg_temp_real= 0
real array udg_ColorSystem_Red
real array udg_ColorSystem_Green
real array udg_ColorSystem_Blue
real array udg_ColorSystem_Alpha
real array udg_DecoSystem_Scale
real array udg_DecoSystem_Facing
real array udg_DecoSystem_Height
real array udg_DecoSystem_animSpeed
string array udg_DecoSystem_Anims
integer udg_temp_ability= 0
player udg_temp_player= null
player udg_PowerSystem_Player= null
boolean udg_PowerSystem_allFlag= false
integer array udg_ScrollSystem_learnAbilities
integer array udg_ScrollSystem_realAbilities
integer udg_GDS_cSTUN= 0
integer udg_GDS_cSILENCE= 0
integer udg_GDS_cDISARM_R= 0
integer udg_GDS_cDISARM_M= 0
integer udg_GDS_cDISARM_B= 0
integer udg_GDS_cSNARE= 0
integer udg_GDS_cSUPERSILENCE= 0
integer udg_GDS_cSLEEP= 0
integer udg_GDS_cENTANGLE= 0
integer udg_GDS_cETHEREAL= 0
integer array udg_GDS_ABIL
integer array udg_GDS_BUFF
unit array udg_GDS_DUMMY
real udg_GDS_zMIN= 0
string array udg_GDS_ORDERS
hashtable udg_GDS_Hashtable= null
real udg_GDS_Duration= 0
real udg_GDS_Remaining= 0
unit udg_GDS_Target= null
integer udg_GDS_Type= 0
real udg_GDS_DurMul= 0
real udg_GDS_DurAdd= 0
real udg_udg_GDS_DurMin= 0
real udg_GDS_DurMin= 0
integer udg_Spell__DummyType= 0
player udg_Spell__DummyOwner= null
real udg_Spell__Interval= 0
boolean udg_Spell__Filter_AllowEnemy= false
boolean udg_Spell__Filter_AllowLiving= false
boolean udg_Spell__Filter_AllowHero= false
boolean udg_Spell__Filter_AllowNonHero= false
boolean udg_Spell__Filter_AllowAlly= false
boolean udg_Spell__Filter_AllowDead= false
boolean udg_Spell__Filter_AllowFlying= false
boolean udg_Spell__Filter_AllowMechanical= false
boolean udg_Spell__Filter_AllowStructure= false
boolean udg_Spell__Filter_AllowMagicImmune= false
boolean udg_Spell__WakeTargets= false
real udg_Spell__LevelMultiplier= 0
integer array udg_Spell_i_Level
integer udg_Spell__Level= 0
player udg_Spell__CasterOwner= null
real udg_Spell__Time= 0
real array udg_Spell_i_Time
real array udg_Spell_i_TargetY
real array udg_Spell_i_TargetX
location udg_Spell__CastPoint= null
location udg_Spell__TargetPoint= null
unit udg_Spell__Caster= null
unit udg_Spell__Target= null
unit array udg_Spell_i_Target
unit array udg_Spell_i_Caster
group array udg_Spell_i_TargetGroup
group udg_Spell__TargetGroup= null
boolean udg_Spell__Running= false
boolean udg_Spell__UseTargetGroup= false
boolean udg_Spell__Completed= false
timer udg_Spell_i_Timer= null
boolean array udg_Spell_i_UseTG
boolean array udg_Spell_i_Completed
integer array udg_Spell_i_EventType
boolean array udg_Spell_i_Linked
trigger udg_Spell__Trigger_OnLoop= null
hashtable udg_Spell__Hash= null
trigger array udg_Spell_i_OnLoopStack
trigger udg_Spell__Trigger_OnFinish= null
integer udg_Spell__Index= 0
trigger array udg_Spell_i_OnFinishStack
trigger udg_Spell__Trigger_OnEffect= null
trigger array udg_Spell_i_OnEffectStack
trigger udg_Spell__Trigger_OnChannel= null
trigger array udg_Spell_i_OnChannelStack
trigger udg_Spell__Trigger_OnCast= null
integer udg_Spell_i_Recycle= 0
trigger array udg_Spell_i_OnCastStack
integer udg_Spell_i_Instances= 0
integer udg_Spell_i_StackN= 0
integer array udg_Spell_i_StackRef
integer array udg_Spell_i_Stack
integer array udg_Spell_i_RecycleList
integer array udg_Spell_i_Head
unit udg_Spell_i_PreloadDummy= null
integer udg_Spell__Ability= 0
group udg_Spell__InRangeGroup= null
real udg_Spell__InRange= 0
location udg_Spell__InRangePoint= null
boolean array udg_Spell_i_AllowAlly
boolean array udg_Spell_i_AllowDead
boolean array udg_Spell_i_AllowEnemy
boolean array udg_Spell_i_AllowFlying
boolean array udg_Spell_i_AllowHero
boolean array udg_Spell_i_AllowMagicImmune
boolean array udg_Spell_i_AllowMechanical
boolean array udg_Spell_i_AllowNonHero
boolean array udg_Spell_i_AllowStructure
boolean array udg_Spell_i_AllowLiving
boolean udg_Spell__Channeling= false
boolean array udg_Spell_i_Channeling
integer udg_Spell_i_GroupN= 0
group array udg_Spell_i_GroupStack
integer udg_Spell__InRangeCount= 0
unit array udg_Spell__InRangeUnits
real udg_Spell__Duration= 0
real udg_Spell__DurationPerLevel= 0
real array udg_Spell_i_Duration
real array udg_Spell_i_LastTime
boolean udg_Spell__Expired= false
boolean udg_Spell__StartDuration= false
integer udg_Spell__InRangeMax= 0
unit udg_Spell__InRangeUnit= null
trigger udg_Spell__Trigger_InRangeFilter= null
trigger array udg_Spell_i_InRangeFilter
integer udg_DetectRemoveAbility= 0
integer udg_DetectTransformAbility= 0
real udg_WorldMaxX= 0
real udg_WorldMaxY= 0
unit array udg_CargoTransportUnit
group array udg_CargoTransportGroup
integer udg_UDexMax= 0
integer array udg_CheckDeathList
integer udg_UDexLastRecycled= 0
integer array udg_UDexPrev
integer array udg_UDexNext
integer udg_UDex= 0
unit array udg_UDexUnits
unit array udg_SummonerOfUnit
timer udg_CheckDeathTimer= null
real udg_UnitIndexEvent= 0
real udg_CargoEvent= 0
real udg_DeathEvent= 0
real udg_UnitTypeEvent= 0
boolean array udg_IsUnitAlive
boolean array udg_IsUnitBeingUnloaded
boolean array udg_IsUnitNew
boolean array udg_IsUnitReincarnating
boolean array udg_IsUnitRemoved
boolean udg_UnitIndexerEnabled= false
integer udg_DamageBlockingAbility= 0
integer udg_SpellDamageAbility= 0
integer udg_DamageTypeExplosive= 0
integer udg_DamageTypeCriticalStrike= 0
integer udg_DamageTypeHeal= 0
integer udg_DamageTypeReduced= 0
integer udg_DamageTypeBlocked= 0
integer udg_DmgEvBracers= 0
real udg_DAMAGE_FACTOR_BRACERS= 0
real udg_DAMAGE_FACTOR_ELUNES= 0
real udg_DAMAGE_FACTOR_ETHEREAL= 0
real udg_AfterDamageEvent= 0
real udg_DamageEvent= 0
real udg_DamageModifierEvent= 0
trigger udg_ClearDamageEvent= null
real udg_DamageEventAmount= 0
real udg_DamageEventPrevAmt= 0
boolean udg_DamageEventOverride= false
boolean udg_NextDamageOverride= false
unit udg_DamageEventSource= null
unit udg_DamageEventTarget= null
trigger udg_DamageEventTrigger= null
trigger udg_DmgEvTrig= null
integer udg_DamageEventType= 0
integer array udg_LastDmgPrevType
integer udg_NextDamageType= 0
integer udg_DamageEventsWasted= 0
integer udg_DmgEvRecursionN= 0
boolean udg_DmgEvRunning= false
boolean udg_DmgEvStarted= false
boolean udg_IsDamageSpell= false
boolean array udg_LastDmgWasSpell
real udg_LastDamageHP= 0
timer udg_DmgEvTimer= null
real array udg_LastDmgPrevAmount
real array udg_LastDmgValue
unit array udg_LastDmgSource
unit array udg_LastDmgTarget
boolean array udg_HideDamageFrom
boolean array udg_UnitDamageRegistered
integer array udg_System_PlayerArmy
integer array udg_System_PArmyLimit
integer udg_Commands_Integer= 0
integer array udg_System_LimitUnitCategory
real array udg_System_DecoGrid
integer array udg_DecoSystem_PlayerColor
boolean udg_save_localPlayerBool= false
string udg_System_searchStr
real array udg_save_XYminmaxcur
group array udg_System_NeutralUnits
real udg_Damage_Mod_Multiplier= 0
real udg_Damage_Mod_Add= 0
real udg_Damage_Mod_Minimum= 0
real udg_Damage_Mod_Maximum= 0
real udg_GDS_DebuffEvent= 0
boolean udg_GDS_Permanent= false
boolean udg_GDS_RegisterDisable= false
group array udg_Player_ControlGroup
group udg_System_ProtectedGroup= null
integer array udg_DecoUnitTypes
integer udg_System_DecoTotal= 0
rect udg_save_WholeMapRect= null
hashtable udg_Hashtable_2= null
boolean udg_Damage_Mod_Reset= false
boolean udg_Damage_Mod_AllowReflect= false
integer array udg_CSS_Abilities
boolean udg_CSS_GemBonusBoolean= false
integer udg_CSS_GemLevel= 0
hashtable udg_CSS_Hashtable= null
integer array udg_CSS_Power
boolean udg_CSS_PreloadBoolean= false
boolean udg_CSS_SocketingEnabled= false
real udg_EVENT_SOCKET_FINISH= 0
item udg_CSS_EventMainItem= null
item udg_CSS_EventSocketItem= null
unit udg_CSS_EventUnit= null
item array udg_CSS_EventMainItemStacked
item array udg_CSS_EventSocketItemStacked
unit array udg_CSS_EventUnitStacked
integer udg_CSS_Counter= 0
boolean udg_CSS_CustomSwitch= false
string array udg_CSS_String
hashtable udg_GCOS_Hashtable= null
integer array udg_GCOS_InstanceArray
integer udg_GCOS_Instance= 0
boolean udg_DamageTypeSpell= false
integer array udg_TimerBonuses
integer array udg_TileSystem_Var
real udg_K2DTimeout= 0
integer udg_Knockback2DRobustPathing= 0
real udg_Knockback2DDefaultFriction= 0
real udg_Knockback2DFriction= 0
boolean udg_Knockback2DDefaultBounce= false
boolean udg_Knockback2DBounces= false
boolean udg_Knockback2DDefaultPause= false
boolean udg_Knockback2DPause= false
boolean udg_Knockback2DDefaultKillTrees= false
boolean udg_Knockback2DKillTrees= false
real udg_Knockback2DDefaultDestRadius= 0
real udg_Knockback2DDestRadius= 0
string udg_Knockback2DTreeOrDebris
real udg_Knockback2DDefaultGravity= 0
real udg_Knockback2DGravity= 0
string udg_Knockback2DDefaultFX
string udg_Knockback2DLoopFX
real udg_Knockback2DDefaultFXRate= 0
real udg_Knockback2DFXRate= 0
real udg_K2DX= 0
real udg_K2DY= 0
item udg_K2DItem= null
unit udg_K2DDebrisKiller= null
real udg_Radians_Turn= 0
real udg_Radians_QuarterTurn= 0
real udg_Radians_QuarterPi= 0
rect udg_K2DRegion= null
real udg_K2DMaxX= 0
real udg_K2DMaxY= 0
real udg_K2DMinX= 0
real udg_K2DMinY= 0
real udg_K2DMaxDestRadius= 0
boolean udg_K2DItemsFound= false
boolean udg_K2DItemOffset= false
boolean array udg_IsUnitBeingKnockedBack
integer array udg_K2DPrev
integer array udg_K2DNext
timer udg_K2DTimer= null
unit udg_Knockback2DUnit= null
real array udg_K2DHeight
boolean array udg_K2DFreeze
trigger array udg_K2DImpact
boolean array udg_K2DOverride
unit array udg_K2DSource
real array udg_K2DAngle
real udg_Knockback2DAngle= 0
real udg_Knockback2DDistance= 0
real array udg_K2DDistanceLeft
real udg_Knockback2DTime= 0
real array udg_K2DTimeLeft
boolean udg_Knockback2DOverride= false
real udg_Knockback2DHeight= 0
real array udg_K2DHeightThreshold
real array udg_K2DLastX
real array udg_K2DLastY
real array udg_K2DCos
real array udg_K2DSin
boolean array udg_K2DFlying
integer array udg_K2DRadius
real array udg_K2DCosH
real array udg_K2DSinH
real array udg_K2DCosD1
real array udg_K2DSinD1
real array udg_K2DCosD2
real array udg_K2DSinD2
real array udg_K2DFriction
real array udg_K2DVelocity
boolean array udg_K2DKillTrees
real array udg_K2DDestRadius
boolean array udg_K2DAmphibious
boolean udg_Knockback2DAmphibious= false
boolean array udg_K2DBounce
real array udg_K2DCollision
real udg_Knockback2DCollision= 0
string array udg_K2DFXModel
real array udg_K2DFXRate
real array udg_K2DFXTimeLeft
trigger udg_Knockback2DOnImpact= null
trigger array udg_K2DCollide
trigger udg_Knockback2DOnCollide= null
trigger array udg_K2DEnd
trigger udg_Knockback2DOnEnd= null
boolean array udg_K2DPause
boolean array udg_K2DSimple
boolean udg_Knockback2DSimple= false
unit udg_Knockback2DSource= null
boolean array udg_K2DUnbiasedCollision
boolean udg_Knockback2DUnbiasedCollision= false
integer udg_LoopInt= 0
boolean array udg_Tauren_WarStomp
boolean array udg_Tauren_Shockwave
group udg_LeaklessGroup= null
unit array udg_save_LastLoadedUnit
boolean array udg_System_AutonameBoolean
real array udg_Abilities_AoRest_DmgDone
group udg_Abilities_AoRest_UnitGroup= null
dialog udg_PreventSave_Dialog= null
timer udg_PreventSave_Timer= null
integer udg_Commands_Counter= 0
integer udg_Commands_Counter_Max= 0
unit array udg_KillerOfUnit
integer array udg_UnitTypeOf
boolean array udg_IsUnitPreplaced
boolean array udg_IsUnitTransforming
integer udg_DamageEventAOE= 0
integer udg_DamageEventLevel= 0
group udg_DamageEventAOEGroup= null
unit udg_EnhancedDamageTarget= null
real udg_AOEDamageEvent= 0
integer array udg_Spell_i_Abil
boolean udg_Spell__AutoAddTargets= false
boolean array udg_Spell_i_AutoAddTargets
integer udg_Spell__BuffOrder= 0
integer array udg_Spell_i_BuffOrder
integer udg_Spell__BuffAbility= 0
integer array udg_Spell_i_BuffAbil
unit array udg_System_FP_Units
integer array udg_System_PlayerColor

    // Generated
rect gg_rct_GiveTo_Blue= null
rect gg_rct_GiveTo_Teal= null
rect gg_rct_GiveTo_Brown= null
rect gg_rct_GiveTo_Purple= null
rect gg_rct_GiveTo_Yellow= null
rect gg_rct_GiveTo_Orange= null
rect gg_rct_GiveTo_Green= null
rect gg_rct_GiveTo_Pink= null
rect gg_rct_GiveTo_Gray= null
rect gg_rct_GiveTo_Light_Blue= null
rect gg_rct_GiveTo_Dark_Green= null
rect gg_rct_WarpIn= null
rect gg_rct_DoorTreasureA= null
rect gg_rct_DoorTreasureB= null
rect gg_rct_DoorTitanB= null
rect gg_rct_DoorTitanA= null
rect gg_rct_DoorIceTitan= null
rect gg_rct_ThiefRecallA= null
rect gg_rct_ThiefRecallB= null
rect gg_rct_WaygateRed= null
rect gg_rct_WaygateBlue= null
rect gg_rct_Archaeologist= null
rect gg_rct_Water_Dragon= null
rect gg_rct_AltarofDeath= null
rect gg_rct_SolarisSpawn= null
rect gg_rct_Titan_Palace= null
rect gg_rct_Region_019= null
rect gg_rct_Titan_Palace_Inner= null
rect gg_rct_Titan_Palace_Inner_Entrance= null
rect gg_rct_Patrol_System_Range= null
rect gg_rct_Deco_Tents_Rect= null
rect gg_rct_GiveTo_Maroon= null
rect gg_rct_GiveTo_Navy= null
rect gg_rct_GiveTo_Emerald= null
rect gg_rct_GiveTo_Turquoise= null
rect gg_rct_GiveTo_Violet= null
rect gg_rct_GiveTo_Peach= null
rect gg_rct_GiveTo_Mint= null
rect gg_rct_GiveTo_Lavender= null
rect gg_rct_GiveTo_Coal= null
rect gg_rct_GiveTo_Snow= null
rect gg_rct_GiveTo_Wheat= null
rect gg_rct_GiveTo_Peanut= null
camerasetup gg_cam_Camera_001= null
sound gg_snd_StopTimeTicTac= null
sound gg_snd_RiflemanAttack1= null
trigger gg_trg_Generate_Missing_Doodad_Globals= null
trigger gg_trg_External_Set_Tiles= null
trigger gg_trg_External_Import_All_Files= null
trigger gg_trg_Init= null
trigger gg_trg_Init_Deco_Builders= null
trigger gg_trg_Init_Quests= null
trigger gg_trg_Init_Main= null
trigger gg_trg_Init_0_seconds= null
trigger gg_trg_Init_Create_Events= null
trigger gg_trg_System_Set_Unit_Color= null
trigger gg_trg_System_Level_Up_Heroes= null
trigger gg_trg_System_Autoname= null
trigger gg_trg_System_TPalace_Doors= null
trigger gg_trg_System_Detect_Leaver= null
trigger gg_trg_System_Player_Locations= null
trigger gg_trg_System_Give_Potion_to_Hero= null
trigger gg_trg_System_Cleanup_Death= null
trigger gg_trg_System_Cleanup_Removal= null
trigger gg_trg_System_Cleanup_Owner_Change= null
trigger gg_trg_System_Cleanup_UnitGroups= null
trigger gg_trg_System_Cleanup_Items= null
trigger gg_trg_System_Limit_Register= null
trigger gg_trg_System_Limit_Type_Change= null
trigger gg_trg_System_Titan_Palace_Item_Prot= null
trigger gg_trg_System_Titan_Palace_Prot= null
trigger gg_trg_System_Titan_GiveUnit= null
trigger gg_trg_System_Titan_Powers= null
trigger gg_trg_System_PreventSave_Catch= null
trigger gg_trg_System_PreventSave_Clear= null
trigger gg_trg_Commands_Set_Color= null
trigger gg_trg_Commands_Toggle_Autoname= null
trigger gg_trg_Commands_Name_Unit= null
trigger gg_trg_Commands_Give= null
trigger gg_trg_Commands_Deleteme= null
trigger gg_trg_Commands_Deco_Spawn= null
trigger gg_trg_Commands_Hide_Decos= null
trigger gg_trg_Commands_Select_Search= null
trigger gg_trg_Commands_Neutral= null
trigger gg_trg_Commands_Take= null
trigger gg_trg_Commands_Copy= null
trigger gg_trg_Commands_Remove_Kill= null
trigger gg_trg_Commands_StartRectCamera= null
trigger gg_trg_Commands_Set_Alliance= null
trigger gg_trg_Commands_Set_Name= null
trigger gg_trg_Commands_Real_Name= null
trigger gg_trg_CommandsR_Toggle_Prot= null
trigger gg_trg_CommandsR_Make_Titan= null
trigger gg_trg_CommandsR_Set_Limits_for_Units= null
trigger gg_trg_CommandsR_Delete= null
trigger gg_trg_CommandsR_Fog= null
trigger gg_trg_CommandsR_Water_Color= null
trigger gg_trg_CommandsR_Mind= null
trigger gg_trg_CommandsR_Kick= null
trigger gg_trg_CommandsR_The_Creator= null
trigger gg_trg_CommandsR_Toggle_Dmg_Tags= null
trigger gg_trg_CommandsD_Control= null
trigger gg_trg_CommandsD_Set_AoE= null
trigger gg_trg_CommandsD_Set_Tree_Space= null
trigger gg_trg_CommandsD_Set_Parameters= null
trigger gg_trg_CommandsD_Set_RGB= null
trigger gg_trg_CommandsD_Unit_Mods= null
trigger gg_trg_CommandsD_Add_Tag= null
trigger gg_trg_CommandsD_Locust= null
trigger gg_trg_CommandsD_Variation= null
trigger gg_trg_DecoBuilder_Movement= null
trigger gg_trg_DecoBuilder_Increase_Count= null
trigger gg_trg_DecoBuilder_RangedBuild= null
trigger gg_trg_DecoBuilder_Cast_Ability= null
trigger gg_trg_Deco_DisableMovement= null
trigger gg_trg_Deco_Instant_Upgrade= null
trigger gg_trg_Deco_Root_Anywhere= null
trigger gg_trg_Deco_Movement= null
trigger gg_trg_Deco_Waygate= null
trigger gg_trg_Deco_Gates= null
trigger gg_trg_TerrainSystem_Cast_Ability= null
trigger gg_trg_TreeSystem_Create_Trees= null
trigger gg_trg_TreeSystem_Cast_Ability= null
trigger gg_trg_TreeSystem_Choose_Tree= null
trigger gg_trg_Lists= null
trigger gg_trg_GLHS_Main= null
trigger gg_trg_GMUI_Main= null
trigger gg_trg_Table= null
trigger gg_trg_ConstTable= null
trigger gg_trg_HashtableWrapper= null
trigger gg_trg_TableStruct= null
trigger gg_trg_MultiPatrol= null
trigger gg_trg_MultiPatrol_Addons= null
trigger gg_trg_UserDefinedRects= null
trigger gg_trg_RectGenerator= null
trigger gg_trg_RectEnvironment= null
trigger gg_trg_AutoRectEnvironment= null
trigger gg_trg_TileDefinition= null
trigger gg_trg_StructureTileDefinition= null
trigger gg_trg_WorldBounds= null
trigger gg_trg_DestructableLib= null
trigger gg_trg_GroupTools= null
trigger gg_trg_DummyRecycler= null
trigger gg_trg_Id2String= null
trigger gg_trg_CutToComma= null
trigger gg_trg_UnitVisualMods= null
trigger gg_trg_Camera_System= null
trigger gg_trg_MoveSpeedBonus= null
trigger gg_trg_Move_Speed_Modification= null
trigger gg_trg_MultiBoard= null
trigger gg_trg_GameTime= null
trigger gg_trg_Debug= null
trigger gg_trg_ArrayAgent= null
trigger gg_trg_DummyDmg= null
trigger gg_trg_PlayerUnitLimit= null
trigger gg_trg_TimedBonus= null
trigger gg_trg_Victim_Tracker= null
trigger gg_trg_LoPHeader= null
trigger gg_trg_CustomStatSystem= null
trigger gg_trg_CSS_Standalone_Bonus= null
trigger gg_trg_Color_Code_Setting= null
trigger gg_trg_CSS_Item_Functions= null
trigger gg_trg_Item_Declaration= null
trigger gg_trg_Unit_Event_Config= null
trigger gg_trg_Unit_Event= null
trigger gg_trg_Damage_Engine_Config= null
trigger gg_trg_Damage_Engine= null
trigger gg_trg_Life_Drain_Fix= null
trigger gg_trg_Damage_Tag= null
trigger gg_trg_Bash= null
trigger gg_trg_Combat_Tag= null
trigger gg_trg_Spell_System_Config= null
trigger gg_trg_Spell_System= null
trigger gg_trg_Knockback_2D_Config= null
trigger gg_trg_Knockback_2D_Destroy= null
trigger gg_trg_Knockback_2D= null
trigger gg_trg_Knockback_2D_System= null
trigger gg_trg_Knockback_2D_System_Copy= null
trigger gg_trg_K2D_OnLoop_Template= null
trigger gg_trg_SaveLoad_Setup= null
trigger gg_trg_SaveLoad_Commands= null
trigger gg_trg_SaveLoad_Set_Center_Numbers= null
trigger gg_trg_SaveCall= null
trigger gg_trg_SaveLoop_Dest= null
trigger gg_trg_SaveLoop_Terrain= null
trigger gg_trg_LoadRequest= null
trigger gg_trg_LoadUnit= null
trigger gg_trg_LoadUnit_Extra= null
trigger gg_trg_LoadDest= null
trigger gg_trg_LoadTerrain= null
trigger gg_trg_SaveNLoad= null
trigger gg_trg_GCOS_Init_Copy= null
trigger gg_trg_Circle_Object_System= null
trigger gg_trg_GDS_Setup= null
trigger gg_trg_GDS_Main_Modifier= null
trigger gg_trg_GDS_Main= null
trigger gg_trg_Spell_System_Filter_Decorations= null
trigger gg_trg_Initialize_Spells= null
trigger gg_trg_Spell_System_Sample_Config= null
trigger gg_trg_Spatial_Distortion_Cast= null
trigger gg_trg_AoE_Snare= null
trigger gg_trg_Mass_Banish= null
trigger gg_trg_Make_Unit_Selectable= null
trigger gg_trg_Angel_Judgement= null
trigger gg_trg_Tyrael_Judgement= null
trigger gg_trg_Tyrael_WotT_Cast= null
trigger gg_trg_Chain_Slow= null
trigger gg_trg_Stormstrike= null
trigger gg_trg_Replenish= null
trigger gg_trg_Disarming_Blow= null
trigger gg_trg_Scatter_Shot= null
trigger gg_trg_Imperius_Light_of_Valor= null
trigger gg_trg_War_Stomp= null
trigger gg_trg_Carrion_Burst= null
trigger gg_trg_Burst_of_Despair= null
trigger gg_trg_Greater_Shockwave= null
trigger gg_trg_Bladespin= null
trigger gg_trg_Charge_Cast= null
trigger gg_trg_Charge_Collision= null
trigger gg_trg_Charge_End= null
trigger gg_trg_Thunderstrike_Cast= null
trigger gg_trg_Thunderstrike_Impact= null
trigger gg_trg_Waterspout= null
trigger gg_trg_Battle_Jump_Cast= null
trigger gg_trg_Battle_Jump_End= null
trigger gg_trg_Ethereal_Jaunt= null
trigger gg_trg_Power_Surge= null
trigger gg_trg_FilterTransformations= null
trigger gg_trg_Ability_Cooldown= null
trigger gg_trg_Summon= null
trigger gg_trg_Sargeras_Silence_New= null
trigger gg_trg_Aura_Of_Restitution= null
trigger gg_trg_Cosmosis_Stop_Time= null
trigger gg_trg_Cosmosis_StTm_Noise= null
trigger gg_trg_Cosmosis_Give_Item= null
trigger gg_trg_TheCreator_Invincibility= null
trigger gg_trg_On_Damage= null
trigger gg_trg_On_Impact= null
trigger gg_trg_On_Spell_Cast= null
trigger gg_trg_On_Spell_Stop= null
trigger gg_trg_Stop_time_of_day= null
trigger gg_trg_Test= null
trigger gg_trg_FlamesOfAzzinoth= null
trigger gg_trg_Flame_Dies= null
trigger gg_trg_Comet_Cast= null
trigger gg_trg_Comet_Summon= null
trigger gg_trg_Comet_Impact= null
trigger gg_trg_Pyroblast_Cast= null
trigger gg_trg_Pyroblast_Impact= null
trigger gg_trg_Pyroblast_Effect_1= null
trigger gg_trg_Pyroblast_Effect_2= null
trigger gg_trg_Frost_Storm_Casting= null
trigger gg_trg_Frost_Storm_Effect= null
trigger gg_trg_Silver_Key_Trigger= null
trigger gg_trg_Pure_Water_Effect= null
trigger gg_trg_Sword= null
trigger gg_trg_ScrollSystem_Learn_Spell= null
trigger gg_trg_Global_Return_Library= null
trigger gg_trg_Ban_Player= null
trigger gg_trg_Uproot_Detect= null
trigger gg_trg_Test_SetUnitX= null
trigger gg_trg_Untitled_Trigger_002= null
trigger gg_trg_Create_Destructable= null
unit gg_unit_e00D_0409= null
unit gg_unit_e00C_0408= null
unit gg_unit_e009_0407= null
unit gg_unit_e008_0406= null
unit gg_unit_H00V_0359= null
unit gg_unit_H00S_0141= null
unit gg_unit_e00A_0411= null
unit gg_unit_e007_0410= null
unit gg_unit_e00B_0405= null
destructable gg_dest_ATg1_0003= null
destructable gg_dest_ATg3_0004= null
destructable gg_dest_LTe3_0005= null
destructable gg_dest_DTg5_0007= null
destructable gg_dest_DTg5_0008= null
trigger gg_trg_SaveLoop= null
boolean g_unitHasBeenRemoved= false
constant integer DecoMovement_CONTROLLER= 'h0KD'
        
constant integer DecoMovement_MOVE_UP= 'A032'
constant integer DecoMovement_MOVE_LEFT= 'A02Y'
constant integer DecoMovement_MOVE_RIGHT= 'A02Z'
constant integer DecoMovement_MOVE_DOWN= 'A031'
        
constant integer DecoMovement_MOVE= 'A037'
        
constant integer DecoMovement_SUICIDE= 'A0B7'
constant integer DecoMovement_FACE= 'A00T'
constant integer DecoMovement_COPY= 'A012'
constant integer DecoMovement_ROTATE= 'A011'
    // The time between each player's selection being enumerated.
constant real MultiPatrolDisplayOnSelect___PERIOD= 0.25

group MultiPatrolDisplayOnSelect___stack_grp= CreateGroup()

boolean ENABLE_TAGS= false


trigger l__library_init

//JASSHelper struct globals:
constant integer si__Iterator=1
constant integer si__Table___dex=2
constant integer si__Table___handles=3
constant integer si__Table___agents=4
constant integer si__Table___reals=5
constant integer si__Table___booleans=6
constant integer si__Table___strings=7
constant integer si__Table___integers=8
constant integer si__Table___players=9
constant integer si__Table___widgets=10
constant integer si__Table___destructables=11
constant integer si__Table___items=12
constant integer si__Table___units=13
constant integer si__Table___abilitys=14
constant integer si__Table___timers=15
constant integer si__Table___triggers=16
constant integer si__Table___triggerconditions=17
constant integer si__Table___triggeractions=18
constant integer si__Table___events=19
constant integer si__Table___forces=20
constant integer si__Table___groups=21
constant integer si__Table___locations=22
constant integer si__Table___rects=23
constant integer si__Table___boolexprs=24
constant integer si__Table___sounds=25
constant integer si__Table___effects=26
constant integer si__Table___unitpools=27
constant integer si__Table___itempools=28
constant integer si__Table___quests=29
constant integer si__Table___questitems=30
constant integer si__Table___defeatconditions=31
constant integer si__Table___timerdialogs=32
constant integer si__Table___leaderboards=33
constant integer si__Table___multiboards=34
constant integer si__Table___multiboarditems=35
constant integer si__Table___trackables=36
constant integer si__Table___dialogs=37
constant integer si__Table___buttons=38
constant integer si__Table___texttags=39
constant integer si__Table___lightnings=40
constant integer si__Table___images=41
constant integer si__Table___ubersplats=42
constant integer si__Table___regions=43
constant integer si__Table___fogstates=44
constant integer si__Table___fogmodifiers=45
constant integer si__Table___hashtables=46
constant integer si__Table=47
constant integer si__TableArray=48
integer s__TableArray_tempTable
integer s__TableArray_tempEnd
constant integer si__HashTable=49
constant integer si__WorldBounds=50
integer s__WorldBounds_maxX
integer s__WorldBounds_maxY
integer s__WorldBounds_minX
integer s__WorldBounds_minY
integer s__WorldBounds_centerX
integer s__WorldBounds_centerY
rect s__WorldBounds_world
region s__WorldBounds_worldRegion
constant integer si__ConstTable___handles=51
constant integer si__ConstTable___agents=52
constant integer si__ConstTable___reals=53
constant integer si__ConstTable___booleans=54
constant integer si__ConstTable___strings=55
constant integer si__ConstTable___integers=56
constant integer si__ConstTable___players=57
constant integer si__ConstTable___widgets=58
constant integer si__ConstTable___destructables=59
constant integer si__ConstTable___items=60
constant integer si__ConstTable___units=61
constant integer si__ConstTable___abilitys=62
constant integer si__ConstTable___timers=63
constant integer si__ConstTable___triggers=64
constant integer si__ConstTable___triggerconditions=65
constant integer si__ConstTable___triggeractions=66
constant integer si__ConstTable___events=67
constant integer si__ConstTable___forces=68
constant integer si__ConstTable___groups=69
constant integer si__ConstTable___locations=70
constant integer si__ConstTable___rects=71
constant integer si__ConstTable___boolexprs=72
constant integer si__ConstTable___sounds=73
constant integer si__ConstTable___effects=74
constant integer si__ConstTable___unitpools=75
constant integer si__ConstTable___itempools=76
constant integer si__ConstTable___quests=77
constant integer si__ConstTable___questitems=78
constant integer si__ConstTable___defeatconditions=79
constant integer si__ConstTable___timerdialogs=80
constant integer si__ConstTable___leaderboards=81
constant integer si__ConstTable___multiboards=82
constant integer si__ConstTable___multiboarditems=83
constant integer si__ConstTable___trackables=84
constant integer si__ConstTable___dialogs=85
constant integer si__ConstTable___buttons=86
constant integer si__ConstTable___texttags=87
constant integer si__ConstTable___lightnings=88
constant integer si__ConstTable___images=89
constant integer si__ConstTable___ubersplats=90
constant integer si__ConstTable___regions=91
constant integer si__ConstTable___fogstates=92
constant integer si__ConstTable___fogmodifiers=93
constant integer si__ConstTable___hashtables=94
constant integer si__ConstTable=95
constant integer si__ConstHashTable=96
constant integer si__DummyRecycler___S=97
integer s__DummyRecycler___S_tb
constant integer si__TileDefinition___TileDefinition=98
constant integer si__LinkedHashSet=99
integer s__LinkedHashSet_enumElement= 0
integer s__LinkedHashSet_enumSet= 0
constant integer si__TableStruct=100
constant integer si__FilterTransformations_Globals=101
integer si__FilterTransformations_Globals_F=0
integer si__FilterTransformations_Globals_I=0
integer array si__FilterTransformations_Globals_V
constant integer s__FilterTransformations_Globals_data_impl=12
constant integer si__LoP_DecoBuilders=102
constant integer s__LoP_DecoBuilders_static_members_key=14
constant integer s__LoP_DecoBuilders_SpecialDecoLastIndex_impl=16
constant integer s__LoP_DecoBuilders_BasicDecoFirstIndex_impl=18
constant integer s__LoP_DecoBuilders_BasicDecoLastIndex_impl=20
constant integer s__LoP_DecoBuilders_AdvDecoFirstIndex_impl=22
constant integer s__LoP_DecoBuilders_DecoLastIndex_impl=24
constant integer si__LoPInit_Globals=103
integer si__LoPInit_Globals_F=0
integer si__LoPInit_Globals_I=0
integer array si__LoPInit_Globals_V
constant integer s__LoPInit_Globals_regionTable_impl=26
constant integer si__MultiBoard=104
constant integer s__MultiBoard_items_impl=28
constant integer s__MultiBoard_cols_impl=30
constant integer s__MultiBoard_rows_impl=32
constant integer s__MultiBoard_multiboard_impl=34
constant integer si__TerrainFog=105
constant integer s__TerrainFog_LINEAR= 0
constant integer s__TerrainFog_EXPONENTIAL= 1
constant integer s__TerrainFog_EXPONENTIAL2= 2
constant integer s__TerrainFog_style_impl=36
constant integer s__TerrainFog_zStart_impl=38
constant integer s__TerrainFog_zEnd_impl=40
constant integer s__TerrainFog_density_impl=42
constant integer s__TerrainFog_red_impl=44
constant integer s__TerrainFog_green_impl=46
constant integer s__TerrainFog_blue_impl=48
constant integer si__RectEnvironment=106
constant integer s__RectEnvironment_fog_impl=50
constant integer si__UnitVisualMods___data_reals=107
constant integer si__UnitVisualMods___data_booleans=108
constant integer si__UnitVisualMods___data_strings=109
constant integer si__UnitVisualMods___data_integers=110
constant integer si__UnitVisualMods___data_handles=111
constant integer si__UnitVisualMods___data_agents=112
constant integer si__UnitVisualMods___data_players=113
constant integer si__UnitVisualMods___data_widgets=114
constant integer si__UnitVisualMods___data_destructables=115
constant integer si__UnitVisualMods___data_items=116
constant integer si__UnitVisualMods___data_units=117
constant integer si__UnitVisualMods___data_abilitys=118
constant integer si__UnitVisualMods___data_timers=119
constant integer si__UnitVisualMods___data_triggers=120
constant integer si__UnitVisualMods___data_triggerconditions=121
constant integer si__UnitVisualMods___data_triggeractions=122
constant integer si__UnitVisualMods___data_events=123
constant integer si__UnitVisualMods___data_forces=124
constant integer si__UnitVisualMods___data_groups=125
constant integer si__UnitVisualMods___data_locations=126
constant integer si__UnitVisualMods___data_rects=127
constant integer si__UnitVisualMods___data_boolexprs=128
constant integer si__UnitVisualMods___data_sounds=129
constant integer si__UnitVisualMods___data_effects=130
constant integer si__UnitVisualMods___data_unitpools=131
constant integer si__UnitVisualMods___data_itempools=132
constant integer si__UnitVisualMods___data_quests=133
constant integer si__UnitVisualMods___data_questitems=134
constant integer si__UnitVisualMods___data_defeatconditions=135
constant integer si__UnitVisualMods___data_timerdialogs=136
constant integer si__UnitVisualMods___data_leaderboards=137
constant integer si__UnitVisualMods___data_multiboards=138
constant integer si__UnitVisualMods___data_multiboarditems=139
constant integer si__UnitVisualMods___data_trackables=140
constant integer si__UnitVisualMods___data_dialogs=141
constant integer si__UnitVisualMods___data_buttons=142
constant integer si__UnitVisualMods___data_texttags=143
constant integer si__UnitVisualMods___data_lightnings=144
constant integer si__UnitVisualMods___data_images=145
constant integer si__UnitVisualMods___data_ubersplats=146
constant integer si__UnitVisualMods___data_regions=147
constant integer si__UnitVisualMods___data_fogstates=148
constant integer si__UnitVisualMods___data_fogmodifiers=149
constant integer si__UnitVisualMods___data_hashtables=150
constant integer si__UnitVisualMods___data_Child=151
constant integer si__UnitVisualMods___data=152
constant integer si__TerrainType2Id=153
constant integer s__TerrainType2Id_KEY= - 2
constant integer si__UnitVisuals=154
constant integer si__AutoRectEnvironment___Globals=155
constant integer s__AutoRectEnvironment___Globals_static_members_key=52
constant integer s__AutoRectEnvironment___Globals_lastCameraX_impl=54
constant integer s__AutoRectEnvironment___Globals_lastCameraY_impl=56
constant integer s__AutoRectEnvironment___Globals_rectWasMoved_impl=58
constant integer s__AutoRectEnvironment___Globals_lastCameraRect_impl=60
constant integer s__AutoRectEnvironment___Globals_allRects_impl=62
constant integer s__AutoRectEnvironment___Globals_rects_impl=64
constant integer s__AutoRectEnvironment___Globals_id2_impl=66
constant integer si__AutoRectEnvironment___InitStruct=156
constant integer si__GameTime=157
integer s__GameTime_a
constant integer s__GameTime_static_members_key=68
constant integer s__GameTime_hours_impl=70
constant integer s__GameTime_minutes_impl=72
constant integer s__GameTime_seconds_impl=74
constant integer s__GameTime_timer_impl=76
constant integer s__GameTime_multiboard_impl=78
constant integer si__UserDefinedRects___Indices=158
constant integer si__RectGenerator___FogStyle=159
constant integer s__RectGenerator___FogStyle_strings_impl=80
constant integer s__RectGenerator___FogStyle_linkedListNext_impl=82
constant integer s__RectGenerator___FogStyle_linkedListPrev_impl=84
trigger st__Table___reals__getindex
trigger st__Table___reals__setindex
trigger st__Table___units__getindex
trigger st__Table___units__setindex
trigger st__Table___units_remove
trigger st__Table__get_real
trigger st__Table__get_unit
trigger st__Table_create
integer f__arg_integer1
real f__arg_real1
unit f__arg_unit1
integer f__arg_this
real f__result_real
unit f__result_unit
integer f__result_integer

endglobals


//Generated allocator of LoPInit_Globals
function s__LoPInit_Globals__allocate takes nothing returns integer
 local integer this=si__LoPInit_Globals_F
    if (this!=0) then
        set si__LoPInit_Globals_F=si__LoPInit_Globals_V[this]
    else
        set si__LoPInit_Globals_I=si__LoPInit_Globals_I+1
        set this=si__LoPInit_Globals_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__LoPInit_Globals_V[this]=-1
 return this
endfunction

//Generated destructor of LoPInit_Globals
function s__LoPInit_Globals_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__LoPInit_Globals_V[this]!=-1) then
        return
    endif
    set si__LoPInit_Globals_V[this]=si__LoPInit_Globals_F
    set si__LoPInit_Globals_F=this
endfunction

//Generated allocator of FilterTransformations_Globals
function s__FilterTransformations_Globals__allocate takes nothing returns integer
 local integer this=si__FilterTransformations_Globals_F
    if (this!=0) then
        set si__FilterTransformations_Globals_F=si__FilterTransformations_Globals_V[this]
    else
        set si__FilterTransformations_Globals_I=si__FilterTransformations_Globals_I+1
        set this=si__FilterTransformations_Globals_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__FilterTransformations_Globals_V[this]=-1
 return this
endfunction

//Generated destructor of FilterTransformations_Globals
function s__FilterTransformations_Globals_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__FilterTransformations_Globals_V[this]!=-1) then
        return
    endif
    set si__FilterTransformations_Globals_V[this]=si__FilterTransformations_Globals_F
    set si__FilterTransformations_Globals_F=this
endfunction

//Generated method caller for Table._get_real
function sc__Table__get_real takes integer this returns integer
        return this
endfunction

//Generated method caller for Table._get_unit
function sc__Table__get_unit takes integer this returns integer
        return this
endfunction

//Generated method caller for Table.create
function sc__Table_create takes nothing returns integer
    call TriggerEvaluate(st__Table_create)
 return f__result_integer
endfunction

//Generated method caller for Table___units._getindex
function sc__Table___units__getindex takes integer this,integer key returns unit
        return LoadUnitHandle(Table___ht, this, key)
endfunction

//Generated method caller for Table___units._setindex
function sc__Table___units__setindex takes integer this,integer key,unit value returns nothing
        call SaveUnitHandle(Table___ht, this, key, value)
endfunction

//Generated method caller for Table___units.remove
function sc__Table___units_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
endfunction

//Generated method caller for Table___reals._getindex
function sc__Table___reals__getindex takes integer this,integer key returns real
        return LoadReal(Table___ht, this, key)
endfunction

//Generated method caller for Table___reals._setindex
function sc__Table___reals__setindex takes integer this,integer key,real value returns nothing
        call SaveReal(Table___ht, this, key, value)
endfunction

//library ArrayAgent:
//===========================================================================
// Agent Key System
// Store data in agents as a 1-time write, 1-time read (only checks for collisions in debug mode)
// Before writing to the same agent, you must Flush the AgentKey

// How to use the system: 
// First, you must use CreateAgentKey() to get the integer used in the Save functions
// After this, you should not call CreateAgentKey() on the same agent again until you have called
// AgentFlush() on the created key.

// This system relies solely on debug messages, and is mainly to help keep code organized and readable,
// by expliciting the temporary nature of the stored data. Use it wisely, and keep this in mind.
//===========================================================================
// Debug functions


function AkeyDebugCreate takes integer agentKey returns nothing
    local integer count= LoadInteger(ArrayAgent_hashTable, 0, agentKey)
    
    call SaveInteger(ArrayAgent_hashTable, 0, agentKey, count + 1)
    if count > 0 then
        call BJDebugMsg("Created an Agent Key for an agent which already had one!")
    endif
endfunction

function AkeyDebugUncreated takes integer agentKey returns boolean
    if LoadInteger(ArrayAgent_hashTable, 0, agentKey) == 0 then
        call BJDebugMsg("Accessed ArrayAgent_Hashtable with an invalid Key!!")
        return true
    endif
    return false
endfunction

function AkeyDebugClear takes integer agentKey returns nothing
    if AkeyDebugUncreated(agentKey) then
        call BJDebugMsg("Flushed an Agent Key that was not created!")
    endif
    call RemoveSavedInteger(ArrayAgent_hashTable, 0, agentKey)
endfunction

function AkeyDebugSave takes integer agentKey,integer whichKey returns nothing
    if HaveSavedBoolean(ArrayAgent_hashTable, agentKey, whichKey) then
        call BJDebugMsg("Saved in key " + I2S(whichKey) + " while Boolean was stored")
    elseif HaveSavedHandle(ArrayAgent_hashTable, agentKey, whichKey) then
        call BJDebugMsg("Saved in key " + I2S(whichKey) + " while Handle was stored")
    elseif HaveSavedInteger(ArrayAgent_hashTable, agentKey, whichKey) then
        call BJDebugMsg("Saved in key " + I2S(whichKey) + " while Integer was stored")
    elseif HaveSavedReal(ArrayAgent_hashTable, agentKey, whichKey) then
        call BJDebugMsg("Saved in key " + I2S(whichKey) + " while Real was stored")
    elseif HaveSavedString(ArrayAgent_hashTable, agentKey, whichKey) then
        call BJDebugMsg("Saved in key " + I2S(whichKey) + " while String was stored")
    endif
endfunction

//===========================================================================
// Get Agent Key

function CreateAgentKey takes agent whichAgent returns integer
    return GetHandleId(whichAgent)
endfunction

function GetAgentKey takes agent whichAgent returns integer
    return GetHandleId(whichAgent)
endfunction

//===========================================================================
// AgentKeySaveType
function AgentSaveAgent takes integer agentKey,integer whichKey,agent value returns nothing
    call SaveAgentHandle(ArrayAgent_hashTable, agentKey, whichKey, value)
endfunction

function AgentSaveInteger takes integer agentKey,integer whichKey,integer value returns nothing
    call SaveInteger(ArrayAgent_hashTable, agentKey, whichKey, value)
endfunction

function AgentSaveBoolean takes integer agentKey,integer whichKey,boolean value returns nothing
    call SaveBoolean(ArrayAgent_hashTable, agentKey, whichKey, value)
endfunction

function AgentSaveReal takes integer agentKey,integer whichKey,real value returns nothing
    call SaveReal(ArrayAgent_hashTable, agentKey, whichKey, value)
endfunction

function AgentSaveStr takes integer agentKey,integer whichKey,string value returns nothing
    call SaveStr(ArrayAgent_hashTable, agentKey, whichKey, value)
endfunction

//===========================================================================
// AgentKeyLoadType

//Agents
function AgentLoadUnit takes integer agentKey,integer whichKey returns unit
    return LoadUnitHandle(ArrayAgent_hashTable, agentKey, whichKey)
endfunction

function AgentLoadItem takes integer agentKey,integer whichKey returns item
    return LoadItemHandle(ArrayAgent_hashTable, agentKey, whichKey)
endfunction

function AgentLoadGroup takes integer agentKey,integer whichKey returns group
    return LoadGroupHandle(ArrayAgent_hashTable, agentKey, whichKey)
endfunction

function AgentLoadTrigger takes integer agentKey,integer whichKey returns trigger
    return LoadTriggerHandle(ArrayAgent_hashTable, agentKey, whichKey)
endfunction

function AgentLoadTimer takes integer agentKey,integer whichKey returns timer
    return LoadTimerHandle(ArrayAgent_hashTable, agentKey, whichKey)
endfunction

//Other
function AgentLoadInteger takes integer agentKey,integer whichKey returns integer
    return LoadInteger(ArrayAgent_hashTable, agentKey, whichKey)
endfunction

function AgentLoadReal takes integer agentKey,integer whichKey returns real
    return LoadReal(ArrayAgent_hashTable, agentKey, whichKey)
endfunction

function AgentLoadBoolean takes integer agentKey,integer whichKey returns boolean
    return LoadBoolean(ArrayAgent_hashTable, agentKey, whichKey)
endfunction

function AgentLoadStr takes integer agentKey,integer whichKey returns string
    return LoadStr(ArrayAgent_hashTable, agentKey, whichKey)
endfunction

//===========================================================================
// Flush
function AgentFlush takes integer agentKey returns nothing
    call FlushChildHashtable(ArrayAgent_hashTable, agentKey)
endfunction

//===========================================================================
// End of Agent Key system
//===========================================================================

//library ArrayAgent ends
//library Base36:
constant function LoadAlphabet takes nothing returns string

return "0123456789abcdefghijklmnopqrstuvwxyz"

endfunction

function LoadD2H takes integer int returns string
    return SubString(("0123456789abcdefghijklmnopqrstuvwxyz"), int, int + 1) // INLINED!!
endfunction

function LoadH2D takes string char returns integer
    local integer i= 0
    
    loop
    exitwhen SubString(("0123456789abcdefghijklmnopqrstuvwxyz"), i, i + 1) == char // INLINED!!
        set i=i + 1
    endloop
    
    return i
endfunction

//library Base36 ends
//library CircleObjectSystem:
//Circle Object System v.1.1.0
//Paste this script into your map's header
function GetGCOSDefAngle takes integer instance returns real
    return LoadReal(udg_GCOS_Hashtable, instance, 0)
endfunction

function GetGCOSCurAngle takes integer instance returns real
    return LoadReal(udg_GCOS_Hashtable, - instance, 0)
endfunction

function GetGCOSCenterX takes integer instance returns real
    return LoadReal(udg_GCOS_Hashtable, instance, 1)
endfunction

function GetGCOSCenterY takes integer instance returns real
    return LoadReal(udg_GCOS_Hashtable, instance, 2)
endfunction

function GetGCOSRadiusX takes integer instance returns real
    return LoadReal(udg_GCOS_Hashtable, instance, 3)
endfunction

function GetGCOSRadiusY takes integer instance returns real
    return LoadReal(udg_GCOS_Hashtable, instance, 4)
endfunction

function GetGCOSNoPoints takes integer instance returns integer
    return LoadInteger(udg_GCOS_Hashtable, instance, 5)
endfunction

function GetGCOSTilt takes integer instance returns real
    return LoadReal(udg_GCOS_Hashtable, instance, 6)
endfunction

function GetGCOSSpin takes integer instance returns real
    return LoadReal(udg_GCOS_Hashtable, instance, 7)
endfunction

function SetGCOSDefAngle takes integer instance,real angle returns nothing
    call SaveReal(udg_GCOS_Hashtable, instance, 0, angle)
endfunction

function SetGCOSCurAngle takes integer instance,real angle returns nothing
    call SaveReal(udg_GCOS_Hashtable, - instance, 0, angle)
endfunction

function SetGCOSCenterX takes integer instance,real X returns nothing
    call SaveReal(udg_GCOS_Hashtable, instance, 1, X)
endfunction

function SetGCOSCenterY takes integer instance,real Y returns nothing
    call SaveReal(udg_GCOS_Hashtable, instance, 2, Y)
endfunction

function SetGCOSRadiusX takes integer instance,real X returns nothing
    call SaveReal(udg_GCOS_Hashtable, instance, 3, X)
endfunction

function SetGCOSRadiusY takes integer instance,real Y returns nothing
    call SaveReal(udg_GCOS_Hashtable, instance, 4, Y)
endfunction

function SetGCOSNoPoints takes integer instance,integer number returns nothing
    call SaveInteger(udg_GCOS_Hashtable, instance, 5, number)
endfunction

function SetGCOSTilt takes integer instance,real angle returns nothing
    call SaveReal(udg_GCOS_Hashtable, instance, 6, angle)
endfunction

function SetGCOSSpin takes integer instance,real angle returns nothing
    call SaveReal(udg_GCOS_Hashtable, instance, 7, angle)
endfunction

function GetGCOSPointX takes integer instance,integer pointNumber returns real
    return LoadReal(udg_GCOS_Hashtable, - instance, pointNumber)
endfunction

function GetGCOSPointY takes integer instance,integer pointNumber returns real
    return LoadReal(udg_GCOS_Hashtable, - instance, - pointNumber)
endfunction

function SetGCOSUnit takes integer instance,integer pointNumber,unit u returns nothing
    call SaveUnitHandle(udg_GCOS_Hashtable, instance, 100 + pointNumber, u)
endfunction

function GetGCOSUnit takes integer instance,integer pointNumber returns unit
    return LoadUnitHandle(udg_GCOS_Hashtable, instance, 100 + pointNumber)
endfunction

function CreateGCOS takes real angle,real centerX,real centerY,real radiusX,real radiusY,integer numPoints,real tilt,real spin returns integer
    local integer instance
    local integer count= 1
    local real step= 2 * bj_PI / I2R(numPoints)

//a = radius x, b = radius y, h = center x, k = center y, R = rotation(tilt)
//x = h + acos(2pi*t)cos(R) - bsin(2pi*t)sin(R)
//y = k + acos(2pi*t)sin(R) + bsin(2pi*t)cos(R)
//https://math.stackexchange.com/questions/941490/whats-the-parametric-equation-for-the-general-form-of-an-ellipse-rotated-by-any

//This code generates an instance number for the circle object
    set instance=udg_GCOS_InstanceArray[0]
    if udg_GCOS_InstanceArray[udg_GCOS_InstanceArray[0]] == 0 then
        set udg_GCOS_InstanceArray[0]=udg_GCOS_InstanceArray[0] + 1
    else
        set udg_GCOS_InstanceArray[0]=udg_GCOS_InstanceArray[udg_GCOS_InstanceArray[0]]
        set udg_GCOS_InstanceArray[instance]=0
    endif
    
    call SaveReal(udg_GCOS_Hashtable, instance, 0, angle)
    call SaveReal(udg_GCOS_Hashtable, - instance, 0, angle)
    call SaveReal(udg_GCOS_Hashtable, instance, 1, centerX)
    call SaveReal(udg_GCOS_Hashtable, instance, 2, centerY)
    call SaveReal(udg_GCOS_Hashtable, instance, 3, radiusX)
    call SaveReal(udg_GCOS_Hashtable, instance, 4, radiusY)
    call SaveInteger(udg_GCOS_Hashtable, instance, 5, numPoints)
    call SaveReal(udg_GCOS_Hashtable, instance, 6, tilt)
    call SaveReal(udg_GCOS_Hashtable, instance, 7, spin)
//End of instance number generation

    loop
    exitwhen count > numPoints
        call SaveReal(udg_GCOS_Hashtable, - instance, count, centerX + radiusX * Cos(angle) * Cos(tilt) - radiusY * Sin(angle) * Sin(tilt))
        call SaveReal(udg_GCOS_Hashtable, - instance, - count, centerY + radiusX * Cos(angle) * Sin(tilt) + radiusY * Sin(angle) * Cos(tilt))
        set angle=angle + step
        set count=count + 1
    endloop
    return instance
endfunction

function DestroyGCOS takes integer instance returns nothing
    call FlushChildHashtable(udg_GCOS_Hashtable, instance)
    call FlushChildHashtable(udg_GCOS_Hashtable, - instance)
    set udg_GCOS_InstanceArray[instance]=udg_GCOS_InstanceArray[0]
    set udg_GCOS_InstanceArray[0]=instance
endfunction

function UpdateGCOS takes integer instance returns nothing
    local integer numPoints= LoadInteger(udg_GCOS_Hashtable, instance, 5)
    local integer count= 1

    local real centerX= LoadReal(udg_GCOS_Hashtable, instance, 1)
    local real centerY= LoadReal(udg_GCOS_Hashtable, instance, 2)
    local real radiusX= LoadReal(udg_GCOS_Hashtable, instance, 3)
    local real radiusY= LoadReal(udg_GCOS_Hashtable, instance, 4)
    local real tilt= LoadReal(udg_GCOS_Hashtable, instance, 6)
    local real angle= LoadReal(udg_GCOS_Hashtable, - instance, 0)
    
    local real step= 2 * bj_PI / I2R(numPoints)
    
    set angle=angle + LoadReal(udg_GCOS_Hashtable, instance, 7) //The real being added is the rotation/spin step
    call SaveReal(udg_GCOS_Hashtable, - instance, 0, angle)

    loop
    exitwhen count > numPoints
        set angle=angle + step
        call SaveReal(udg_GCOS_Hashtable, - instance, count, centerX + radiusX * Cos(angle) * Cos(tilt) - radiusY * Sin(angle) * Sin(tilt))
        call SaveReal(udg_GCOS_Hashtable, - instance, - count, centerY + radiusX * Cos(angle) * Sin(tilt) + radiusY * Sin(angle) * Cos(tilt))
        call SetUnitPosition(LoadUnitHandle(udg_GCOS_Hashtable, instance, 100 + count), LoadReal(udg_GCOS_Hashtable, - instance, count), LoadReal(udg_GCOS_Hashtable, - instance, - count))
        set count=count + 1
    endloop
endfunction

//library CircleObjectSystem ends
//library CombatTag:

// scope CombatTag_PHYSICAL begins
// scope CombatTag_PHYSICAL ends
// scope CombatTag_SPELL begins
// scope CombatTag_SPELL ends
// scope CombatTag_HEAL begins
// scope CombatTag_HEAL ends


function CombatTag__ShowText takes nothing returns nothing
    local timer t= GetExpiredTimer()
    local integer tId= GetHandleId(t)
    local unit u= (LoadUnitHandle(Table___ht, (((CombatTag__timerData))), (tId))) // INLINED!!
    local integer uId= GetUnitUserData(u)
    
    local real z_offset= 50
    
    if (LoadReal(Table___ht, (((CombatTag_PHYS_DAMAGE))), (uId))) > 0. then // INLINED!!
        call CreateTextTagUnitBJ(I2S(R2I((LoadReal(Table___ht, (((CombatTag_PHYS_DAMAGE))), (uId))))), u, z_offset, 13.00, CombatTag_PHYSICAL_RED, CombatTag_PHYSICAL_GREEN, CombatTag_PHYSICAL_BLUE, 0) // INLINED!!
        call SetTextTagVelocityBJ(bj_lastCreatedTextTag, 75.00, 90.00)
        call SetTextTagPermanent(bj_lastCreatedTextTag, false)
        call SetTextTagLifespan(bj_lastCreatedTextTag, 3.50)
        call SetTextTagFadepoint(bj_lastCreatedTextTag, 1.40)
        set z_offset=z_offset + 50.0
        call SaveReal(Table___ht, (((CombatTag_PHYS_DAMAGE))), (uId), (( 0.)*1.0)) // INLINED!!
    endif
    if (LoadReal(Table___ht, (((CombatTag_SPELL_DAMAGE))), (uId))) > 0. then // INLINED!!
        call CreateTextTagUnitBJ(I2S(R2I((LoadReal(Table___ht, (((CombatTag_SPELL_DAMAGE))), (uId))))), u, z_offset, 13.00, CombatTag_SPELL_RED, CombatTag_SPELL_GREEN, CombatTag_SPELL_BLUE, 0) // INLINED!!
        call SetTextTagVelocityBJ(bj_lastCreatedTextTag, 75.00, 90.00)
        call SetTextTagPermanent(bj_lastCreatedTextTag, false)
        call SetTextTagLifespan(bj_lastCreatedTextTag, 3.50)
        call SetTextTagFadepoint(bj_lastCreatedTextTag, 1.40)
        set z_offset=z_offset + 50.0
        call SaveReal(Table___ht, (((CombatTag_SPELL_DAMAGE))), (uId), (( 0.)*1.0)) // INLINED!!
    endif
    
    call PauseTimer(t)
    call DestroyTimer(t)
    call RemoveSavedHandle(Table___ht, (((CombatTag__timerData))), (tId)) // INLINED!!
    set t=null
    set u=null
endfunction

function CombatTag_Register takes unit whichUnit,real value,integer whichType returns nothing
    local integer uId= GetUnitUserData(whichUnit)
    local real amount= (LoadReal(Table___ht, (((whichType))), (uId))) // INLINED!!
    local timer t
    
    if value <= 0. then
        return
    endif
    
    if amount <= 0. then
        set t=CreateTimer()
        call TimerStart(t, 0, false, function CombatTag__ShowText)
        call SaveUnitHandle(Table___ht, (((CombatTag__timerData))), (GetHandleId(t)), ( whichUnit)) // INLINED!!
        set t=null
    endif
        
    call SaveReal(Table___ht, (((whichType))), (uId), (( amount + value)*1.0)) // INLINED!!
endfunction

function CombatTag__onInit takes nothing returns nothing
    set CombatTag_PHYS_DAMAGE=sc__Table_create()
    set CombatTag_SPELL_DAMAGE=sc__Table_create()
    set CombatTag_HEALING=sc__Table_create()
    
    set CombatTag__timerData=sc__Table_create()
endfunction


//library CombatTag ends
//library CustomStatSystem:
//////////////////////////////////////////////////////
//CUSTOM STAT SYSTEM
//////////////////////////////////////////////////////

// SimError by Vexorian at wc3c.net

// Sim Error (modified)

function CSS_SimError takes string s returns nothing
    local string msg= "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n|cffffcc00" + s + "|r"
    local player ForPlayer= GetTriggerPlayer()
    local sound error= CreateSoundFromLabel("InterfaceError", false, false, false, 10, 10)

    if GetLocalPlayer() == ForPlayer then
        call ClearTextMessages()
        call DisplayTimedTextToPlayer(ForPlayer, 0.52, 0.96, 2.00, msg)
        call StartSound(error)
    endif

    set ForPlayer=null
endfunction

function CSS_SimNotification takes string s returns nothing
    local string msg= "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n|cff32cd32" + s + "|r"
    local player ForPlayer= GetTriggerPlayer()
    local sound notify= CreateSoundFromLabel("ItemReward", false, false, false, 10, 10)

    if GetLocalPlayer() == ForPlayer then
        call ClearTextMessages()
        call DisplayTimedTextToPlayer(ForPlayer, 0.52, 0.96, 2.00, msg)
        call StartSound(notify)
    endif

    set ForPlayer=null
endfunction

// Bound Int by Magtheridon96 at hiveworkshop.com

// BoundInt

function BoundInt takes integer i,integer min,integer max returns integer
    return IMaxBJ(IMinBJ(i, max), min)
endfunction

// Bonus Handling Code

function CSS_AddBonus takes unit u,integer amount,integer bonusType returns nothing
    local integer max= udg_CSS_Power[17]
    local integer min= - udg_CSS_Power[17]
    local integer i= 16
    local integer j= LoadInteger(udg_CSS_Hashtable, GetHandleId(u), bonusType)

    if amount > max - 1 or amount < min then
        call CSS_SimError("Value too high or too low")
        return
    endif

    if amount + j >= max or amount + j <= min then
        call CSS_SimError("Current value at maximum or minimum")
        return
    endif

//IF NEEDED, BELOW IS FIX FOR DECORATIONS
//    if GetUnitAbilityLevel(u, 'A0C6') > 0 then
//        call CSS_SimError ("Target Unit is a Decoration")
//        return
//    endif

    set amount=amount + j
    call BoundInt(amount , min , max - 1)

    if bonusType < 0 or bonusType > 10 then
        call CSS_SimError("CSS Error: Invalid bonus type (" + I2S(bonusType) + ")")
        return
    elseif bonusType == 8 or bonusType == 9 then

        if bonusType == 8 and amount * 1. + GetUnitState(u, UNIT_STATE_MAX_LIFE) <= 0 then
            call CSS_SimError("Unit's current max life is lower than the negative bonus amount. Unable to subtract.")
            return
        elseif bonusType == 9 and amount * 1. + GetUnitState(u, UNIT_STATE_MAX_MANA) <= 0 then
            call CSS_SimError("Unit's current max mana is lower than the negative bonus amount. Unable to subtract.")
            return
        endif

        call SaveInteger(udg_CSS_Hashtable, GetHandleId(u), bonusType, amount)

        if amount < 0 then
            set amount=max + amount
        else
            call UnitRemoveAbility(u, udg_CSS_Abilities[( bonusType + 1 ) * 18 - 1])
        endif

        loop
            if amount >= udg_CSS_Power[i] then
                call UnitAddAbility(u, udg_CSS_Abilities[bonusType * 18 + i])
                call UnitMakeAbilityPermanent(u, true, udg_CSS_Abilities[bonusType * 18 + i])
                set amount=amount - udg_CSS_Power[i]
            else
                call UnitRemoveAbility(u, udg_CSS_Abilities[bonusType * 18 + i])
            endif
        
            set i=i - 1
            exitwhen i < 0
        endloop

        if LoadInteger(udg_CSS_Hashtable, GetHandleId(u), bonusType) < 0 then
            call UnitAddAbility(u, udg_CSS_Abilities[( bonusType + 1 ) * 18 - 1])
            call UnitMakeAbilityPermanent(u, true, udg_CSS_Abilities[( bonusType + 1 ) * 18 - 1])
        endif

    else

        call SaveInteger(udg_CSS_Hashtable, GetHandleId(u), bonusType, amount)

        if amount < 0 then
            set amount=max + amount
            call UnitAddAbility(u, udg_CSS_Abilities[( bonusType + 1 ) * 18 - 1])
            call UnitMakeAbilityPermanent(u, true, udg_CSS_Abilities[( bonusType + 1 ) * 18 - 1])
        else
            call UnitRemoveAbility(u, udg_CSS_Abilities[( bonusType + 1 ) * 18 - 1])
        endif

        loop
            if amount >= udg_CSS_Power[i] then
                call UnitAddAbility(u, udg_CSS_Abilities[bonusType * 18 + i])
                call UnitMakeAbilityPermanent(u, true, udg_CSS_Abilities[bonusType * 18 + i])
                set amount=amount - udg_CSS_Power[i]
            else
                call UnitRemoveAbility(u, udg_CSS_Abilities[bonusType * 18 + i])
            endif
        
            set i=i - 1
            exitwhen i < 0
        endloop

    endif
endfunction

// Clear bonus

function CSS_ClearBonus takes unit u,integer bonusType returns nothing

    if bonusType > 10 or bonusType < 0 or GetUnitTypeId(u) == 0 or IsUnitType(u, UNIT_TYPE_DEAD) then
        return
    endif

    call CSS_AddBonus(u , - LoadInteger(udg_CSS_Hashtable, GetHandleId(u), bonusType) , bonusType)
endfunction

// Get current bonus

function CSS_GetBonus takes unit u,integer bonusType returns integer

    if bonusType > 10 or bonusType < 0 or GetUnitTypeId(u) == 0 or IsUnitType(u, UNIT_TYPE_DEAD) then
        return 0
    endif

    return LoadInteger(udg_CSS_Hashtable, GetHandleId(u), bonusType)
endfunction

//library CustomStatSystem ends
//library CutToComma:
//////////////////////////////////////////////////////
//CutToComma Library By Guhun v1.2
//////////////////////////////////////////////////////

function StringFind takes string str,string find returns integer
    local string currentStr= null
    local integer looping= 0
    local integer findLength= StringLength(find)
    local integer maxIndex= StringLength(str) - findLength
    loop
    exitwhen currentStr == find or looping > maxIndex
        set currentStr=SubString(str, looping, looping + findLength)
        set looping=looping + 1
    endloop
    return looping
endfunction

//// Splits a string using the given splitter and returns a GIOL list with each substring
//function StringSplit takes string whichString, string splitter returns integer
//    local integer index
//    local integer start = 0
//    local integer len = StringLength(whichString)
//    
//    local integer list = GIOL_CreateList()
//    
//    loop
//        set index = StringFind(whichString, splitter)
//        GIOL_Append(list, SubString(whichString, start, index))
//    exitwhen index == len
//        set start = index+1
//    endloop
//    
//    return list
//endfunction
function CutToComma takes string str returns integer
    local string comma
    local integer looping= 0
    local integer strLength= StringLength(str)
    set comma=SubString(str, looping, looping + 1)
    loop
        exitwhen comma == "," or looping == strLength
        set looping=looping + 1
        set comma=SubString(str, looping, looping + 1)
    endloop
    return looping
endfunction

function CutToCharacter takes string str,string splitter returns integer
    local string comma
    local integer looping= 0
    local integer strLength= StringLength(str)
    set comma=SubString(str, looping, looping + 1)
    loop
        exitwhen comma == splitter or looping == strLength
        set looping=looping + 1
        set comma=SubString(str, looping, looping + 1)
    endloop
    return looping
endfunction

function CutToCommaResult takes string str,integer cutToComma returns string
    return SubString(str, 0, cutToComma)
endfunction

function CutToCommaShorten takes string str,integer cutToComma returns string
    return SubString(str, cutToComma + 1, StringLength(str) + 1)
endfunction

//library CutToComma ends
//library DecoBuilderCount:
function DecoBuilderReduceCountEx takes integer playerNumber,integer unitType returns nothing
    local integer decoCount= LoadInteger(udg_Hashtable_2, playerNumber, unitType)
    if decoCount > 0 then
        call SaveInteger(udg_Hashtable_2, playerNumber, unitType, decoCount - 1)
    endif
endfunction

function DecoBuilderReduceCount takes unit whichUnit returns nothing
    call DecoBuilderReduceCountEx(GetPlayerId(GetOwningPlayer(whichUnit)) + 1 , GetUnitTypeId(whichUnit))
endfunction

function IsUnitDecoBuilderEx takes integer ownerNumber,integer unitType returns boolean
    return LoadInteger(udg_Hashtable_2, ownerNumber, unitType) > 0
endfunction

function IsUnitDecoBuilder takes unit whichUnit returns boolean
    return (LoadInteger(udg_Hashtable_2, (GetPlayerId(GetOwningPlayer(whichUnit)) + 1 ), ( GetUnitTypeId(whichUnit))) > 0) // INLINED!!
endfunction

//library DecoBuilderCount ends
//library DestructableLib:
//* ============================================================================ *
//* Made by PitzerMike                                                           *
//*                                                                              *
//* I made this to detect if a destructable is a tree or not. It works not only  *
//* for the standard trees but also for custom destructables created with the    *
//* object editor. It uses a footie as a dummy with the goul's harvest ability.  *
//* The dummy ids can be changed though. I also added the IsDestructableDead     *
//* function for completeness.                                                   *
//* ============================================================================ *


function IsDestructableDead takes destructable dest returns boolean
    return GetDestructableLife(dest) <= 0.405
endfunction

function IsDestructableTree takes destructable dest returns boolean
    local boolean result= false
    if ( dest != null ) then
        call PauseUnit(DestructableLib___dummy, false)
        set result=IssueTargetOrder(DestructableLib___dummy, "harvest", dest)
        call PauseUnit(DestructableLib___dummy, true) // stops order
    endif
    return result
endfunction

function DestructableLib___Initialization takes nothing returns nothing
    set DestructableLib___dummy=CreateUnit(DestructableLib___OWNING_PLAYER, DestructableLib___DUMMY_UNIT_ID, 0.0, 0.0, 0.0)
    call ShowUnit(DestructableLib___dummy, false) // cannot enumerate
    call UnitAddAbility(DestructableLib___dummy, DestructableLib___HARVEST_ID)
    call UnitAddAbility(DestructableLib___dummy, 'Aloc') // unselectable, invulnerable
    call PauseUnit(DestructableLib___dummy, true)
endfunction

//library DestructableLib ends
//library GMUI:
////////////////////////////////////////////////////////////////////////////////////////////////////


// Textmacros

// Sets the variable "var_name" to a new index of the specified recycle key. "var_name" must be a variable or array index (array[i]). 

// Recycles the value of variable "var_name" in the specified recycle key. Does not alter "var_name".


// Functions

//This function generates an instance number for a RecycleKey (using textmacro GMUI_GetIndex)
function GMUI_GetIndex takes integer recycleKey returns integer
    local integer instance
    
//textmacro instance: GMUI_GetIndex("instance","recycleKey")
    set instance=LoadInteger(GMUI_hashTable, recycleKey, 0)

    if not HaveSavedInteger(GMUI_hashTable, recycleKey, instance) then
        if instance == 0 then // This small line guarantees that intializing a RECYCLE_KEY is not needed.
            set instance=1
        endif
        call SaveInteger(GMUI_hashTable, recycleKey, 0, instance + 1)
    else
        call SaveInteger(GMUI_hashTable, recycleKey, 0, LoadInteger(GMUI_hashTable, recycleKey, instance))
        call RemoveSavedInteger(GMUI_hashTable, recycleKey, instance)
    endif
//end of: GMUI_GetIndex("instance","recycleKey")
    return instance
endfunction


//This function recycles an instance number for a RecycleKey (using textmacro GMUI_RecycleIndex)
function GMUI_RecycleIndex takes integer recycleKey,integer instance returns nothing
//textmacro instance: GMUI_RecycleIndex("instance","recycleKey")
    call SaveInteger(GMUI_hashTable, recycleKey, instance, LoadInteger(GMUI_hashTable, recycleKey, 0))
    call SaveInteger(GMUI_hashTable, recycleKey, 0, instance)
//end of: GMUI_RecycleIndex("instance","recycleKey")
endfunction

// Modules

// To implement these modules, the struct must have a method with the following declaration:

// The RECYCLE_KEY() method must return a global 'key' variable, which is the recycle key which will be
// used when allocating new struct instances.


// Implement this module in the body of a struct to generate allocate() and deallocate() methods. 




// Inlined allocators
//
// For those who need SPEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEED
//
// These modules are not implemented on the body of a struct, but inside the create() and destroy() methods.
//
//
// module GMUI_allocate_this => runs the GMUI_Get_Index textmacro with args: "this" and "thistype.RECYCKE_KEY()"
// module GMUI_deallocate_this => runs the GMUI_Recycle_Index textmacro with args: "this" and "thistype.RECYCKE_KEY()"
//


//

// When creating a new Recycle Key, you must call this function.
function GMUI_InitializeRecycleKey takes integer newKey returns nothing
        call SaveInteger(GMUI_hashTable, newKey, 0, 1)
endfunction

// ==================
// GUI Recycle Key Generation
// ==================



// Textmacro that allows GUI users to more easily create constant Recycle Keys.
// ==================

////////////////////////////////////////////////////////////////////////////////////////////////////
//End of MUI Engine

//library GMUI ends
//library GroupTools:
   
   




   
    function GroupTools___AE takes nothing returns nothing
        if ( GroupTools___f ) then
            call GroupClear(GroupTools___gT)
            set GroupTools___f=false
        endif
        call GroupAddUnit(GroupTools___gT, GetEnumUnit())
    endfunction
   
    function GroupRefresh takes group g returns nothing
        set GroupTools___f=true
        set GroupTools___gT=g
        call ForGroup(GroupTools___gT, function GroupTools___AE)
        if ( GroupTools___f ) then
            call GroupClear(g)
        endif
    endfunction
   
    function NewGroup takes nothing returns group
        if 0 == GroupTools___gN then
            return CreateGroup()
        endif
        set GroupTools___gN=GroupTools___gN - 1
        return GroupTools___groups[GroupTools___gN]
    endfunction
   
    function ReleaseGroup takes group g returns nothing
        call GroupClear(g)
        set GroupTools___groups[GroupTools___gN]=g
        set GroupTools___gN=GroupTools___gN + 1
    endfunction
   
    function GroupUnitsInArea takes group whichGroup,real x,real y,real radius returns nothing
        local unit u
        call GroupEnumUnitsInRange(ENUM_GROUP, x, y, radius + GroupTools___MAX_COLLISION_SIZE, null)
        loop
            set u=FirstOfGroup(ENUM_GROUP)
            exitwhen null == u
            if IsUnitInRangeXY(u, x, y, radius) then
                call GroupAddUnit(whichGroup, u)
            endif
            call GroupRemoveUnit(ENUM_GROUP, u)
        endloop
    endfunction
   

//library GroupTools ends
//library Iterator:
        
        function s__Iterator_asInteger takes integer this returns integer
            return this
        endfunction
        

//library Iterator ends
//library LoPDebug:
function Debug_PrintIf takes boolean condition,string message returns nothing
    if condition then
        call BJDebugMsg(message)
    endif
endfunction

//library LoPDebug ends
//library LoPInitQuests:

// This function is called in Init 0 seconds
function InitQuests takes nothing returns nothing
    local string quest_text
    local integer questType= bj_QUESTTYPE_REQ_DISCOVERED
    
    // ====================
    // Commands
    // ====================
    
    // Player Colors
    set quest_text="\n|c00ff0303red = 1|r\n|c000042ffblue = 2|r\n|c001ce6b9teal = 3|r\n|c00540081purple = 4|r\n|c00fffc01yellow = 5|r\n|c00ff8000orange, oj = 6|r\n|c0020c000green = 7|r\n|c00e55bb0pink = 8|r\n|c00959697gray, grey = 9|r\n|c007ebff1light blue, lightblue, lb = 10|r\n|c00106246dark green,darkgreen, dg = 11|r\n|c004e2a04brown = 12|r\n|c009b0000maroon = 13|r\n|c000000c3navy = 14|r\n|c0000eaffturquoise, tq = 15|r\n|c00be00feviolet = 16|r\n|c00ebcd87wheat = 17|r\n|c00f8a48bpeach = 18|r\n|c00bfff80mint = 19|r\n|c00dcb9eblavender = 20|r\n|c00282828coal = 21|r\n|c00ebf0ffsnow = 22|r\n|c0000781eemerald = 23|r\n|c00a46f33peanut = 24|r\nhostile = 25\npassive, neutral = 28\n"
    call CreateQuestBJ(questType, "Player Numbers & Colors", quest_text, "ReplaceableTextures\\CommandButtons\\BTNScrollOfRegenerationGreen.blp")
    // ----------
    
    // Unit Commands
    set quest_text="\n|cffff0000Unit Commands:|r\n|cffffff00-copy|r\nCopies your selection of units or the group of a selected Rect Generator.\n|cffffff00-neut|r <decos> | |cffffff00-take|r <all>\nGives your selected units to Neutral Passive, only working on decorations if decos is specified. Takes selected unit back from Neutral Passive. Typing all next to the command will take all your units.\n|cffffff00-select no|r\nMakes selected units unselectable.\n|cffffff00-sele (deco name)|r | |cffffff00-seln (deco name)|r\nAdds deco builders whose name starts with the entered characters to your selection. |cffffff00-seln|r clears your old selection.\n|cff0000ffExamples: -sele wall, -sele sp, -sele pand, -sele gen|r\n|cffffff00-remove|r\n|cffffff00-kill|r\n|cffffff00-hide|r <all>\nHides selected/all deco builders. Use |cffffff00-sele|r to get them back.\n"
    call CreateQuestBJ(questType, "Unit Commands", quest_text, "ReplaceableTextures\\CommandButtons\\BTNScrollOfRegenerationGreen.blp")
    // ----------
    
    // Unit Modification Commands
    set quest_text="\n|cffff0000Unit Modification Commands:|r\n|cffffff00-tag (tag name |ex: first, second, alternate, defend)|r\nRemoves old animation tag and adds new animation tag to a unit.\n|cffffff00-color (number)|r\nSet the color for the 'color command.\n|cffffff00-size (number)|r\nSet the size for the 'size command.\n|cffffff00-rgb (red green blue transparency)|r\nSet the colors for the 'rgb command.\n|cffffff00-anim (animation name)|r\nSet the animation for the 'anim command.\n|cffffff00-speed (number)|r\nSet the animation speed for the 'speed command.\n|cffffff00-fly (number)|r\nSet the flying height for the 'fly command.\n\n|cffffff00'fly|r | |cffffff00'rgb|r | |cffffff00'face|r | |cffffff00'size|r | |cffffff00'color|r | |cffffff00'anim|r\nUse the commands above to apply unit modifications. Alternatively, you can use Deco Modifier Special's (use the command |cffffcc00-seln sp|r to select it) abilities.\n"
    call CreateQuestBJ(questType, "Unit Modification Commands", quest_text, "ReplaceableTextures\\CommandButtons\\BTNScrollOfRegenerationGreen.blp")
    // ----------
    
    // Alliance Commands
    set quest_text="\n|cffff0000Alliance Commands:|r (Color names are case-insensitive for all commands. You can use a player number instead.)\n|cffffff00-ally|r 'color'\n|cffffff00-unally|r 'color'\n\n|cffff0000Player Commands:|r\n|cffffff00-deleteme|r\nRemoves all your units that are not in the Titan Palace from the game, except your neutral units.\n|cffffff00-start|r\nGives you a Wandering Soul to make a Race Selector.\n|cffffff00-decos|r\nSpawns any decos you may be missing (hidden decos are not considered missing).\n"
    call CreateQuestBJ(questType, "Player Commands", quest_text, "ReplaceableTextures\\CommandButtons\\BTNScrollOfRegenerationGreen.blp")
    // ----------
    
    // Deco Special Commands
    set quest_text="\n|cffff0000Deco Special Commands:|r\nThese commands work with the modifications abilities of \"Deco Modifier Special\". You can select this unit with the command: (|cffffcc00-seln sp|r)\n|cffffff00-val (number)|r\nSet the size of the area of terrain and tree mods.\n|cffffff00-space (number)|r\nSet the space between each created tree.\n"
    call CreateQuestBJ(questType, "Deco Special Commands", quest_text, "ReplaceableTextures\\CommandButtons\\BTNScrollOfRegenerationGreen.blp")
    // ----------
    
    // Autoname
    set quest_text="\nAutoname allows you to automatically set your player name as the name of the last unit you selected. Only units with custom user-defined names will be detected by the autoname system. Use the |cffffff00-nameunit|r command to give a unit a custom name.\n\nCommands:\n|cffffff00-autoname|r\nToggles autoname on or off.\n"
    call CreateQuestBJ(questType, "Autoname", quest_text, "ReplaceableTextures\\CommandButtons\\BTNScrollOfRegenerationGreen.blp")
    // ----------
    
    // SaveNLoad Commands
    set quest_text="\n|cffff0000ATTENTION:|r You can save your bases easily with the commands. However, to load a base, an external program is required. More information below.\n\nTo get the SaveNLoad program, search for 'SaveNLoad GitHub Son-Guhun'.\nAlternatively, you can search for: Titan Land Lands of Plenty on Google.\nIf you have the patience, you can also type this link in your browser:\nhttps://www.hiveworkshop.com/threads/titan-land-lands-of-plenty.289356/\n\nCommands:\n-load center\nSet the center for future save/loads\n-save (SaveName)\nSave all your units (including unselectable and neutral units)\n-dsav (SaveName)\nSave all trees inside the region of your currently selected Rect Generator. (|cffffcc00-rect|r to spawn and |cffffcc00-seln gen|r to select)\n-tsav (SaveName)\nSave terrain inside the region of your currently selected Rect Generator. (|cffffcc00-rect|r to spawn and |cffffcc00-seln gen|r to select)\n-request (SaveName)\nSend a request to the SaveNLoad program (it must be open) to load a save.\n"
    call CreateQuestBJ(questType, "SaveNLoad System", quest_text, "ReplaceableTextures\\CommandButtons\\BTNSpellBookBLS.blp")
    // ----------
    
    // Patrol System Commands
    set quest_text="\nGPS, for short, this system modifies the patrol ability, allowing you to have multiple patrol check points. To set a new checkpoint, simply use the patrol ability again (no shift-click).\n\nCommands:\n|cffffff00-patrol clear|r -> Clears all checkpoints for a unit\n|cffffff00-patrol resume|r -> Resumes patrolling for a unit\n\n|cff0000ffNote:|r The patrol system does not function when you order multiple units to patrol at once!\n|cff0000ffSave System:|r The patrol points of are unit are saved when you save your base!\n"
    call CreateQuestBJ(questType, "Guhun's Patrol System", quest_text, "ReplaceableTextures\\CommandButtons\\BTNBoots.blp")
    // ----------
    
    // Titan Commands
    set quest_text="\n|cffffff00-mind|r <number>\nWill set the target player for Power: Mind. If you write just \"-mind\", it will flag changing ownership of all units on/off.\n|cffffff00'mind|r\nUse this command to change ownership of units you have selected without having to select the Power: Mind unit.\n|cffffff00-kick|r (color)\nThe Titan Player can kick people that make the game suck.\n|cff0000ffThe color must contain no capitals|r\n\n|cffffff00-load limit|r (number)\nSets the limit of how many terrain areas, units or doodads can be loaded at a time.\n|cff0000ffMaximum: 9999|r\n\n|cffffff00-limit|r (p|a|g) (number)\nLimits how many units players can have. <p> is for passive units (no attack), <a> is for air and <g> for ground.\n|cff0000ffDefaults: 150p | 24a | 150g|r\n"
    call CreateQuestBJ(questType, "Titan Commands", quest_text, "ReplaceableTextures\\CommandButtons\\BTNScrollOfRegenerationGreen.blp")
    // ----------
    
    // ====================
    // Credits & Information
    // ====================
    set questType=bj_QUESTTYPE_OPT_DISCOVERED
    
    // Titan Land Creators
    set quest_text="\n-MetalWarrior (Original Creator)\n-Vhalyr and Loganrules (Improved RPE)\n-Dhaniels (The Beginning of the End)\n-King_Katanova (RoK, FoK, KoT)\n-GHH (RoK and RoD)\n-THE_DEATH (KoT)\n\"If I have seen further, it is by standing on the shoulders of giants.\"\n-Isaac Newton\n"
    call CreateQuestBJ(questType, "|cffff0000TL Creators|r", quest_text, "ReplaceableTextures\\CommandButtons\\BTNReincarnation.blp")
    // ----------
    
    // Model Credits
    set quest_text="\n|cff00b300The Hive Workshop:|r\nKwaliti, Lord_T, Deolrin, Chilla_killa, Sellenisko, Hellish Hybrid, A Void, Uncle Fester, MassiveMaster, HerrDave, Olofmoleman, Sliph-M, darkdeathknight, evigeorge1617, Hayate, Tranquil, -Grendel, Stefan.K, HappyTauren, donut3.5, Cavman, HateCrew, Expresso, General Frank, YrpoTRIa , KO3bMA , Dixnos, Fingolfin, Mike, ChevronSeven, MatiS, killst4r, Tarrasque, Red XIII, FvckTP, Em!, Misha, Arak1da, Chen, Wandering Soul, kagyun, Hexus, -=Emergenzy=-, Sin'dorei300, PROXY, WebSter, darklord_avalon, eubz, Kitabatake, kellym0, Sunchips, Remixer, Su7VdeR, koondad, Mister_Haudrauf, Daenar7, SinisterX, TiJiL, icewolf055, RightField, UgoUgo, DarkHunter1357, Necromancer_187, alfredx_sotn, Black_Stan, BlinkBoy, NaserKingArthas, bisnar13, InfernalTater, Hueter, ~Nightmare, 67chrome, dickxunder, Elenai, Redsteel1, Mr Goblin, Ujimasa Hojo, Happy Tauren\n\n\n|cffff0000XGM:|r\nP4ela, Kolbosa, Wulfrein, DampirTBs, Feleer, Jack Sparrow, DiKey51, Ket"
    call CreateQuestBJ(questType, "|cff00ff00Model/Skins|r", quest_text, "ReplaceableTextures\\CommandButtons\\BTNTemp.blp")
    // ----------
    
    // Coding and Tools
    set quest_text="\nMindWorX => Sharpcraft World Editor\nMagos => Model Editor\nAlexei => Mdlvis\nGuesst => MDX squisher\nSpec => BLP Laboratory\nVexorian => Map Optimizer, vJass\nactboy, sumneko (and contributors) => w3x2lni\n\nMori => Many coding ideas. A lot of concepts in LoP (like the rect generator) where taken from YARP.\nBribe => GUI Damage Engine, GUI Unit Event, GUI Knockback, Table\nFlux => Dummy Recycler\nNestharus => World bounds, many ideas from his code have been incorporated by me (Guhun) elsewhere.\nPitzerMike => DestructableLib\nMagtheridon96 => GroupTools\nfeelerly => Id2String\nDoomlord => Custom Stat System\n"
    call CreateQuestBJ(questType, "|cff0000ffCoding & Tools|r", quest_text, "ReplaceableTextures\\CommandButtons\\BTNTemp.blp")
    // ----------
endfunction

//library LoPInitQuests ends
//library MultiPatrol:

// TODO: Still interfaces badly with the save system,  which is using a private function.

//==================================================================================================
//  ------------------------
// ||Guhun's Patrol System || v1.3.0
//  ------------------------
// This is a JASS System that allows you to define multiple patrol points for a unit, instead of the
// default limit of 2 patrol points per unit.
//
//Notes: You can't create rects when declaring global variables.
// ==========================
// =========  API  ==========
// ==========================
//
// function Patrol_ClearUnitIdData takes integer unitHandleId returns nothing
//
// function Patrol_ClearUnitData takes unit whichUnit returns nothing
//
// function Patrol_RegisterPoint takes unit trigU, real newX, real newY returns nothing
//
//==================================================================================================
// Config
//==================================================================================================
// Error codes for Patrol_AddPoint

// scope MultiPatrol_ERROR begins
// scope MultiPatrol_ERROR ends
//==================================================================================================

// Constants
constant function MultiPatrol___Patrol_MinDistance takes nothing returns real
    return 100.
endfunction

constant function MultiPatrol___Patrol_POINT_CURRENT takes nothing returns integer
    return 9996
endfunction

constant function MultiPatrol___Patrol_POINT_TOTAL takes nothing returns integer
    return 9997
endfunction

constant function MultiPatrol___Patrol_REGION takes nothing returns integer
    return 9998
endfunction

constant function MultiPatrol___Patrol_TRIGGER takes nothing returns integer
    return 9999
endfunction
//==================================================================================================

// Getters and Setters

//=====================
// Points
function Patrol_GetPointX takes integer unitHandleId,integer pointNumber returns real
    return LoadReal(MultiPatrol___data, unitHandleId, pointNumber)
endfunction

function Patrol_GetPointY takes integer unitHandleId,integer pointNumber returns real
    return LoadReal(MultiPatrol___data, unitHandleId, - pointNumber)
endfunction

function Patrol_SetPointX takes integer unitHandleId,integer pointNumber,real newX returns nothing
    call SaveReal(MultiPatrol___data, unitHandleId, pointNumber, newX)
endfunction

function Patrol_SetPointY takes integer unitHandleId,integer pointNumber,real newY returns nothing
    call SaveReal(MultiPatrol___data, unitHandleId, - pointNumber, newY)
endfunction
//=====================
// Current Point and Total Points
function Patrol_GetCurrentPatrolPoint takes integer unitHandleId returns integer
    return LoadInteger(MultiPatrol___data, - unitHandleId, (9996)) // INLINED!!
endfunction

function Patrol_GetTotalPatrolPoints takes integer unitHandleId returns integer
    return LoadInteger(MultiPatrol___data, - unitHandleId, (9997)) // INLINED!!
endfunction

function Patrol_SetCurrentPatrolPoint takes integer unitHandleId,integer pointNumber returns nothing
    call SaveInteger(MultiPatrol___data, - unitHandleId, (9996), pointNumber) // INLINED!!
endfunction

function Patrol_SetTotalPatrolPoints takes integer unitHandleId,integer newTotal returns nothing
    call SaveInteger(MultiPatrol___data, - unitHandleId, (9997), newTotal) // INLINED!!
endfunction
//=====================
// Region and Trigger
function MultiPatrol___Patrol_GetRegion takes integer unitHandleId returns region
    return LoadRegionHandle(MultiPatrol___data, - unitHandleId, (9998)) // INLINED!!
endfunction

function MultiPatrol___Patrol_GetTrigger takes integer unitHandleId returns trigger
    return LoadTriggerHandle(MultiPatrol___data, - unitHandleId, (9999)) // INLINED!!
endfunction

function MultiPatrol___Patrol_SetRegion takes integer unitHandleId,region newRegion returns nothing
    call SaveRegionHandle(MultiPatrol___data, - unitHandleId, (9998), newRegion) // INLINED!!
endfunction

function MultiPatrol___Patrol_SetTrigger takes integer unitHandleId,trigger newTrigger returns nothing
    call SaveTriggerHandle(MultiPatrol___data, - unitHandleId, (9999), newTrigger) // INLINED!!
endfunction

//=====================
// Text Tags and Special Effects for displaying patrol points
function MultiPatrol___Patrol_SetPointEffect takes integer uId,integer point,effect spEffect returns nothing
    call SaveEffectHandle(MultiPatrol___data, uId, MultiPatrol___INDEX_DISPLAY + point, spEffect)
endfunction

function MultiPatrol___Patrol_SetPointTag takes integer uId,integer point,texttag tag returns nothing
    call SaveTextTagHandle(MultiPatrol___data, uId, - MultiPatrol___INDEX_DISPLAY - point, tag)
endfunction

function MultiPatrol___Patrol_GetPointEffect takes integer uId,integer point returns effect
    return LoadEffectHandle(MultiPatrol___data, uId, MultiPatrol___INDEX_DISPLAY + point)
endfunction

function MultiPatrol___Patrol_GetPointTag takes integer uId,integer point returns texttag
    return LoadTextTagHandle(MultiPatrol___data, uId, - MultiPatrol___INDEX_DISPLAY - point)
endfunction

function MultiPatrol___Patrol_RemovePointEffect takes integer uId,integer point returns nothing
    call RemoveSavedHandle(MultiPatrol___data, uId, MultiPatrol___INDEX_DISPLAY + point)
endfunction

function MultiPatrol___Patrol_RemovePointTag takes integer uId,integer point returns nothing
    call RemoveSavedHandle(MultiPatrol___data, uId, - MultiPatrol___INDEX_DISPLAY - point)
endfunction
//==================================================================================================

// Uitilities
function MultiPatrol___Patrol_Distance takes real x,real y returns real
    return SquareRoot(Pow(x, 2) + Pow(y, 2))
endfunction

//==================================================================================================

function MultiPatrol___Patrol_PointReached takes nothing returns boolean
    local unit trigU= GetTriggerUnit()
    local integer u_handle= GetHandleId(trigU)
    local integer currentPtrl= (LoadInteger(MultiPatrol___data, - (u_handle), (9996))) // INLINED!!
    local region ptrlReg= GetTriggeringRegion()
    local real oldX
    local real oldY
    local real newX
    local real newY
    if trigU != LoadUnitHandle(MultiPatrol___data, GetHandleId(GetTriggeringTrigger()), 0) then
        set trigU=null
        set ptrlReg=null
        return false
    endif
//
    call MoveRectTo(MultiPatrol___ptrlRect, (LoadReal(MultiPatrol___data, (u_handle ), ( currentPtrl))), (LoadReal(MultiPatrol___data, (u_handle ), - ( currentPtrl)))) // INLINED!!
    call RegionClearRect(ptrlReg, MultiPatrol___ptrlRect)
//
    if currentPtrl == (LoadInteger(MultiPatrol___data, - (u_handle), (9997))) then // INLINED!!
        set currentPtrl=1
    else
        set currentPtrl=currentPtrl + 1
    endif
    
    set oldX=GetUnitX(trigU)
    set oldY=GetUnitY(trigU)
    set newX=(LoadReal(MultiPatrol___data, (u_handle ), ( currentPtrl))) // INLINED!!
    set newY=(LoadReal(MultiPatrol___data, (u_handle ), - ( currentPtrl))) // INLINED!!
            
    //TODO:System can still bug even if it's not the first point, if a unit is blocking the path
    if (SquareRoot(Pow(((newX - oldX )*1.0), 2) + Pow((( newY - oldY)*1.0), 2))) <= MultiPatrol___MINIMUM_DISTANCE then // INLINED!!
        set currentPtrl=currentPtrl + 1
    endif
    
    call SaveInteger(MultiPatrol___data, - (u_handle ), (9996), ( currentPtrl)) // INLINED!!
//
    call MoveRectTo(MultiPatrol___ptrlRect, (LoadReal(MultiPatrol___data, (u_handle ), ( currentPtrl))), (LoadReal(MultiPatrol___data, (u_handle ), - ( currentPtrl)))) // INLINED!!
    call RegionAddRect(ptrlReg, MultiPatrol___ptrlRect)
//
    set MultiPatrol___orderBool=true
    if IssuePointOrder(trigU, "patrol", (LoadReal(MultiPatrol___data, (u_handle ), ( currentPtrl))), (LoadReal(MultiPatrol___data, (u_handle ), - ( currentPtrl)))) then // INLINED!!
    else
        set MultiPatrol___orderBool=false
    endif
    
    set trigU=null
    set ptrlReg=null

    return true
endfunction
//==================================================================================================

// Guhun's Patrol Point System API

//===================

function Patrol_UnitIdHasPatrolPoints takes integer unitHandleId returns boolean
    return (LoadInteger(MultiPatrol___data, - (unitHandleId), (9996))) != 0 // INLINED!!
endfunction

function Patrol_UnitHasPatrolPoints takes unit whichUnit returns boolean
    return ((LoadInteger(MultiPatrol___data, - ((GetHandleId(whichUnit))), (9996))) != 0) // INLINED!!
endfunction

function Patrol_DestroyIdPoints takes integer u_handle returns nothing
    local integer pnts_number= (LoadInteger(MultiPatrol___data, - (u_handle), (9997))) // INLINED!!
    local integer i= 1
    
    loop
    exitwhen i > pnts_number or (LoadEffectHandle(MultiPatrol___data, (u_handle ), MultiPatrol___INDEX_DISPLAY + ( i))) == null // INLINED!!
        call BlzSetSpecialEffectAlpha((LoadEffectHandle(MultiPatrol___data, (u_handle ), MultiPatrol___INDEX_DISPLAY + ( i))), 0) // INLINED!!
        call DestroyEffect((LoadEffectHandle(MultiPatrol___data, (u_handle ), MultiPatrol___INDEX_DISPLAY + ( i)))) // INLINED!!
        call DestroyTextTag((LoadTextTagHandle(MultiPatrol___data, (u_handle ), - MultiPatrol___INDEX_DISPLAY - ( i)))) // INLINED!!
        call RemoveSavedHandle(MultiPatrol___data, (u_handle ), MultiPatrol___INDEX_DISPLAY + ( i)) // INLINED!!
        call RemoveSavedHandle(MultiPatrol___data, (u_handle ), - MultiPatrol___INDEX_DISPLAY - ( i)) // INLINED!!
        
        set i=i + 1
    endloop
endfunction

function Patrol_ClearUnitIdData takes integer unitHandleId returns nothing
    local trigger patrolTrig= (LoadTriggerHandle(MultiPatrol___data, - (unitHandleId), (9999))) // INLINED!!
    
    call Patrol_DestroyIdPoints(unitHandleId)
    call FlushChildHashtable(MultiPatrol___data, GetHandleId(patrolTrig))
    call FlushChildHashtable(MultiPatrol___data, unitHandleId) // Clear patrol points
    call FlushChildHashtable(MultiPatrol___data, - unitHandleId) // Clear other stuff
    call RemoveRegion((LoadRegionHandle(MultiPatrol___data, - (unitHandleId), (9998)))) // INLINED!!
    call DestroyTrigger(patrolTrig)
    
    set patrolTrig=null
endfunction

function Patrol_ClearUnitData takes unit whichUnit returns nothing
    call Patrol_ClearUnitIdData(GetHandleId(whichUnit))
endfunction

function Patrol_IsValidPatrolOrder takes integer orderId returns boolean
    if ( not ( orderId == String2OrderIdBJ("patrol") ) ) then
            return false
    endif
    
    // Handle recursion
    if MultiPatrol___orderBool then
        set MultiPatrol___orderBool=false
        return false
    endif
    
    return true
endfunction

function Patrol_DisplayPoints takes unit whichUnit returns nothing
    local integer u_handle= GetHandleId(whichUnit)
    local integer pnts_number= (LoadInteger(MultiPatrol___data, - (u_handle), (9997))) // INLINED!!
    local integer i= 1
    local real x
    local real y
    local texttag tag
    local effect spEffect
    
    loop
    exitwhen i > pnts_number
        if (LoadEffectHandle(MultiPatrol___data, (u_handle ), MultiPatrol___INDEX_DISPLAY + ( i))) == null then // INLINED!!
            set x=(LoadReal(MultiPatrol___data, (u_handle ), ( i))) // INLINED!!
            set y=(LoadReal(MultiPatrol___data, (u_handle ), - ( i))) // INLINED!!
        
            set tag=CreateTextTag()
            set spEffect=AddSpecialEffect("UI\\Feedback\\RallyPoint\\RallyPoint.mdl", x, y)
            call SetTextTagText(tag, I2S(i), 0.023)
            call SetTextTagPos(tag, x - 32, y, 0)
            call SaveEffectHandle(MultiPatrol___data, (u_handle ), MultiPatrol___INDEX_DISPLAY + ( i ), ( spEffect)) // INLINED!!
            call SaveTextTagHandle(MultiPatrol___data, (u_handle ), - MultiPatrol___INDEX_DISPLAY - ( i ), ( tag)) // INLINED!!
            if GetLocalPlayer() != GetOwningPlayer(whichUnit) then
                call SetTextTagVisibility(tag, false)
                call BlzSetSpecialEffectAlpha(spEffect, 0)
            endif
        endif
        
        set i=i + 1
    endloop
endfunction



function Patrol_DestroyPoints takes unit whichUnit returns nothing
    call Patrol_DestroyIdPoints(GetHandleId(whichUnit))
endfunction

function Patrol_ResumePatrol takes unit whichUnit returns nothing
    local integer u_handle= GetHandleId(whichUnit)
    local integer currentPtrl= (LoadInteger(MultiPatrol___data, - (u_handle), (9996))) // INLINED!!
    local real patrolX= (LoadReal(MultiPatrol___data, (u_handle ), ( currentPtrl))) // INLINED!!
    local real patrolY= (LoadReal(MultiPatrol___data, (u_handle ), - ( currentPtrl))) // INLINED!!
    
    if not ((LoadInteger(MultiPatrol___data, - ((u_handle)), (9996))) != 0) then //currentPtrl == 0 then // INLINED!!
        return
    endif
    
    set MultiPatrol___orderBool=true
    if (SquareRoot(Pow(((patrolX - GetUnitX(whichUnit) )*1.0), 2) + Pow((( patrolY - GetUnitY(whichUnit))*1.0), 2))) > MultiPatrol___MINIMUM_DISTANCE then // INLINED!!
        if not IssuePointOrder(whichUnit, "patrol", patrolX, patrolY) then
            set MultiPatrol___orderBool=false
        endif
    else
        if not IssuePointOrder(whichUnit, "move", patrolX, patrolY) then
            set MultiPatrol___orderBool=false
        endif
    endif
endfunction

function Patrol_Create takes unit whichUnit,real x0,real y0,real x,real y returns boolean
    local integer u_handle= GetHandleId(whichUnit)
    local trigger dynTrig
    local region ptrlReg
    
    if (SquareRoot(Pow(((x - x0 )*1.0), 2) + Pow((( y - y0)*1.0), 2))) > MultiPatrol___MINIMUM_DISTANCE then // INLINED!!
        set dynTrig=CreateTrigger()
        set ptrlReg=CreateRegion()
        
        call SaveInteger(MultiPatrol___data, - (u_handle ), (9997), ( 2)) // INLINED!!
        call SaveInteger(MultiPatrol___data, - (u_handle ), (9996), ( 2)) // INLINED!!
        call SaveReal(MultiPatrol___data, (u_handle ), ( 1 ), (( x0)*1.0)) // INLINED!!
        call SaveReal(MultiPatrol___data, (u_handle ), - ( 1 ), (( y0)*1.0)) // INLINED!!
        call SaveReal(MultiPatrol___data, (u_handle ), ( 2 ), (( x)*1.0)) // INLINED!!
        call SaveReal(MultiPatrol___data, (u_handle ), - ( 2 ), (( y)*1.0)) // INLINED!!
        call SaveTriggerHandle(MultiPatrol___data, - (u_handle ), (9999), ( dynTrig)) // INLINED!!
        call SaveRegionHandle(MultiPatrol___data, - (u_handle ), (9998), ( ptrlReg)) // INLINED!!
        
        call MoveRectTo(MultiPatrol___ptrlRect, x, y)
        call RegionAddRect(ptrlReg, MultiPatrol___ptrlRect)
        
        call TriggerRegisterEnterRegion(dynTrig, ptrlReg, null)
        call TriggerAddCondition(dynTrig, Condition(function MultiPatrol___Patrol_PointReached))
        call SaveUnitHandle(MultiPatrol___data, GetHandleId(dynTrig), 0, whichUnit)

        set dynTrig=null
        set ptrlReg=null
    else
        return false
    endif
    return true
endfunction

function Patrol_AddPoint takes unit whichUnit,real newX,real newY returns integer
    local integer u_handle= GetHandleId(whichUnit)
    local integer pnts_number= (LoadInteger(MultiPatrol___data, - (u_handle), (9997))) // INLINED!!
    local real oldX
    local real oldY
    
    if pnts_number > MultiPatrol___MAX_POINTS then
        return MultiPatrol_ERROR_OVERFLOW
    
    elseif pnts_number > 0 then
        set oldX=(LoadReal(MultiPatrol___data, (u_handle ), ( pnts_number))) // INLINED!!
        set oldY=(LoadReal(MultiPatrol___data, (u_handle ), - ( pnts_number))) // INLINED!!
        
        if (SquareRoot(Pow(((newX - oldX )*1.0), 2) + Pow((( newY - oldY)*1.0), 2))) > MultiPatrol___MINIMUM_DISTANCE then // INLINED!!
            set pnts_number=pnts_number + 1
            call SaveInteger(MultiPatrol___data, - (u_handle ), (9997), ( pnts_number)) // INLINED!!
            call SaveReal(MultiPatrol___data, (u_handle ), ( pnts_number ), (( newX)*1.0)) // INLINED!!
            call SaveReal(MultiPatrol___data, (u_handle ), - ( pnts_number ), (( newY)*1.0)) // INLINED!!
        else
            return MultiPatrol_ERROR_TOO_CLOSE
        endif
    else
        return MultiPatrol_ERROR_NULL_POINTER
    endif
    return MultiPatrol_ERROR_NONE
endfunction

function Patrol_RegisterPoint takes unit trigU,real newX,real newY returns nothing
    local integer errorCode= Patrol_AddPoint(trigU , newX , newY)
    
    if errorCode == MultiPatrol_ERROR_NULL_POINTER then
        if not Patrol_Create(trigU , GetUnitX(trigU) , GetUnitY(trigU) , newX , newY) then
            call DisplayTextToPlayer(GetOwningPlayer(trigU), 0, 0, "This patrol point is too close to the unit")
        endif
    elseif errorCode == MultiPatrol_ERROR_OVERFLOW then
        call DisplayTextToPlayer(GetOwningPlayer(trigU), 0, 0, "This unit has too many patrol points.")
    elseif errorCode == MultiPatrol_ERROR_TOO_CLOSE then
        call DisplayTextToPlayer(GetOwningPlayer(trigU), 0, 0, "This patrol point is too close to the last one")
    else
        call Patrol_ResumePatrol(trigU)
    endif
endfunction
//==================================================================================================
//  ------------------------
// ||END OF PATROL SYSTEM ||
//  
function MultiPatrol___onInit takes nothing returns nothing
    set MultiPatrol___ptrlRect=Rect(0, 0, MultiPatrol___RANGE, MultiPatrol___RANGE)
endfunction


//library MultiPatrol ends
//library PlayerUnitLimit:
//////////////////////////////////////////////////////
//Player Army Limit System
//0->clear 1->ground 2->flyer 3-> passive

// This system keeps track of the number of units a player currently has on the map.
// Whenever a unit enters the map, you must register it using this system.
// Whenever you wish to unregister a unit, you must call the deregistering functions in this system.

// Units created over the imposed threshold are automatically removed from the game!

// In Titan Land LoP, the registering and deregistering of units is controlled by the Cleanup and 
// Unit Limit System triggers inside the Map System Category.
//////////////////////////////////////////////////////
function Limit_GetPlayerCategoryCount takes integer playerId,integer unitCategory returns integer
    return udg_System_PlayerArmy[playerId + bj_MAX_PLAYER_SLOTS * ( unitCategory - 1 )]
endfunction

function Limit_SetPlayerCategoryCount takes integer playerId,integer unitCategory,integer x returns nothing
    set udg_System_PlayerArmy[playerId + bj_MAX_PLAYER_SLOTS * ( unitCategory - 1 )]=x
endfunction

function Limit_SaveUnitCategory takes integer unitUserData,integer unitCategory returns nothing
    set udg_System_LimitUnitCategory[unitUserData]=unitCategory
endfunction

function Limit_LoadUnitCategory takes integer unitUserData returns integer
    return udg_System_LimitUnitCategory[unitUserData]
endfunction

constant function Limit_GetCategoryName takes integer category returns string
    if category == 1 then
        return "Ground Units"
    elseif category == 2 then
        return "Air Units"
    else
        return "Passive Units"
    endif
endfunction

function Limit_UnitCategory takes unit u returns integer
    if IsUnitType(u, UNIT_TYPE_MELEE_ATTACKER) or IsUnitType(u, UNIT_TYPE_RANGED_ATTACKER) then
        if IsUnitType(u, UNIT_TYPE_FLYING) then
            return 2 //Register Flying Unit
        else
            return 1 //Register Army Unit
        endif
    else
        return 3 //Register Passive Unit
    endif
endfunction

//===========================================================================
// API
//===========================================================================

function Limit_IsPlayerLimited takes player whichPlayer returns boolean
    return whichPlayer != Player(PLAYER_NEUTRAL_PASSIVE)
endfunction

function Limit_IsUnitLimited takes unit whichUnit returns boolean
    return not IsUnitType(whichUnit, UNIT_TYPE_STRUCTURE)
endfunction

function Limit_RegisterUnit takes unit newU returns nothing
    local player owner= GetOwningPlayer(newU)
    local integer ownerID= GetPlayerId(owner)
    local integer unitCategory
    local integer count

    //Figure out the unit's category
    set unitCategory=Limit_UnitCategory(newU)
    
    //Remove unit if limit has been broken, otherwise register it
    set count=(udg_System_PlayerArmy[(ownerID ) + bj_MAX_PLAYER_SLOTS * ( ( unitCategory) - 1 )]) // INLINED!!
    if count >= udg_System_PArmyLimit[unitCategory] then
        call DisplayTextToPlayer(owner, 0, 0, "Unit has been removed due to limit break. Category: " + Limit_GetCategoryName(unitCategory))
        call RemoveUnit(newU)
    else
        set udg_System_PlayerArmy[(ownerID ) + bj_MAX_PLAYER_SLOTS * ( ( unitCategory ) - 1 )]=( count + 1) // INLINED!!
        set udg_System_LimitUnitCategory[(GetUnitUserData(newU) )]=( unitCategory) // INLINED!!
    endif
endfunction

function Limit_UnregisterUnitEx takes unit oldU,player whichPlayer returns nothing
    local integer unitID= GetUnitUserData(oldU)
    local integer unitCategory= (udg_System_LimitUnitCategory[(unitID)]) // INLINED!!
    local integer playerId

    // Default to unit owner if provided player parameter is null.
    if whichPlayer == null then
        set playerId=GetPlayerId(GetOwningPlayer(oldU))
    else
        set playerId=GetPlayerId(whichPlayer)
    endif
    
    set udg_System_LimitUnitCategory[(unitID )]=( 0) // INLINED!!
    
    set udg_System_PlayerArmy[(playerId ) + bj_MAX_PLAYER_SLOTS * ( ( unitCategory ) - 1 )]=( (udg_System_PlayerArmy[(playerId ) + bj_MAX_PLAYER_SLOTS * ( ( unitCategory) - 1 )]) - 1) // INLINED!!

endfunction

function Limit_UnregisterUnit takes unit oldU returns nothing
    call Limit_UnregisterUnitEx(oldU , null)
endfunction


//library PlayerUnitLimit ends
//library Rawcode2String:
//////////////////////////////////////////////////////
//UnitTypeId to String Library by feelerly @Hiveworkshop
//////////////////////////////////////////////////////
constant function StringNum takes nothing returns string
    return "0123456789"
endfunction
constant function StringABC takes nothing returns string
    return "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
endfunction
constant function Stringabc takes nothing returns string
    return "abcdefghijklmnopqrstuvwxyz"
endfunction
function S2ID takes string source returns integer
    local integer Id= 0
    local integer n1= 1
    local integer n2= 1
    loop
        exitwhen ( n1 > StringLength(source) )
        loop
            exitwhen ( n2 > 10 )
            if ( SubString(source, n1 - 1, n1) == SubString(("0123456789"), n2 - 1, n2) ) then // INLINED!!
                set Id=Id + R2I(( '0' + n2 - 1 ) * Pow(256.00, I2R(StringLength(source) - n1)))
                set n2=n2 + 1
            else
                set n2=n2 + 1
            endif
        endloop
        set n2=1
        loop
            exitwhen ( n2 > 26 )
            if ( SubString(source, n1 - 1, n1) == SubString(("ABCDEFGHIJKLMNOPQRSTUVWXYZ"), n2 - 1, n2) ) then // INLINED!!
                set Id=Id + R2I(I2R('A' + n2 - 1) * Pow(256.00, I2R(StringLength(source) - n1)))
                set n2=n2 + 1
            else
                set n2=n2 + 1
            endif
        endloop
        set n2=1
        loop
            exitwhen ( n2 > 26 )
            if ( SubString(source, n1 - 1, n1) == SubString(("abcdefghijklmnopqrstuvwxyz"), n2 - 1, n2) ) then // INLINED!!
                set Id=Id + R2I(( 'a' + n2 - 1 ) * Pow(256.00, I2R(StringLength(source) - n1)))
                set n2=n2 + 1
            else
                set n2=n2 + 1
            endif
        endloop
        set n2=1
        set n1=n1 + 1
    endloop
    return Id
endfunction
function ID2S takes integer int returns string
    local string target=""
    local integer n=0
    local integer dis=0
    loop
        exitwhen ( int == 0 )
        set n=ModuloInteger(int, 256)
        if ( n >= '0' and n <= '9' ) then
            set dis=n - '0'
            set target=SubString(("0123456789"), dis, dis + 1) + target // INLINED!!
        endif
        if ( n >= 'A' and n <= 'Z' ) then
            set dis=n - 'A'
            set target=SubString(("ABCDEFGHIJKLMNOPQRSTUVWXYZ"), dis, dis + 1) + target // INLINED!!
        endif
        if ( n >= 'a' and n <= 'z' ) then
            set dis=n - 'a'
            set target=SubString(("abcdefghijklmnopqrstuvwxyz"), dis, dis + 1) + target // INLINED!!
        endif
        set int=int / 256
    endloop
    return target
endfunction

//library Rawcode2String ends
//library Table:
   
   
    function s__Table___dex__get_size takes nothing returns integer
        return Table___sizeK
    endfunction
    function s__Table___dex__get_list takes nothing returns integer
        return Table___listK
    endfunction
   
    function s__Table___handles_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___handles_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
   
    function s__Table___agents__setindex takes integer this,integer key,agent value returns nothing
        call SaveAgentHandle(Table___ht, this, key, value)
    endfunction
   
   
   
//Run these textmacros to include the entire hashtable API as wrappers.
//Don't be intimidated by the number of macros - Vexorian's map optimizer is
//supposed to kill functions which inline (all of these functions inline).
//textmacro instance: NEW_ARRAY_BASIC("Real", "Real", "real")
    function s__Table___reals__getindex takes integer this,integer key returns real
        return LoadReal(Table___ht, this, key)
    endfunction
    function s__Table___reals__setindex takes integer this,integer key,real value returns nothing
        call SaveReal(Table___ht, this, key, value)
    endfunction
    function s__Table___reals_has takes integer this,integer key returns boolean
        return HaveSavedReal(Table___ht, this, key)
    endfunction
    function s__Table___reals_remove takes integer this,integer key returns nothing
        call RemoveSavedReal(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Real", "Real", "real")
//textmacro instance: NEW_ARRAY_BASIC("Boolean", "Boolean", "boolean")
    function s__Table___booleans__getindex takes integer this,integer key returns boolean
        return LoadBoolean(Table___ht, this, key)
    endfunction
    function s__Table___booleans__setindex takes integer this,integer key,boolean value returns nothing
        call SaveBoolean(Table___ht, this, key, value)
    endfunction
    function s__Table___booleans_has takes integer this,integer key returns boolean
        return HaveSavedBoolean(Table___ht, this, key)
    endfunction
    function s__Table___booleans_remove takes integer this,integer key returns nothing
        call RemoveSavedBoolean(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Boolean", "Boolean", "boolean")
//textmacro instance: NEW_ARRAY_BASIC("String", "Str", "string")
    function s__Table___strings__getindex takes integer this,integer key returns string
        return LoadStr(Table___ht, this, key)
    endfunction
    function s__Table___strings__setindex takes integer this,integer key,string value returns nothing
        call SaveStr(Table___ht, this, key, value)
    endfunction
    function s__Table___strings_has takes integer this,integer key returns boolean
        return HaveSavedString(Table___ht, this, key)
    endfunction
    function s__Table___strings_remove takes integer this,integer key returns nothing
        call RemoveSavedString(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("String", "Str", "string")
//New textmacro to allow table.integer[] syntax for compatibility with textmacros that might desire it.
//textmacro instance: NEW_ARRAY_BASIC("Integer", "Integer", "integer")
    function s__Table___integers__getindex takes integer this,integer key returns integer
        return LoadInteger(Table___ht, this, key)
    endfunction
    function s__Table___integers__setindex takes integer this,integer key,integer value returns nothing
        call SaveInteger(Table___ht, this, key, value)
    endfunction
    function s__Table___integers_has takes integer this,integer key returns boolean
        return HaveSavedInteger(Table___ht, this, key)
    endfunction
    function s__Table___integers_remove takes integer this,integer key returns nothing
        call RemoveSavedInteger(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Integer", "Integer", "integer")
   
//textmacro instance: NEW_ARRAY("Player", "player")
    function s__Table___players__getindex takes integer this,integer key returns player
        return LoadPlayerHandle(Table___ht, this, key)
    endfunction
    function s__Table___players__setindex takes integer this,integer key,player value returns nothing
        call SavePlayerHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___players_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___players_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Player", "player")
//textmacro instance: NEW_ARRAY("Widget", "widget")
    function s__Table___widgets__getindex takes integer this,integer key returns widget
        return LoadWidgetHandle(Table___ht, this, key)
    endfunction
    function s__Table___widgets__setindex takes integer this,integer key,widget value returns nothing
        call SaveWidgetHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___widgets_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___widgets_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Widget", "widget")
//textmacro instance: NEW_ARRAY("Destructable", "destructable")
    function s__Table___destructables__getindex takes integer this,integer key returns destructable
        return LoadDestructableHandle(Table___ht, this, key)
    endfunction
    function s__Table___destructables__setindex takes integer this,integer key,destructable value returns nothing
        call SaveDestructableHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___destructables_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___destructables_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Destructable", "destructable")
//textmacro instance: NEW_ARRAY("Item", "item")
    function s__Table___items__getindex takes integer this,integer key returns item
        return LoadItemHandle(Table___ht, this, key)
    endfunction
    function s__Table___items__setindex takes integer this,integer key,item value returns nothing
        call SaveItemHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___items_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___items_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Item", "item")
//textmacro instance: NEW_ARRAY("Unit", "unit")
    function s__Table___units__getindex takes integer this,integer key returns unit
        return LoadUnitHandle(Table___ht, this, key)
    endfunction
    function s__Table___units__setindex takes integer this,integer key,unit value returns nothing
        call SaveUnitHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___units_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___units_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Unit", "unit")
//textmacro instance: NEW_ARRAY("Ability", "ability")
    function s__Table___abilitys__getindex takes integer this,integer key returns ability
        return LoadAbilityHandle(Table___ht, this, key)
    endfunction
    function s__Table___abilitys__setindex takes integer this,integer key,ability value returns nothing
        call SaveAbilityHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___abilitys_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___abilitys_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Ability", "ability")
//textmacro instance: NEW_ARRAY("Timer", "timer")
    function s__Table___timers__getindex takes integer this,integer key returns timer
        return LoadTimerHandle(Table___ht, this, key)
    endfunction
    function s__Table___timers__setindex takes integer this,integer key,timer value returns nothing
        call SaveTimerHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___timers_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___timers_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Timer", "timer")
//textmacro instance: NEW_ARRAY("Trigger", "trigger")
    function s__Table___triggers__getindex takes integer this,integer key returns trigger
        return LoadTriggerHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggers__setindex takes integer this,integer key,trigger value returns nothing
        call SaveTriggerHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___triggers_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggers_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Trigger", "trigger")
//textmacro instance: NEW_ARRAY("TriggerCondition", "triggercondition")
    function s__Table___triggerconditions__getindex takes integer this,integer key returns triggercondition
        return LoadTriggerConditionHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggerconditions__setindex takes integer this,integer key,triggercondition value returns nothing
        call SaveTriggerConditionHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___triggerconditions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggerconditions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TriggerCondition", "triggercondition")
//textmacro instance: NEW_ARRAY("TriggerAction", "triggeraction")
    function s__Table___triggeractions__getindex takes integer this,integer key returns triggeraction
        return LoadTriggerActionHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggeractions__setindex takes integer this,integer key,triggeraction value returns nothing
        call SaveTriggerActionHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___triggeractions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggeractions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TriggerAction", "triggeraction")
//textmacro instance: NEW_ARRAY("TriggerEvent", "event")
    function s__Table___events__getindex takes integer this,integer key returns event
        return LoadTriggerEventHandle(Table___ht, this, key)
    endfunction
    function s__Table___events__setindex takes integer this,integer key,event value returns nothing
        call SaveTriggerEventHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___events_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___events_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TriggerEvent", "event")
//textmacro instance: NEW_ARRAY("Force", "force")
    function s__Table___forces__getindex takes integer this,integer key returns force
        return LoadForceHandle(Table___ht, this, key)
    endfunction
    function s__Table___forces__setindex takes integer this,integer key,force value returns nothing
        call SaveForceHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___forces_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___forces_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Force", "force")
//textmacro instance: NEW_ARRAY("Group", "group")
    function s__Table___groups__getindex takes integer this,integer key returns group
        return LoadGroupHandle(Table___ht, this, key)
    endfunction
    function s__Table___groups__setindex takes integer this,integer key,group value returns nothing
        call SaveGroupHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___groups_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___groups_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Group", "group")
//textmacro instance: NEW_ARRAY("Location", "location")
    function s__Table___locations__getindex takes integer this,integer key returns location
        return LoadLocationHandle(Table___ht, this, key)
    endfunction
    function s__Table___locations__setindex takes integer this,integer key,location value returns nothing
        call SaveLocationHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___locations_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___locations_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Location", "location")
//textmacro instance: NEW_ARRAY("Rect", "rect")
    function s__Table___rects__getindex takes integer this,integer key returns rect
        return LoadRectHandle(Table___ht, this, key)
    endfunction
    function s__Table___rects__setindex takes integer this,integer key,rect value returns nothing
        call SaveRectHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___rects_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___rects_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Rect", "rect")
//textmacro instance: NEW_ARRAY("BooleanExpr", "boolexpr")
    function s__Table___boolexprs__getindex takes integer this,integer key returns boolexpr
        return LoadBooleanExprHandle(Table___ht, this, key)
    endfunction
    function s__Table___boolexprs__setindex takes integer this,integer key,boolexpr value returns nothing
        call SaveBooleanExprHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___boolexprs_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___boolexprs_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("BooleanExpr", "boolexpr")
//textmacro instance: NEW_ARRAY("Sound", "sound")
    function s__Table___sounds__getindex takes integer this,integer key returns sound
        return LoadSoundHandle(Table___ht, this, key)
    endfunction
    function s__Table___sounds__setindex takes integer this,integer key,sound value returns nothing
        call SaveSoundHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___sounds_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___sounds_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Sound", "sound")
//textmacro instance: NEW_ARRAY("Effect", "effect")
    function s__Table___effects__getindex takes integer this,integer key returns effect
        return LoadEffectHandle(Table___ht, this, key)
    endfunction
    function s__Table___effects__setindex takes integer this,integer key,effect value returns nothing
        call SaveEffectHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___effects_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___effects_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Effect", "effect")
//textmacro instance: NEW_ARRAY("UnitPool", "unitpool")
    function s__Table___unitpools__getindex takes integer this,integer key returns unitpool
        return LoadUnitPoolHandle(Table___ht, this, key)
    endfunction
    function s__Table___unitpools__setindex takes integer this,integer key,unitpool value returns nothing
        call SaveUnitPoolHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___unitpools_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___unitpools_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("UnitPool", "unitpool")
//textmacro instance: NEW_ARRAY("ItemPool", "itempool")
    function s__Table___itempools__getindex takes integer this,integer key returns itempool
        return LoadItemPoolHandle(Table___ht, this, key)
    endfunction
    function s__Table___itempools__setindex takes integer this,integer key,itempool value returns nothing
        call SaveItemPoolHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___itempools_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___itempools_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("ItemPool", "itempool")
//textmacro instance: NEW_ARRAY("Quest", "quest")
    function s__Table___quests__getindex takes integer this,integer key returns quest
        return LoadQuestHandle(Table___ht, this, key)
    endfunction
    function s__Table___quests__setindex takes integer this,integer key,quest value returns nothing
        call SaveQuestHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___quests_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___quests_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Quest", "quest")
//textmacro instance: NEW_ARRAY("QuestItem", "questitem")
    function s__Table___questitems__getindex takes integer this,integer key returns questitem
        return LoadQuestItemHandle(Table___ht, this, key)
    endfunction
    function s__Table___questitems__setindex takes integer this,integer key,questitem value returns nothing
        call SaveQuestItemHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___questitems_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___questitems_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("QuestItem", "questitem")
//textmacro instance: NEW_ARRAY("DefeatCondition", "defeatcondition")
    function s__Table___defeatconditions__getindex takes integer this,integer key returns defeatcondition
        return LoadDefeatConditionHandle(Table___ht, this, key)
    endfunction
    function s__Table___defeatconditions__setindex takes integer this,integer key,defeatcondition value returns nothing
        call SaveDefeatConditionHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___defeatconditions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___defeatconditions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("DefeatCondition", "defeatcondition")
//textmacro instance: NEW_ARRAY("TimerDialog", "timerdialog")
    function s__Table___timerdialogs__getindex takes integer this,integer key returns timerdialog
        return LoadTimerDialogHandle(Table___ht, this, key)
    endfunction
    function s__Table___timerdialogs__setindex takes integer this,integer key,timerdialog value returns nothing
        call SaveTimerDialogHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___timerdialogs_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___timerdialogs_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TimerDialog", "timerdialog")
//textmacro instance: NEW_ARRAY("Leaderboard", "leaderboard")
    function s__Table___leaderboards__getindex takes integer this,integer key returns leaderboard
        return LoadLeaderboardHandle(Table___ht, this, key)
    endfunction
    function s__Table___leaderboards__setindex takes integer this,integer key,leaderboard value returns nothing
        call SaveLeaderboardHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___leaderboards_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___leaderboards_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Leaderboard", "leaderboard")
//textmacro instance: NEW_ARRAY("Multiboard", "multiboard")
    function s__Table___multiboards__getindex takes integer this,integer key returns multiboard
        return LoadMultiboardHandle(Table___ht, this, key)
    endfunction
    function s__Table___multiboards__setindex takes integer this,integer key,multiboard value returns nothing
        call SaveMultiboardHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___multiboards_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___multiboards_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Multiboard", "multiboard")
//textmacro instance: NEW_ARRAY("MultiboardItem", "multiboarditem")
    function s__Table___multiboarditems__getindex takes integer this,integer key returns multiboarditem
        return LoadMultiboardItemHandle(Table___ht, this, key)
    endfunction
    function s__Table___multiboarditems__setindex takes integer this,integer key,multiboarditem value returns nothing
        call SaveMultiboardItemHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___multiboarditems_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___multiboarditems_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("MultiboardItem", "multiboarditem")
//textmacro instance: NEW_ARRAY("Trackable", "trackable")
    function s__Table___trackables__getindex takes integer this,integer key returns trackable
        return LoadTrackableHandle(Table___ht, this, key)
    endfunction
    function s__Table___trackables__setindex takes integer this,integer key,trackable value returns nothing
        call SaveTrackableHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___trackables_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___trackables_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Trackable", "trackable")
//textmacro instance: NEW_ARRAY("Dialog", "dialog")
    function s__Table___dialogs__getindex takes integer this,integer key returns dialog
        return LoadDialogHandle(Table___ht, this, key)
    endfunction
    function s__Table___dialogs__setindex takes integer this,integer key,dialog value returns nothing
        call SaveDialogHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___dialogs_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___dialogs_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Dialog", "dialog")
//textmacro instance: NEW_ARRAY("Button", "button")
    function s__Table___buttons__getindex takes integer this,integer key returns button
        return LoadButtonHandle(Table___ht, this, key)
    endfunction
    function s__Table___buttons__setindex takes integer this,integer key,button value returns nothing
        call SaveButtonHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___buttons_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___buttons_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Button", "button")
//textmacro instance: NEW_ARRAY("TextTag", "texttag")
    function s__Table___texttags__getindex takes integer this,integer key returns texttag
        return LoadTextTagHandle(Table___ht, this, key)
    endfunction
    function s__Table___texttags__setindex takes integer this,integer key,texttag value returns nothing
        call SaveTextTagHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___texttags_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___texttags_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TextTag", "texttag")
//textmacro instance: NEW_ARRAY("Lightning", "lightning")
    function s__Table___lightnings__getindex takes integer this,integer key returns lightning
        return LoadLightningHandle(Table___ht, this, key)
    endfunction
    function s__Table___lightnings__setindex takes integer this,integer key,lightning value returns nothing
        call SaveLightningHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___lightnings_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___lightnings_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Lightning", "lightning")
//textmacro instance: NEW_ARRAY("Image", "image")
    function s__Table___images__getindex takes integer this,integer key returns image
        return LoadImageHandle(Table___ht, this, key)
    endfunction
    function s__Table___images__setindex takes integer this,integer key,image value returns nothing
        call SaveImageHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___images_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___images_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Image", "image")
//textmacro instance: NEW_ARRAY("Ubersplat", "ubersplat")
    function s__Table___ubersplats__getindex takes integer this,integer key returns ubersplat
        return LoadUbersplatHandle(Table___ht, this, key)
    endfunction
    function s__Table___ubersplats__setindex takes integer this,integer key,ubersplat value returns nothing
        call SaveUbersplatHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___ubersplats_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___ubersplats_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Ubersplat", "ubersplat")
//textmacro instance: NEW_ARRAY("Region", "region")
    function s__Table___regions__getindex takes integer this,integer key returns region
        return LoadRegionHandle(Table___ht, this, key)
    endfunction
    function s__Table___regions__setindex takes integer this,integer key,region value returns nothing
        call SaveRegionHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___regions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___regions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Region", "region")
//textmacro instance: NEW_ARRAY("FogState", "fogstate")
    function s__Table___fogstates__getindex takes integer this,integer key returns fogstate
        return LoadFogStateHandle(Table___ht, this, key)
    endfunction
    function s__Table___fogstates__setindex takes integer this,integer key,fogstate value returns nothing
        call SaveFogStateHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___fogstates_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___fogstates_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("FogState", "fogstate")
//textmacro instance: NEW_ARRAY("FogModifier", "fogmodifier")
    function s__Table___fogmodifiers__getindex takes integer this,integer key returns fogmodifier
        return LoadFogModifierHandle(Table___ht, this, key)
    endfunction
    function s__Table___fogmodifiers__setindex takes integer this,integer key,fogmodifier value returns nothing
        call SaveFogModifierHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___fogmodifiers_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___fogmodifiers_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("FogModifier", "fogmodifier")
//textmacro instance: NEW_ARRAY("Hashtable", "hashtable")
    function s__Table___hashtables__getindex takes integer this,integer key returns hashtable
        return LoadHashtableHandle(Table___ht, this, key)
    endfunction
    function s__Table___hashtables__setindex takes integer this,integer key,hashtable value returns nothing
        call SaveHashtableHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___hashtables_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___hashtables_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Hashtable", "hashtable")
   
   
    // Implement modules for intuitive syntax (tb.handle; tb.unit; etc.)
//Implemented from module Table___realm:
    function s__Table__get_real takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___integerm:
    function s__Table__get_integer takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___booleanm:
    function s__Table__get_boolean takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___stringm:
    function s__Table__get_string takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___playerm:
    function s__Table__get_player takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___widgetm:
    function s__Table__get_widget takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___destructablem:
    function s__Table__get_destructable takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___itemm:
    function s__Table__get_item takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___unitm:
    function s__Table__get_unit takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___abilitym:
    function s__Table__get_ability takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___timerm:
    function s__Table__get_timer takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___triggerm:
    function s__Table__get_trigger takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___triggerconditionm:
    function s__Table__get_triggercondition takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___triggeractionm:
    function s__Table__get_triggeraction takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___eventm:
    function s__Table__get_event takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___forcem:
    function s__Table__get_force takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___groupm:
    function s__Table__get_group takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___locationm:
    function s__Table__get_location takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___rectm:
    function s__Table__get_rect takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___boolexprm:
    function s__Table__get_boolexpr takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___soundm:
    function s__Table__get_sound takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___effectm:
    function s__Table__get_effect takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___unitpoolm:
    function s__Table__get_unitpool takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___itempoolm:
    function s__Table__get_itempool takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___questm:
    function s__Table__get_quest takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___questitemm:
    function s__Table__get_questitem takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___defeatconditionm:
    function s__Table__get_defeatcondition takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___timerdialogm:
    function s__Table__get_timerdialog takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___leaderboardm:
    function s__Table__get_leaderboard takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___multiboardm:
    function s__Table__get_multiboard takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___multiboarditemm:
    function s__Table__get_multiboarditem takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___trackablem:
    function s__Table__get_trackable takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___dialogm:
    function s__Table__get_dialog takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___buttonm:
    function s__Table__get_button takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___texttagm:
    function s__Table__get_texttag takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___lightningm:
    function s__Table__get_lightning takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___imagem:
    function s__Table__get_image takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___ubersplatm:
    function s__Table__get_ubersplat takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___regionm:
    function s__Table__get_region takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___fogstatem:
    function s__Table__get_fogstate takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___fogmodifierm:
    function s__Table__get_fogmodifier takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___hashtablem:
    function s__Table__get_hashtable takes integer this returns integer
        return this
    endfunction
   
    function s__Table__get_handle takes integer this returns integer
        return this
    endfunction
   
    function s__Table__get_agent takes integer this returns integer
        return this
    endfunction
   
    //set this = tb[GetSpellAbilityId()]
    function s__Table__getindex takes integer this,integer key returns integer
        return LoadInteger(Table___ht, this, key) //return this.integer[key]
    endfunction
   
    //set tb[389034] = 8192
    function s__Table__setindex takes integer this,integer key,integer tb returns nothing
        call SaveInteger(Table___ht, this, key, tb) //set this.integer[key] = tb
    endfunction
   
    //set b = tb.has(2493223)
    function s__Table_has takes integer this,integer key returns boolean
        return HaveSavedInteger(Table___ht, this, key) //return this.integer.has(key)
    endfunction
   
    //call tb.remove(294080)
    function s__Table_remove takes integer this,integer key returns nothing
        call RemoveSavedInteger(Table___ht, this, key) //call this.integer.remove(key)
    endfunction
   
    //Remove all data from a Table instance
    function s__Table_flush takes integer this returns nothing
        call FlushChildHashtable(Table___ht, this)
    endfunction
   
    //local Table tb = Table.create()
    function s__Table_create takes nothing returns integer
        local integer this= (LoadInteger(Table___ht, ((Table___listK)), (0))) // INLINED!!
       
        if this == 0 then
            set this=Table___more + 1
            set Table___more=this
        else
            call SaveInteger(Table___ht, ((Table___listK)), (0), ( (LoadInteger(Table___ht, ((Table___listK)), (this))))) // INLINED!!
            call RemoveSavedInteger(Table___ht, ((Table___listK)), (this)) //Clear hashed memory // INLINED!!
        endif
       
        return this
    endfunction
   
    // Removes all data from a Table instance and recycles its index.
    //
    //     call tb.destroy()
    //
    function s__Table_destroy takes integer this returns nothing
       
        call FlushChildHashtable(Table___ht, (this)) // INLINED!!
       
        call SaveInteger(Table___ht, ((Table___listK)), (this), ( (LoadInteger(Table___ht, ((Table___listK)), (0))))) // INLINED!!
        call SaveInteger(Table___ht, ((Table___listK)), (0), ( this)) // INLINED!!
    endfunction
   
//ignored textmacro command: TABLE_BC_METHODS()
   
//ignored textmacro command: TABLE_BC_STRUCTS()
   
   
    //Returns a new TableArray to do your bidding. Simply use:
    //
    //    local TableArray ta = TableArray[array_size]
    //
    function s__TableArray__staticgetindex takes integer array_size returns integer
        local integer tb= (LoadInteger(Table___ht, ((Table___sizeK)), (array_size))) // INLINED!!
        local integer this= (LoadInteger(Table___ht, (tb), (0))) // INLINED!!
       
       
        if this == 0 then
            set this=Table___less - array_size
            set Table___less=this
        else
            call SaveInteger(Table___ht, (tb), (0), ( (LoadInteger(Table___ht, (tb), (this))))) //Set the last destroyed to the last-last destroyed // INLINED!!
            call RemoveSavedInteger(Table___ht, (tb), (this)) //Clear hashed memory // INLINED!!
        endif
       
        call SaveInteger(Table___ht, ((Table___sizeK)), (this), ( array_size)) //This remembers the array size // INLINED!!
        return this
    endfunction
   
    //Returns the size of the TableArray
    function s__TableArray__get_size takes integer this returns integer
        return (LoadInteger(Table___ht, ((Table___sizeK)), (this))) // INLINED!!
    endfunction
   
    //This magic method enables two-dimensional[array][syntax] for Tables,
    //similar to the two-dimensional utility provided by hashtables them-
    //selves.
    //
    //ta[integer a].unit[integer b] = unit u
    //ta[integer a][integer c] = integer d
    //
    //Inline-friendly when not running in debug mode
    //
    function s__TableArray__getindex takes integer this,integer key returns integer










        return this + key
    endfunction
   
    //Destroys a TableArray without flushing it; I assume you call .flush()
    //if you want it flushed too. This is a public method so that you don't
    //have to loop through all TableArray indices to flush them if you don't
    //need to (ie. if you were flushing all child-keys as you used them).
    //
    function s__TableArray_destroy takes integer this returns nothing
        local integer tb= (LoadInteger(Table___ht, ((Table___sizeK)), ((LoadInteger(Table___ht, ((Table___sizeK)), ((this))))))) // INLINED!!
       
       
        if tb == 0 then
            //Create a Table to index recycled instances with their array size
            set tb=s__Table_create()
            call SaveInteger(Table___ht, ((Table___sizeK)), ((LoadInteger(Table___ht, ((Table___sizeK)), ((this))))), ( tb)) // INLINED!!
        endif
       
        call RemoveSavedInteger(Table___ht, ((Table___sizeK)), (this)) //Clear the array size from hash memory // INLINED!!
       
        call SaveInteger(Table___ht, (tb), (this), ( (LoadInteger(Table___ht, (tb), (0))))) // INLINED!!
        call SaveInteger(Table___ht, (tb), (0), ( this)) // INLINED!!
    endfunction
   
   
    //Avoids hitting the op limit
    function s__TableArray_clean takes nothing returns nothing
        local integer tb= s__TableArray_tempTable
        local integer end= tb + 0x1000
        if end < s__TableArray_tempEnd then
            set s__TableArray_tempTable=end
            call ForForce(bj_FORCE_PLAYER[0], function s__TableArray_clean)
        else
            set end=s__TableArray_tempEnd
        endif
        loop
            call FlushChildHashtable(Table___ht, (tb)) // INLINED!!
            set tb=tb + 1
            exitwhen tb == end
        endloop
    endfunction
   
    //Flushes the TableArray and also destroys it. Doesn't get any more
    //similar to the FlushParentHashtable native than this.
    //
    function s__TableArray_flush takes integer this returns nothing
        set s__TableArray_tempTable=this
        set s__TableArray_tempEnd=this + (LoadInteger(Table___ht, ((Table___sizeK)), ((this)))) // INLINED!!
        call ForForce(bj_FORCE_PLAYER[0], function s__TableArray_clean)
        call s__TableArray_destroy(this)
    endfunction
   
   
//NEW: Added in Table 4.0. A fairly simple struct but allows you to do more
//than that which was previously possible.

    //Enables myHash[parentKey][childKey] syntax.
    //Basically, it creates a Table in the place of the parent key if
    //it didn't already get created earlier.
    function s__HashTable__getindex takes integer this,integer index returns integer
        local integer t= (LoadInteger(Table___ht, ((this)), (index))) // INLINED!!
        if t == 0 then
            set t=s__Table_create()
            call SaveInteger(Table___ht, ((this)), (index), ( t)) //whoops! Forgot that line. I'm out of practice! // INLINED!!
        endif
        return t
    endfunction

    //You need to call this on each parent key that you used if you
    //intend to destroy the HashTable or simply no longer need that key.
    function s__HashTable_remove takes integer this,integer index returns nothing
        local integer t= (LoadInteger(Table___ht, ((this)), (index))) // INLINED!!
        if t != 0 then
            call s__Table_destroy(t)
            call RemoveSavedInteger(Table___ht, ((this)), (index)) // INLINED!!
        endif
    endfunction
   
    //Added in version 4.1
    function s__HashTable_has takes integer this,integer index returns boolean
        return (HaveSavedInteger(Table___ht, ((this)), (index))) // INLINED!!
    endfunction
   
    //HashTables are just fancy Table indices.
    function s__HashTable_destroy takes integer this returns nothing
        call s__Table_destroy((this))
    endfunction
   
    //Like I said above...
    function s__HashTable_create takes nothing returns integer
        return s__Table_create()
    endfunction



//library Table ends
//library ThirdPersonCamera:
//===========================================================================
// First Person Camera System v1.1.0
//===========================
// Author: Guhun
// If you use this in your map, credits would be greatly appreciated!

// Changelog:
// 1.1.0 => Mouse movement will now only occur if the angle between the pointer and the unit is more
// than a certain minimum value. A new command has been added to allow player to change this value.

//===========================================================================
// Configuration
//===============
// Help message

// If this is returns false, then the Help Message will not be displayed when a player enters first 
// person view for the first time.
constant function Camera_HELP_FIRST_TIME takes nothing returns boolean
    return true
endfunction

// This is the Help Message displayed by the help command.
constant function Camera_HELP_MESSAGE takes nothing returns string
    return "First Person Camera Enabled!\n\nTo leave this perspective, double-click the |c00ffff00Esc|r key.\nTo fix the camera to the unit's facing, click the |c00ffff00Esc|r key.\nTo allow the camera to move independently, click the |c00ffff00Esc|r key.\n\nYou can use the |c00ffff00left|r and |c00ffff00right|r arrow keys to move the camera.\nYou can find the commands for the camera by pressing |c00ffff00F9|r."
endfunction
//===============
// Camera

// The time it takes for the camera to transition between first person and third person
function Camera_TransitionTime takes nothing returns real
    return 1.0
endfunction

// Should be 0.25 for multiplayer and 0.12 for single player
function Camera_SleepCompensator takes nothing returns real
    return 0.25
endfunction

// Command used to set camera to first person.
// If this function returns an empty string, then the commands will be disabled.
constant function Camera_FP_COMMAND takes nothing returns string
    return "-first person"
endfunction

// Command used to set camera to third person.
constant function Camera_TP_COMMAND takes nothing returns string
    return "-third person"
endfunction

// Command used to set camera to be fixed to the target unit's current facing angle.
constant function Camera_FIXED_COMMAND takes nothing returns string
    return "-fixed camera"
endfunction

// Command used to set camera to be free, allowing the user to move it while target is moving.
constant function Camera_FREE_COMMAND takes nothing returns string
    return "-free camera"
endfunction

// Command used to display the Help Message.
constant function Camera_HELP_COMMAND takes nothing returns string
    return "-help camera"
endfunction

// Command used to display the Help Message.
constant function Camera_MIN_ANGLE_COMMAND takes nothing returns string
    return "-sensitivity "
endfunction
//===============
// Dummy Units

// Unit Type of the dummy units
constant function Camera_DUMMY_TYPE takes nothing returns integer
    return 'nvil'
endfunction

// X of the point where dummy units are created.
constant function Camera_DUMMY_X takes nothing returns real
    return 0.0
endfunction

// Y of the point where dummy units are created.
constant function Camera_DUMMY_Y takes nothing returns real
    return 0.0
endfunction

// The owner of the Dummy Units. If GetEnumPlayer() is returned, each player will own his own dummy.
function Camera_Dummy_Owner takes nothing returns player
    return Player(bj_PLAYER_NEUTRAL_EXTRA) // GetEnumPlayer()
endfunction
//===========================================================================
//===============


//===========================================================================
//===============
// Hashtable Constants (saved in child hashtable of key = PlayerId of player)

constant function Camera_ESC_KEY takes nothing returns integer
    return 0
endfunction

constant function Camera_LEFT_KEY takes nothing returns integer
    return 1
endfunction

constant function Camera_RIGHT_KEY takes nothing returns integer
    return 2
endfunction

constant function Camera_MIN_ANGLE takes nothing returns integer
    return 3
endfunction

//===========================================================================
// Utility Functions
//===============
// Setters
function Camera_SetDefaultRotator takes integer playerId,unit whichUnit returns nothing
    set ThirdPersonCamera___focusUnits[playerId + 2 * bj_MAX_PLAYERS]=whichUnit
endfunction

function Camera_SetRotator takes integer playerId,unit whichUnit returns nothing
    set ThirdPersonCamera___focusUnits[playerId + bj_MAX_PLAYERS]=whichUnit
endfunction

function Camera_SetTarget takes integer playerId,unit whichUnit returns nothing
    set ThirdPersonCamera___focusUnits[playerId]=whichUnit
endfunction

//===============
// Getters
function Camera_GetDefaultRotator takes integer playerId returns unit
    return ThirdPersonCamera___focusUnits[playerId + 2 * bj_MAX_PLAYERS]
endfunction

function Camera_GetRotator takes integer playerId returns unit
    return ThirdPersonCamera___focusUnits[playerId + bj_MAX_PLAYERS]
endfunction

function Camera_GetTarget takes integer playerId returns unit
    return ThirdPersonCamera___focusUnits[playerId]
endfunction
//===========================================================================
// API
//===============
function Camera_WasHelpSeen takes integer playerId returns boolean
    return not HaveSavedBoolean(ThirdPersonCamera___data, playerId, - 1)
endfunction

function Camera_SetHelpSeen takes integer playerId,boolean flag returns nothing
    if flag then
        call RemoveSavedBoolean(ThirdPersonCamera___data, playerId, - 1)
    else
        call SaveBoolean(ThirdPersonCamera___data, playerId, - 1, true)
    endif
endfunction

function Camera_SetFirstPerson takes player whichPlayer,unit whichUnit returns nothing
    local real sleepTime
    
    if not (not HaveSavedBoolean(ThirdPersonCamera___data, (GetPlayerId(whichPlayer)), - 1)) then // INLINED!!
        call DisplayTextToPlayer(whichPlayer, 0, 0, ("First Person Camera Enabled!\n\nTo leave this perspective, double-click the |c00ffff00Esc|r key.\nTo fix the camera to the unit's facing, click the |c00ffff00Esc|r key.\nTo allow the camera to move independently, click the |c00ffff00Esc|r key.\n\nYou can use the |c00ffff00left|r and |c00ffff00right|r arrow keys to move the camera.\nYou can find the commands for the camera by pressing |c00ffff00F9|r.")) // INLINED!!
        call Camera_SetHelpSeen(GetPlayerId(whichPlayer) , true)
    endif
        
    
    call SetCameraTargetControllerNoZForPlayer(whichPlayer, whichUnit, 0.00, 0, true)
    
    set sleepTime=(1.0) - (0.25) // Compensate for inaccuracy // INLINED!!
    if sleepTime > 0 then
            if GetLocalPlayer() == whichPlayer then
            call SetCameraField(CAMERA_FIELD_ANGLE_OF_ATTACK, 350.00, (1.0)) // INLINED!!
            call SetCameraField(CAMERA_FIELD_TARGET_DISTANCE, 140.00, (1.0)) // INLINED!!
            call SetCameraField(CAMERA_FIELD_ZOFFSET, ( GetUnitFlyHeight(whichUnit) + 125.00 ), (1.0)) // INLINED!!
            
            call TriggerSleepAction(sleepTime)
            call StopCamera() // Stop camera movement to avoid bugs
        else
            call TriggerSleepAction(sleepTime)
        endif
    endif
    
    set ThirdPersonCamera___focusUnits[(GetPlayerId(whichPlayer) )]=( whichUnit) // INLINED!!
    set ThirdPersonCamera___focusUnits[(GetPlayerId(whichPlayer) ) + bj_MAX_PLAYERS]=( (ThirdPersonCamera___focusUnits[(GetPlayerId(whichPlayer)) + 2 * bj_MAX_PLAYERS])) // INLINED!!
endfunction

function Camera_SetThirdPerson takes player whichPlayer returns nothing
    set ThirdPersonCamera___focusUnits[(GetPlayerId(whichPlayer) )]=( null) // INLINED!!
    if GetLocalPlayer() == whichPlayer then
        call StopCamera()
        call ResetToGameCamera((1.0)) // INLINED!!
    endif
endfunction

function Camera_SetFirstPersonSelected takes player p returns nothing
    local unit u
    local group g= CreateGroup()

    call GroupEnumUnitsSelected(g, p, null)
    set u=FirstOfGroup(g)
    
    call Camera_SetFirstPerson(p , u)
    
    call DestroyGroup(g)
    set g=null
endfunction

// Clears ALL of a player's data related to this system, including the default rotation unit and timers.
function Camera_ClearPlayerData takes player whichPlayer returns nothing
    local integer playerId= GetPlayerId(whichPlayer)

    // Flushing this will also destroy timers for arrow keys
    call FlushChildHashtable(ThirdPersonCamera___data, playerId)
    
    // Remove useless unit and null everything to avoid handle reference leaks
    call RemoveUnit((ThirdPersonCamera___focusUnits[(playerId) + 2 * bj_MAX_PLAYERS])) // INLINED!!
    set ThirdPersonCamera___focusUnits[(playerId ) + 2 * bj_MAX_PLAYERS]=( null) // INLINED!!
    set ThirdPersonCamera___focusUnits[(playerId ) + bj_MAX_PLAYERS]=( null) // INLINED!!
    set ThirdPersonCamera___focusUnits[(playerId )]=( null) // INLINED!!
endfunction
//===========================================================================
// Key Event Handling: Left and Right arrows
//===============
// Utility
function Camera_IsKeyPressed takes integer playerId,integer whichKey returns boolean
    return HaveSavedBoolean(ThirdPersonCamera___data, playerId, whichKey)
endfunction

function Camera_SetKeyPressed takes integer playerId,integer whichKey,boolean flag returns nothing
    if flag then
        call SaveBoolean(ThirdPersonCamera___data, playerId, whichKey, true)
    else
        call RemoveSavedBoolean(ThirdPersonCamera___data, playerId, whichKey)
    endif
endfunction

//===============
// Timer Functions
function Camera_TimerFunc2 takes nothing returns nothing
    local unit u
    local timer t= GetExpiredTimer()
    local integer playerId= LoadInteger(ThirdPersonCamera___data, GetHandleId(t), 0)
    
    if ( (HaveSavedBoolean(ThirdPersonCamera___data, (playerId ), ( (1)))) ) then // INLINED!!
        set u=(ThirdPersonCamera___focusUnits[(playerId) + bj_MAX_PLAYERS]) // INLINED!!
        call SetUnitFacing(u, GetUnitFacing(u) + 10.)
        set u=null
    else
        call PauseTimer(t)
        call DestroyTimer(t)
    endif
    set t=null
endfunction

function Camera_TimerFunc_RightArrow takes nothing returns nothing
    local unit u
    local timer t= GetExpiredTimer()
    local integer playerId= LoadInteger(ThirdPersonCamera___data, GetHandleId(t), 0)
    
    if ( (HaveSavedBoolean(ThirdPersonCamera___data, (playerId ), ( (2)))) ) then // INLINED!!
        set u=(ThirdPersonCamera___focusUnits[(playerId) + bj_MAX_PLAYERS]) // INLINED!!
        call SetUnitFacing(u, GetUnitFacing(u) - 10.)
        set u=null
    else
        call FlushChildHashtable(ThirdPersonCamera___data, GetHandleId(t))
        call PauseTimer(t)
        call DestroyTimer(t)
    endif
    set t=null
endfunction

//===============
// Trigger Actions
function SideArrowPress takes integer playerId,integer whichKey,code handlerFunc returns nothing
    local timer t
    
    if (ThirdPersonCamera___focusUnits[(playerId)]) == null then // INLINED!!
        return
    endif
    
    if (HaveSavedBoolean(ThirdPersonCamera___data, (playerId ), ( whichKey))) then // INLINED!!
        call Camera_SetKeyPressed(playerId , whichKey , false)
    else
        call Camera_SetKeyPressed(playerId , whichKey , true)
        
        set t=CreateTimer()
        call TimerStart(t, 0.03, true, handlerFunc)
        call SaveInteger(ThirdPersonCamera___data, GetHandleId(t), 0, playerId)
        set t=null
    endif
endfunction

function Camera_Trig_LeftArrow_Actions takes nothing returns nothing
    call SideArrowPress(GetPlayerId(GetTriggerPlayer()) , (1) , function Camera_TimerFunc2) // INLINED!!
endfunction

function Camera_Trig_RightArrow_Actions takes nothing returns nothing
    call SideArrowPress(GetPlayerId(GetTriggerPlayer()) , (2) , function Camera_TimerFunc_RightArrow) // INLINED!!
endfunction

//===========================================================================
// Key Event Handling: Esc
//===============
function Camera_GetEscClicks takes integer playerId returns integer
    return LoadInteger(ThirdPersonCamera___data, playerId, (0)) // INLINED!!
endfunction

function Camera_SetEscClicks takes integer playerId,integer value returns nothing
    call SaveInteger(ThirdPersonCamera___data, playerId, (0), value) // INLINED!!
endfunction

function Camera_ResetEscClicks takes integer playerId returns nothing
    call RemoveSavedInteger(ThirdPersonCamera___data, playerId, (0)) // INLINED!!
endfunction

function Camera_Trig_Esc_Actions takes nothing returns nothing
    local player p= GetTriggerPlayer()
    local integer pId= GetPlayerId(p)
    local integer count= (LoadInteger(ThirdPersonCamera___data, (pId), (0))) // INLINED!!
    
    if count == 0 then
        if (ThirdPersonCamera___focusUnits[(pId) + bj_MAX_PLAYERS]) == (ThirdPersonCamera___focusUnits[(pId)]) then // INLINED!!
            set ThirdPersonCamera___focusUnits[(pId ) + bj_MAX_PLAYERS]=( (ThirdPersonCamera___focusUnits[(pId) + 2 * bj_MAX_PLAYERS])) // INLINED!!
        else
            set ThirdPersonCamera___focusUnits[(pId ) + bj_MAX_PLAYERS]=( (ThirdPersonCamera___focusUnits[(pId)])) // INLINED!!
        endif
        
        call SaveInteger(ThirdPersonCamera___data, (pId ), (0), ( count + 1)) // INLINED!!
        call TriggerSleepAction(.4)
        call RemoveSavedInteger(ThirdPersonCamera___data, (pId), (0)) // INLINED!!
    elseif count == 1 then
        call SaveInteger(ThirdPersonCamera___data, (pId ), (0), ( count + 1)) // INLINED!!
        if (ThirdPersonCamera___focusUnits[(pId)]) != null then // INLINED!!
            call Camera_SetThirdPerson(p)
        else
            call Camera_SetFirstPersonSelected(p) // There is a wait in this function
        endif
    endif
endfunction

//===========================================================================
// Mouse Event Handling
//===============

// Returns the minimum angle between mouse and unit for camera to turn.
// This is a per-player setting, since it may vary with screen resolution.
function Camera_GetMinAngle takes integer playerId returns real
    return LoadReal(ThirdPersonCamera___data, playerId, (3)) // INLINED!!
endfunction

// Sets the minimum angle between mouse and unit for camera to turn.
// This is a per-player setting, since it may vary with screen resolution.
function Camera_SetMinAngle takes integer playerId,real angle returns nothing
    call SaveReal(ThirdPersonCamera___data, playerId, (3), angle) // INLINED!!
endfunction

function Camera_AngleToMouse takes unit u,integer playerId,real x,real y returns real
    local real mouseX= BlzGetTriggerPlayerMouseX()
    local real mouseY= BlzGetTriggerPlayerMouseY()
    local real newAngle= bj_RADTODEG * Atan2(mouseY - y, mouseX - x)
    local real difference
    local real minAngle= (LoadReal(ThirdPersonCamera___data, (playerId), (3))) // INLINED!!
    
    if newAngle < 0 then
        set newAngle=360 + newAngle // Convert negative angles to positive, since GetUnitFacing always returns positives
    endif
    set difference=newAngle - GetUnitFacing((ThirdPersonCamera___focusUnits[(playerId) + bj_MAX_PLAYERS])) // INLINED!!
    
    // If both mouseX and Y are 0, then the mouse is (probably) on the UI
    if ( difference > minAngle or difference < - minAngle ) and ( mouseX != 0 and mouseY != 0 ) then
        return newAngle
    else
        return GetUnitFacing((ThirdPersonCamera___focusUnits[(playerId) + bj_MAX_PLAYERS])) // INLINED!!
    endif
endfunction


function Trig_CameraMouse_Actions takes nothing returns nothing
    local player trigPlayer= GetTriggerPlayer()
    local integer playerId= GetPlayerId(trigPlayer)
    local unit u= (ThirdPersonCamera___focusUnits[(playerId)]) // INLINED!!
    
    if u != null then
        call SetUnitFacing((ThirdPersonCamera___focusUnits[(playerId) + bj_MAX_PLAYERS]), Camera_AngleToMouse(u , playerId , GetUnitX(u) , GetUnitY(u))) // INLINED!!
        set u=null
    endif
endfunction

//===========================================================================
// Commands
//===============
function Trig_Commands_First_Person_Actions takes nothing returns nothing
    local player p= GetTriggerPlayer()
    local string chatStr= GetEventPlayerChatString()

    if chatStr == ("-first person") then // INLINED!!
        call Camera_SetFirstPersonSelected(p)
    elseif chatStr == ("-third person") then // INLINED!!
        call Camera_SetThirdPerson(p)
    elseif chatStr == ("-fixed camera") then // INLINED!!
        set ThirdPersonCamera___focusUnits[(GetPlayerId(p) ) + bj_MAX_PLAYERS]=( (ThirdPersonCamera___focusUnits[(GetPlayerId(p))])) // INLINED!!
    elseif chatStr == ("-free camera") then // INLINED!!
        set ThirdPersonCamera___focusUnits[(GetPlayerId(p) ) + bj_MAX_PLAYERS]=( (ThirdPersonCamera___focusUnits[(GetPlayerId(p)) + 2 * bj_MAX_PLAYERS])) // INLINED!!
    elseif chatStr == ("-help camera") then // INLINED!!
        call DisplayTextToPlayer(p, 0, 0, ("First Person Camera Enabled!\n\nTo leave this perspective, double-click the |c00ffff00Esc|r key.\nTo fix the camera to the unit's facing, click the |c00ffff00Esc|r key.\nTo allow the camera to move independently, click the |c00ffff00Esc|r key.\n\nYou can use the |c00ffff00left|r and |c00ffff00right|r arrow keys to move the camera.\nYou can find the commands for the camera by pressing |c00ffff00F9|r.")) // INLINED!!
    else
        call SaveReal(ThirdPersonCamera___data, (GetPlayerId(p) ), (3), (( S2R(SubString(chatStr, StringLength(GetEventPlayerChatStringMatched()), StringLength(chatStr))))*1.0)) // INLINED!!
    endif
endfunction

//===========================================================================
// Timer Function
//===============

// This function periodically sets the local player camera to the correct position in first person
function Camera_TimerFunc takes nothing returns nothing
    local player localPlayer= GetLocalPlayer()
    local integer playerId= GetPlayerId(localPlayer)
    
    if ThirdPersonCamera___focusUnits[playerId] != null then
        call SetCameraField(CAMERA_FIELD_ROTATION, GetUnitFacing(ThirdPersonCamera___focusUnits[playerId + bj_MAX_PLAYERS]), 0)
        call SetCameraField(CAMERA_FIELD_ANGLE_OF_ATTACK, 350.00, 0)
        call SetCameraField(CAMERA_FIELD_TARGET_DISTANCE, 140.00, 0)
        call SetCameraField(CAMERA_FIELD_ZOFFSET, ( GetUnitFlyHeight(ThirdPersonCamera___focusUnits[playerId]) + 125.00 ), 0.01)
    endif
endfunction

//===========================================================================
// Initialization
//===============
function Camera_ForForce_Init takes nothing returns nothing
    local player enumPlayer= GetEnumPlayer()
    local unit u
    if GetPlayerSlotState(enumPlayer) == PLAYER_SLOT_STATE_PLAYING and GetPlayerController(enumPlayer) == MAP_CONTROL_USER then
    
        if ("-first person") != "" then // INLINED!!
            call TriggerRegisterPlayerChatEvent(gg_trg_Camera_System, enumPlayer, ("-first person"), true) // INLINED!!
            call TriggerRegisterPlayerChatEvent(gg_trg_Camera_System, enumPlayer, ("-third person"), true) // INLINED!!
            call TriggerRegisterPlayerChatEvent(gg_trg_Camera_System, enumPlayer, ("-fixed camera"), true) // INLINED!!
            call TriggerRegisterPlayerChatEvent(gg_trg_Camera_System, enumPlayer, ("-free camera"), true) // INLINED!!
            call TriggerRegisterPlayerChatEvent(gg_trg_Camera_System, enumPlayer, ("-help camera"), true) // INLINED!!
            call TriggerRegisterPlayerChatEvent(gg_trg_Camera_System, enumPlayer, ("-sensitivity "), false) // INLINED!!
        endif
        call TriggerRegisterPlayerMouseEventBJ(ThirdPersonCamera___triggerMouse, enumPlayer, bj_MOUSEEVENTTYPE_MOVE)
        
        call TriggerRegisterPlayerEvent(ThirdPersonCamera___triggerLeft, enumPlayer, EVENT_PLAYER_ARROW_LEFT_DOWN)
        call TriggerRegisterPlayerEvent(ThirdPersonCamera___triggerLeft, enumPlayer, EVENT_PLAYER_ARROW_LEFT_UP)
    
        call TriggerRegisterPlayerEvent(ThirdPersonCamera___triggerRight, enumPlayer, EVENT_PLAYER_ARROW_RIGHT_DOWN)
        call TriggerRegisterPlayerEvent(ThirdPersonCamera___triggerRight, enumPlayer, EVENT_PLAYER_ARROW_RIGHT_UP)
        
        call TriggerRegisterPlayerEvent(ThirdPersonCamera___triggerEsc, enumPlayer, EVENT_PLAYER_END_CINEMATIC)
        
        call TriggerRegisterPlayerEvent(ThirdPersonCamera___triggerCleanup, enumPlayer, EVENT_PLAYER_LEAVE)
        
        set u=CreateUnit((Player(bj_PLAYER_NEUTRAL_EXTRA)), ('nvil'), (0.0), (0.0), bj_UNIT_FACING) // INLINED!!
        call UnitAddAbility(u, 'Aloc')
        call SetUnitInvulnerable(u, true)
        call ShowUnit(u, false)
        call SetUnitTurnSpeed(u, 3.)
        set ThirdPersonCamera___focusUnits[(GetPlayerId(enumPlayer) ) + 2 * bj_MAX_PLAYERS]=( u) // INLINED!!
        set ThirdPersonCamera___focusUnits[(GetPlayerId(enumPlayer) ) + bj_MAX_PLAYERS]=( u) // INLINED!!
        call SaveReal(ThirdPersonCamera___data, (GetPlayerId(enumPlayer) ), (3), (( 39.0)*1.0)) // INLINED!!
        
        call Camera_SetHelpSeen(GetPlayerId(enumPlayer) , false)
        
        set u=null
    endif
endfunction

// Cleanup trigger
function Camera_Trig_PlayerLeaves takes nothing returns nothing
    call Camera_ClearPlayerData(GetTriggerPlayer())
endfunction

function InitTrig_Camera_System takes nothing returns nothing
    local timer t= CreateTimer()
    call TimerStart(t, 0.03, true, function Camera_TimerFunc)
    
    set ThirdPersonCamera___data=InitHashtable()
    
    if ("-first person") != "" then // INLINED!!
        set gg_trg_Camera_System=CreateTrigger()
        call TriggerAddAction(gg_trg_Camera_System, function Trig_Commands_First_Person_Actions)
    endif

    set ThirdPersonCamera___triggerLeft=CreateTrigger()
    set ThirdPersonCamera___triggerRight=CreateTrigger()
    call TriggerAddAction(ThirdPersonCamera___triggerLeft, function Camera_Trig_LeftArrow_Actions)
    call TriggerAddAction(ThirdPersonCamera___triggerRight, function Camera_Trig_RightArrow_Actions)
    
    set ThirdPersonCamera___triggerEsc=CreateTrigger()
    call TriggerAddAction(ThirdPersonCamera___triggerEsc, function Camera_Trig_Esc_Actions)
    
    set ThirdPersonCamera___triggerMouse=CreateTrigger()
    call TriggerAddAction(ThirdPersonCamera___triggerMouse, function Trig_CameraMouse_Actions)
    
    set ThirdPersonCamera___triggerCleanup=CreateTrigger()
    call TriggerAddAction(ThirdPersonCamera___triggerCleanup, function Camera_Trig_PlayerLeaves)
    
    call ForForce(GetPlayersAll(), function Camera_ForForce_Init)
    
    //call CreateQuestBJ( bj_QUESTTYPE_REQ_DISCOVERED, "TRIGSTR_5472", "TRIGSTR_5473", "ReplaceableTextures\\CommandButtons\\BTNAmbush.blp" )
endfunction
//===========================
// END OF FIRST PERSON CAMERA SYSTEM
//===========================================================================

//library ThirdPersonCamera ends
//library WorldBounds:
	
		
		
		
		
//Implemented from module WorldBounds___WorldBoundInit:
  function s__WorldBounds_WorldBounds___WorldBoundInit___onInit takes nothing returns nothing
			set s__WorldBounds_world=GetWorldBounds()
			
			set s__WorldBounds_maxX=R2I(GetRectMaxX(s__WorldBounds_world))
			set s__WorldBounds_maxY=R2I(GetRectMaxY(s__WorldBounds_world))
			set s__WorldBounds_minX=R2I(GetRectMinX(s__WorldBounds_world))
			set s__WorldBounds_minY=R2I(GetRectMinY(s__WorldBounds_world))
			
			set s__WorldBounds_centerX=R2I(( s__WorldBounds_maxX + s__WorldBounds_minX ) / 2)
			set s__WorldBounds_centerY=R2I(( s__WorldBounds_minY + s__WorldBounds_maxY ) / 2)
			
			set s__WorldBounds_worldRegion=CreateRegion()
			
			call RegionAddRect(s__WorldBounds_worldRegion, s__WorldBounds_world)
  endfunction

//library WorldBounds ends
//library ConstTable:
// By Guhun
   
   
    function s__ConstTable___handles_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___handles_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
   
    function s__ConstTable___agents__setindex takes integer this,integer key,agent value returns nothing
        call SaveAgentHandle(ConstTable___ht, this, key, value)
    endfunction
   
//Run these textmacros to include the entire hashtable API as wrappers.
//Don't be intimidated by the number of macros - Vexorian's map optimizer is
//supposed to kill functions which inline (all of these functions inline).
//textmacro instance: NEW_ARRAY_BASIC("Real", "Real", "real")
    function s__ConstTable___reals__getindex takes integer this,integer key returns real
        return LoadReal(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___reals__setindex takes integer this,integer key,real value returns nothing
        call SaveReal(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___reals_has takes integer this,integer key returns boolean
        return HaveSavedReal(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___reals_remove takes integer this,integer key returns nothing
        call RemoveSavedReal(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Real", "Real", "real")
//textmacro instance: NEW_ARRAY_BASIC("Boolean", "Boolean", "boolean")
    function s__ConstTable___booleans__getindex takes integer this,integer key returns boolean
        return LoadBoolean(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___booleans__setindex takes integer this,integer key,boolean value returns nothing
        call SaveBoolean(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___booleans_has takes integer this,integer key returns boolean
        return HaveSavedBoolean(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___booleans_remove takes integer this,integer key returns nothing
        call RemoveSavedBoolean(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Boolean", "Boolean", "boolean")
//textmacro instance: NEW_ARRAY_BASIC("String", "Str", "string")
    function s__ConstTable___strings__getindex takes integer this,integer key returns string
        return LoadStr(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___strings__setindex takes integer this,integer key,string value returns nothing
        call SaveStr(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___strings_has takes integer this,integer key returns boolean
        return HaveSavedString(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___strings_remove takes integer this,integer key returns nothing
        call RemoveSavedString(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("String", "Str", "string")
//New textmacro to allow table.integer[] syntax for compatibility with textmacros that might desire it.
//textmacro instance: NEW_ARRAY_BASIC("Integer", "Integer", "integer")
    function s__ConstTable___integers__getindex takes integer this,integer key returns integer
        return LoadInteger(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___integers__setindex takes integer this,integer key,integer value returns nothing
        call SaveInteger(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___integers_has takes integer this,integer key returns boolean
        return HaveSavedInteger(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___integers_remove takes integer this,integer key returns nothing
        call RemoveSavedInteger(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Integer", "Integer", "integer")
   
//textmacro instance: NEW_ARRAY("Player", "player")
    function s__ConstTable___players__getindex takes integer this,integer key returns player
        return LoadPlayerHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___players__setindex takes integer this,integer key,player value returns nothing
        call SavePlayerHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___players_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___players_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Player", "player")
//textmacro instance: NEW_ARRAY("Widget", "widget")
    function s__ConstTable___widgets__getindex takes integer this,integer key returns widget
        return LoadWidgetHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___widgets__setindex takes integer this,integer key,widget value returns nothing
        call SaveWidgetHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___widgets_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___widgets_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Widget", "widget")
//textmacro instance: NEW_ARRAY("Destructable", "destructable")
    function s__ConstTable___destructables__getindex takes integer this,integer key returns destructable
        return LoadDestructableHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___destructables__setindex takes integer this,integer key,destructable value returns nothing
        call SaveDestructableHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___destructables_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___destructables_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Destructable", "destructable")
//textmacro instance: NEW_ARRAY("Item", "item")
    function s__ConstTable___items__getindex takes integer this,integer key returns item
        return LoadItemHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___items__setindex takes integer this,integer key,item value returns nothing
        call SaveItemHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___items_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___items_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Item", "item")
//textmacro instance: NEW_ARRAY("Unit", "unit")
    function s__ConstTable___units__getindex takes integer this,integer key returns unit
        return LoadUnitHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___units__setindex takes integer this,integer key,unit value returns nothing
        call SaveUnitHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___units_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___units_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Unit", "unit")
//textmacro instance: NEW_ARRAY("Ability", "ability")
    function s__ConstTable___abilitys__getindex takes integer this,integer key returns ability
        return LoadAbilityHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___abilitys__setindex takes integer this,integer key,ability value returns nothing
        call SaveAbilityHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___abilitys_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___abilitys_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Ability", "ability")
//textmacro instance: NEW_ARRAY("Timer", "timer")
    function s__ConstTable___timers__getindex takes integer this,integer key returns timer
        return LoadTimerHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___timers__setindex takes integer this,integer key,timer value returns nothing
        call SaveTimerHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___timers_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___timers_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Timer", "timer")
//textmacro instance: NEW_ARRAY("Trigger", "trigger")
    function s__ConstTable___triggers__getindex takes integer this,integer key returns trigger
        return LoadTriggerHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___triggers__setindex takes integer this,integer key,trigger value returns nothing
        call SaveTriggerHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___triggers_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___triggers_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Trigger", "trigger")
//textmacro instance: NEW_ARRAY("TriggerCondition", "triggercondition")
    function s__ConstTable___triggerconditions__getindex takes integer this,integer key returns triggercondition
        return LoadTriggerConditionHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___triggerconditions__setindex takes integer this,integer key,triggercondition value returns nothing
        call SaveTriggerConditionHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___triggerconditions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___triggerconditions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TriggerCondition", "triggercondition")
//textmacro instance: NEW_ARRAY("TriggerAction", "triggeraction")
    function s__ConstTable___triggeractions__getindex takes integer this,integer key returns triggeraction
        return LoadTriggerActionHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___triggeractions__setindex takes integer this,integer key,triggeraction value returns nothing
        call SaveTriggerActionHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___triggeractions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___triggeractions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TriggerAction", "triggeraction")
//textmacro instance: NEW_ARRAY("TriggerEvent", "event")
    function s__ConstTable___events__getindex takes integer this,integer key returns event
        return LoadTriggerEventHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___events__setindex takes integer this,integer key,event value returns nothing
        call SaveTriggerEventHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___events_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___events_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TriggerEvent", "event")
//textmacro instance: NEW_ARRAY("Force", "force")
    function s__ConstTable___forces__getindex takes integer this,integer key returns force
        return LoadForceHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___forces__setindex takes integer this,integer key,force value returns nothing
        call SaveForceHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___forces_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___forces_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Force", "force")
//textmacro instance: NEW_ARRAY("Group", "group")
    function s__ConstTable___groups__getindex takes integer this,integer key returns group
        return LoadGroupHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___groups__setindex takes integer this,integer key,group value returns nothing
        call SaveGroupHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___groups_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___groups_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Group", "group")
//textmacro instance: NEW_ARRAY("Location", "location")
    function s__ConstTable___locations__getindex takes integer this,integer key returns location
        return LoadLocationHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___locations__setindex takes integer this,integer key,location value returns nothing
        call SaveLocationHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___locations_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___locations_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Location", "location")
//textmacro instance: NEW_ARRAY("Rect", "rect")
    function s__ConstTable___rects__getindex takes integer this,integer key returns rect
        return LoadRectHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___rects__setindex takes integer this,integer key,rect value returns nothing
        call SaveRectHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___rects_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___rects_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Rect", "rect")
//textmacro instance: NEW_ARRAY("BooleanExpr", "boolexpr")
    function s__ConstTable___boolexprs__getindex takes integer this,integer key returns boolexpr
        return LoadBooleanExprHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___boolexprs__setindex takes integer this,integer key,boolexpr value returns nothing
        call SaveBooleanExprHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___boolexprs_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___boolexprs_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("BooleanExpr", "boolexpr")
//textmacro instance: NEW_ARRAY("Sound", "sound")
    function s__ConstTable___sounds__getindex takes integer this,integer key returns sound
        return LoadSoundHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___sounds__setindex takes integer this,integer key,sound value returns nothing
        call SaveSoundHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___sounds_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___sounds_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Sound", "sound")
//textmacro instance: NEW_ARRAY("Effect", "effect")
    function s__ConstTable___effects__getindex takes integer this,integer key returns effect
        return LoadEffectHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___effects__setindex takes integer this,integer key,effect value returns nothing
        call SaveEffectHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___effects_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___effects_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Effect", "effect")
//textmacro instance: NEW_ARRAY("UnitPool", "unitpool")
    function s__ConstTable___unitpools__getindex takes integer this,integer key returns unitpool
        return LoadUnitPoolHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___unitpools__setindex takes integer this,integer key,unitpool value returns nothing
        call SaveUnitPoolHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___unitpools_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___unitpools_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("UnitPool", "unitpool")
//textmacro instance: NEW_ARRAY("ItemPool", "itempool")
    function s__ConstTable___itempools__getindex takes integer this,integer key returns itempool
        return LoadItemPoolHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___itempools__setindex takes integer this,integer key,itempool value returns nothing
        call SaveItemPoolHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___itempools_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___itempools_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("ItemPool", "itempool")
//textmacro instance: NEW_ARRAY("Quest", "quest")
    function s__ConstTable___quests__getindex takes integer this,integer key returns quest
        return LoadQuestHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___quests__setindex takes integer this,integer key,quest value returns nothing
        call SaveQuestHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___quests_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___quests_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Quest", "quest")
//textmacro instance: NEW_ARRAY("QuestItem", "questitem")
    function s__ConstTable___questitems__getindex takes integer this,integer key returns questitem
        return LoadQuestItemHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___questitems__setindex takes integer this,integer key,questitem value returns nothing
        call SaveQuestItemHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___questitems_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___questitems_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("QuestItem", "questitem")
//textmacro instance: NEW_ARRAY("DefeatCondition", "defeatcondition")
    function s__ConstTable___defeatconditions__getindex takes integer this,integer key returns defeatcondition
        return LoadDefeatConditionHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___defeatconditions__setindex takes integer this,integer key,defeatcondition value returns nothing
        call SaveDefeatConditionHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___defeatconditions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___defeatconditions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("DefeatCondition", "defeatcondition")
//textmacro instance: NEW_ARRAY("TimerDialog", "timerdialog")
    function s__ConstTable___timerdialogs__getindex takes integer this,integer key returns timerdialog
        return LoadTimerDialogHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___timerdialogs__setindex takes integer this,integer key,timerdialog value returns nothing
        call SaveTimerDialogHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___timerdialogs_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___timerdialogs_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TimerDialog", "timerdialog")
//textmacro instance: NEW_ARRAY("Leaderboard", "leaderboard")
    function s__ConstTable___leaderboards__getindex takes integer this,integer key returns leaderboard
        return LoadLeaderboardHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___leaderboards__setindex takes integer this,integer key,leaderboard value returns nothing
        call SaveLeaderboardHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___leaderboards_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___leaderboards_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Leaderboard", "leaderboard")
//textmacro instance: NEW_ARRAY("Multiboard", "multiboard")
    function s__ConstTable___multiboards__getindex takes integer this,integer key returns multiboard
        return LoadMultiboardHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___multiboards__setindex takes integer this,integer key,multiboard value returns nothing
        call SaveMultiboardHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___multiboards_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___multiboards_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Multiboard", "multiboard")
//textmacro instance: NEW_ARRAY("MultiboardItem", "multiboarditem")
    function s__ConstTable___multiboarditems__getindex takes integer this,integer key returns multiboarditem
        return LoadMultiboardItemHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___multiboarditems__setindex takes integer this,integer key,multiboarditem value returns nothing
        call SaveMultiboardItemHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___multiboarditems_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___multiboarditems_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("MultiboardItem", "multiboarditem")
//textmacro instance: NEW_ARRAY("Trackable", "trackable")
    function s__ConstTable___trackables__getindex takes integer this,integer key returns trackable
        return LoadTrackableHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___trackables__setindex takes integer this,integer key,trackable value returns nothing
        call SaveTrackableHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___trackables_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___trackables_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Trackable", "trackable")
//textmacro instance: NEW_ARRAY("Dialog", "dialog")
    function s__ConstTable___dialogs__getindex takes integer this,integer key returns dialog
        return LoadDialogHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___dialogs__setindex takes integer this,integer key,dialog value returns nothing
        call SaveDialogHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___dialogs_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___dialogs_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Dialog", "dialog")
//textmacro instance: NEW_ARRAY("Button", "button")
    function s__ConstTable___buttons__getindex takes integer this,integer key returns button
        return LoadButtonHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___buttons__setindex takes integer this,integer key,button value returns nothing
        call SaveButtonHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___buttons_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___buttons_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Button", "button")
//textmacro instance: NEW_ARRAY("TextTag", "texttag")
    function s__ConstTable___texttags__getindex takes integer this,integer key returns texttag
        return LoadTextTagHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___texttags__setindex takes integer this,integer key,texttag value returns nothing
        call SaveTextTagHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___texttags_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___texttags_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TextTag", "texttag")
//textmacro instance: NEW_ARRAY("Lightning", "lightning")
    function s__ConstTable___lightnings__getindex takes integer this,integer key returns lightning
        return LoadLightningHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___lightnings__setindex takes integer this,integer key,lightning value returns nothing
        call SaveLightningHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___lightnings_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___lightnings_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Lightning", "lightning")
//textmacro instance: NEW_ARRAY("Image", "image")
    function s__ConstTable___images__getindex takes integer this,integer key returns image
        return LoadImageHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___images__setindex takes integer this,integer key,image value returns nothing
        call SaveImageHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___images_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___images_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Image", "image")
//textmacro instance: NEW_ARRAY("Ubersplat", "ubersplat")
    function s__ConstTable___ubersplats__getindex takes integer this,integer key returns ubersplat
        return LoadUbersplatHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___ubersplats__setindex takes integer this,integer key,ubersplat value returns nothing
        call SaveUbersplatHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___ubersplats_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___ubersplats_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Ubersplat", "ubersplat")
//textmacro instance: NEW_ARRAY("Region", "region")
    function s__ConstTable___regions__getindex takes integer this,integer key returns region
        return LoadRegionHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___regions__setindex takes integer this,integer key,region value returns nothing
        call SaveRegionHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___regions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___regions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Region", "region")
//textmacro instance: NEW_ARRAY("FogState", "fogstate")
    function s__ConstTable___fogstates__getindex takes integer this,integer key returns fogstate
        return LoadFogStateHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___fogstates__setindex takes integer this,integer key,fogstate value returns nothing
        call SaveFogStateHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___fogstates_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___fogstates_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("FogState", "fogstate")
//textmacro instance: NEW_ARRAY("FogModifier", "fogmodifier")
    function s__ConstTable___fogmodifiers__getindex takes integer this,integer key returns fogmodifier
        return LoadFogModifierHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___fogmodifiers__setindex takes integer this,integer key,fogmodifier value returns nothing
        call SaveFogModifierHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___fogmodifiers_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___fogmodifiers_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("FogModifier", "fogmodifier")
//textmacro instance: NEW_ARRAY("Hashtable", "hashtable")
    function s__ConstTable___hashtables__getindex takes integer this,integer key returns hashtable
        return LoadHashtableHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___hashtables__setindex takes integer this,integer key,hashtable value returns nothing
        call SaveHashtableHandle(ConstTable___ht, this, key, value)
    endfunction
    function s__ConstTable___hashtables_has takes integer this,integer key returns boolean
        return HaveSavedHandle(ConstTable___ht, this, key)
    endfunction
    function s__ConstTable___hashtables_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(ConstTable___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Hashtable", "hashtable")
   
   
    // Implement modules for intuitive syntax (tb.handle; tb.unit; etc.)
//Implemented from module ConstTable___realm:
    function s__ConstTable__get_real takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___integerm:
    function s__ConstTable__get_integer takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___booleanm:
    function s__ConstTable__get_boolean takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___stringm:
    function s__ConstTable__get_string takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___playerm:
    function s__ConstTable__get_player takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___widgetm:
    function s__ConstTable__get_widget takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___destructablem:
    function s__ConstTable__get_destructable takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___itemm:
    function s__ConstTable__get_item takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___unitm:
    function s__ConstTable__get_unit takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___abilitym:
    function s__ConstTable__get_ability takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___timerm:
    function s__ConstTable__get_timer takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___triggerm:
    function s__ConstTable__get_trigger takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___triggerconditionm:
    function s__ConstTable__get_triggercondition takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___triggeractionm:
    function s__ConstTable__get_triggeraction takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___eventm:
    function s__ConstTable__get_event takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___forcem:
    function s__ConstTable__get_force takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___groupm:
    function s__ConstTable__get_group takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___locationm:
    function s__ConstTable__get_location takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___rectm:
    function s__ConstTable__get_rect takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___boolexprm:
    function s__ConstTable__get_boolexpr takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___soundm:
    function s__ConstTable__get_sound takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___effectm:
    function s__ConstTable__get_effect takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___unitpoolm:
    function s__ConstTable__get_unitpool takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___itempoolm:
    function s__ConstTable__get_itempool takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___questm:
    function s__ConstTable__get_quest takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___questitemm:
    function s__ConstTable__get_questitem takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___defeatconditionm:
    function s__ConstTable__get_defeatcondition takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___timerdialogm:
    function s__ConstTable__get_timerdialog takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___leaderboardm:
    function s__ConstTable__get_leaderboard takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___multiboardm:
    function s__ConstTable__get_multiboard takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___multiboarditemm:
    function s__ConstTable__get_multiboarditem takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___trackablem:
    function s__ConstTable__get_trackable takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___dialogm:
    function s__ConstTable__get_dialog takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___buttonm:
    function s__ConstTable__get_button takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___texttagm:
    function s__ConstTable__get_texttag takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___lightningm:
    function s__ConstTable__get_lightning takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___imagem:
    function s__ConstTable__get_image takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___ubersplatm:
    function s__ConstTable__get_ubersplat takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___regionm:
    function s__ConstTable__get_region takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___fogstatem:
    function s__ConstTable__get_fogstate takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___fogmodifierm:
    function s__ConstTable__get_fogmodifier takes integer this returns integer
        return this
    endfunction
//Implemented from module ConstTable___hashtablem:
    function s__ConstTable__get_hashtable takes integer this returns integer
        return this
    endfunction
   
    function s__ConstTable__get_handle takes integer this returns integer
        return this
    endfunction
   
    function s__ConstTable__get_agent takes integer this returns integer
        return this
    endfunction
   
    function s__ConstTable__getindex takes integer this,integer key returns integer
        return LoadInteger(ConstTable___ht, this, key) //return this.integer[key]
    endfunction
   
    function s__ConstTable__setindex takes integer this,integer key,integer tb returns nothing
        call SaveInteger(ConstTable___ht, this, key, tb) //set this.integer[key] = tb
    endfunction
   
    function s__ConstTable_has takes integer this,integer key returns boolean
        return HaveSavedInteger(ConstTable___ht, this, key) //return this.integer.has(key)
    endfunction
   
    function s__ConstTable_remove takes integer this,integer key returns nothing
        call RemoveSavedInteger(ConstTable___ht, this, key) //call this.integer.remove(key)
    endfunction
   
    function s__ConstTable_flush takes integer this returns nothing
        call FlushChildHashtable(ConstTable___ht, this)
    endfunction


    //Enables myHash[parentKey][childKey] syntax.
    //Basically, it creates a Table in the place of the parent key if
    //it didn't already get created earlier.
    function s__ConstHashTable__getindex takes integer this,integer index returns integer
        local integer t= (LoadInteger(ConstTable___ht, ((this)), (index))) // INLINED!!
        if t == 0 then
            set t=s__Table_create()
            call SaveInteger(ConstTable___ht, ((this)), (index), ( t)) // INLINED!!
        endif
        return t
    endfunction

    //You need to call this on each parent key that you used if you
    //intend to destroy the HashTable or simply no longer need that key.
    function s__ConstHashTable_remove takes integer this,integer index returns nothing
        local integer t= (LoadInteger(ConstTable___ht, ((this)), (index))) // INLINED!!
        if t != 0 then
            call s__Table_destroy(t)
            call RemoveSavedInteger(ConstTable___ht, ((this)), (index)) // INLINED!!
        endif
    endfunction
    
    // Wrapper that conforms to hashtable api
    function s__ConstHashTable_flushChild takes integer this,integer index returns nothing
        call s__ConstHashTable_remove(this,index)
    endfunction
   
    function s__ConstHashTable_has takes integer this,integer index returns boolean
        return (HaveSavedInteger(ConstTable___ht, ((this)), (index))) // INLINED!!
    endfunction

//library ConstTable ends
//library DummyRecycler:

 
    //Every time a new dummy unit is retrieved, it will apply this resets
    //If it is redundant/you dont need it, remove it.
// =============================================================== //
// ==================== END CONFIGURATION ======================== //
// =============================================================== //
 
 
 



















 
 
//Implemented from module DummyRecycler___M:
     




     
        function s__DummyRecycler___S_DummyRecycler___M___onInit takes nothing returns nothing
            local real add= 360.0 / DummyRecycler___ANGLES_COUNT
            local real a= 0
            local integer this= DummyRecycler___ANGLES_COUNT
            local integer head= 0
            local integer cHead= JASS_MAX_ARRAY_SIZE - 1
            local integer i= R2I(DummyRecycler___MAX_DUMMY_COUNT / DummyRecycler___ANGLES_COUNT + 0.5)
            set DummyRecycler___upper=DummyRecycler___STORED_UNIT_COUNT
            set DummyRecycler___lower=DummyRecycler___STORED_UNIT_COUNT

                set s__DummyRecycler___S_tb=s__Table_create()

            //Initialize countHeads
            loop
                exitwhen i < 0
                set DummyRecycler___countNext[cHead]=cHead
                set DummyRecycler___countPrev[cHead]=cHead
                set DummyRecycler___countHead[i]=cHead
                set cHead=cHead - 1
                set i=i - 1
            endloop
            set cHead=DummyRecycler___countHead[DummyRecycler___STORED_UNIT_COUNT] //All heads will be inserted here initially
            //Create the Dummy units
            loop
                exitwhen a >= 360
                //Initialize head
                set DummyRecycler___next[head]=head
                set DummyRecycler___prev[head]=head
                set DummyRecycler___count[head]=DummyRecycler___STORED_UNIT_COUNT
                set DummyRecycler___angle[head]=a
                //Insert head in the Count List
                set DummyRecycler___countNext[head]=cHead
                set DummyRecycler___countPrev[head]=DummyRecycler___countPrev[cHead]
                set DummyRecycler___countNext[DummyRecycler___countPrev[head]]=head
                set DummyRecycler___countPrev[DummyRecycler___countNext[head]]=head
                set i=0
                loop
                    exitwhen i >= DummyRecycler___STORED_UNIT_COUNT
                    //Queued Linked List
                    set DummyRecycler___next[this]=head
                    set DummyRecycler___prev[this]=DummyRecycler___prev[head]
                    set DummyRecycler___next[DummyRecycler___prev[this]]=this
                    set DummyRecycler___prev[DummyRecycler___next[this]]=this


                            set DummyRecycler___dummy[this]=CreateUnit(DummyRecycler___OWNER, DummyRecycler___DUMMY_ID, s__WorldBounds_maxX, s__WorldBounds_maxY, a)






                    call PauseUnit(DummyRecycler___dummy[this], true)

                        call SaveInteger(Table___ht, (s__DummyRecycler___S_tb), (GetHandleId(DummyRecycler___dummy[this])), ( this)) // INLINED!!



                    set this=this + 1
                    set i=i + 1
                endloop
                set head=head + 1
                set a=a + add
            endloop
            set DummyRecycler___lastInstance=this
        endfunction
     
 
    function DummyRecycler___GetHead takes integer facing returns integer
        if facing < 0 or facing >= 360 then
            set facing=facing - ( facing / 360 ) * 360
            if facing < 0 then
                set facing=facing + 360
            endif
        endif
        return R2I(( facing * DummyRecycler___ANGLES_COUNT / 360.0 ))
    endfunction
 
    function ShowDummy takes unit u,boolean flag returns nothing
        if IsUnitHidden(u) == flag then
            call ShowUnit(u, flag)
            if flag and GetUnitTypeId(u) == DummyRecycler___DUMMY_ID then
                call UnitRemoveAbility(u, 'Aloc')
                call UnitAddAbility(u, 'Aloc')
            endif
        endif
    endfunction
 
    function GetRecycledDummy takes real x,real y,real z,real facing returns unit
        local integer head= DummyRecycler___GetHead(R2I(facing + DummyRecycler___FACING_OFFSET))
        local integer this= DummyRecycler___next[head]
        local integer cHead
     
        //If there are Dummy Units in the Queue List already facing close to the appropriate angle
        if this != head and RAbsBJ(GetUnitFacing(DummyRecycler___dummy[this]) - DummyRecycler___angle[head]) <= DummyRecycler___ANGLE_TOLERANCE then
            //Remove from the Queue List
            set DummyRecycler___next[DummyRecycler___prev[this]]=DummyRecycler___next[this]
            set DummyRecycler___prev[DummyRecycler___next[this]]=DummyRecycler___prev[this]
            //For double free protection
            set DummyRecycler___next[this]=- 1
            //Unit Properties
            set bj_lastCreatedUnit=DummyRecycler___dummy[this]
            call SetUnitX(bj_lastCreatedUnit, x)
            call SetUnitY(bj_lastCreatedUnit, y)
            call SetUnitFacing(bj_lastCreatedUnit, facing)
            call SetUnitFlyHeight(bj_lastCreatedUnit, z, 0)
//textmacro instance: DUMMY_UNIT_RESET()
        call SetUnitScale(bj_lastCreatedUnit, 1, 0, 0)
        call SetUnitVertexColor(bj_lastCreatedUnit, 255, 255, 255, 255)
        call SetUnitAnimationByIndex(bj_lastCreatedUnit, 90)
        call ShowDummy(bj_lastCreatedUnit , true)
//end of: DUMMY_UNIT_RESET()
            //Update Count and Bounds
            set DummyRecycler___count[head]=DummyRecycler___count[head] - 1
         
            //------------------------------------------------
            //                 Unit Sharing
            //------------------------------------------------
            if DummyRecycler___count[head] < DummyRecycler___BORROW_REQUEST and DummyRecycler___count[DummyRecycler___countNext[DummyRecycler___countHead[DummyRecycler___upper]]] > DummyRecycler___count[head] then
                set DummyRecycler___count[head]=DummyRecycler___count[head] + 1
                set this=DummyRecycler___next[DummyRecycler___countNext[DummyRecycler___countHead[DummyRecycler___upper]]]
                call SetUnitFacing(DummyRecycler___dummy[this], DummyRecycler___angle[head])
                //Remove
                set DummyRecycler___next[DummyRecycler___prev[this]]=DummyRecycler___next[this]
                set DummyRecycler___prev[DummyRecycler___next[this]]=DummyRecycler___prev[this]
                //Add to the Current List
                set DummyRecycler___next[this]=head
                set DummyRecycler___prev[this]=DummyRecycler___prev[head]
                set DummyRecycler___next[DummyRecycler___prev[this]]=this
                set DummyRecycler___prev[DummyRecycler___next[this]]=this
                set head=DummyRecycler___countNext[DummyRecycler___countHead[DummyRecycler___upper]]
                set DummyRecycler___count[head]=DummyRecycler___count[head] - 1
            endif
         
            //---------------------------
            //Update Count Lists
            //---------------------------
            //Remove from the current Count List
            set DummyRecycler___countNext[DummyRecycler___countPrev[head]]=DummyRecycler___countNext[head]
            set DummyRecycler___countPrev[DummyRecycler___countNext[head]]=DummyRecycler___countPrev[head]
            //Add to the new Count List
            set cHead=DummyRecycler___countHead[DummyRecycler___count[head]]
            set DummyRecycler___countNext[head]=cHead
            set DummyRecycler___countPrev[head]=DummyRecycler___countPrev[cHead]
            set DummyRecycler___countNext[DummyRecycler___countPrev[head]]=head
            set DummyRecycler___countPrev[DummyRecycler___countNext[head]]=head
         
            //---------------------------
            //  Update Bounds
            //---------------------------
            set cHead=DummyRecycler___countHead[DummyRecycler___upper]
            if DummyRecycler___countNext[cHead] == cHead then
                set DummyRecycler___upper=DummyRecycler___upper - 1
            endif
            if DummyRecycler___count[head] < DummyRecycler___lower then
                set DummyRecycler___lower=DummyRecycler___count[head]
            endif
        else
            set bj_lastCreatedUnit=CreateUnit(DummyRecycler___OWNER, DummyRecycler___DUMMY_ID, x, y, facing)
            call PauseUnit(bj_lastCreatedUnit, true)
            call SetUnitFlyHeight(bj_lastCreatedUnit, z, 0)
            if DummyRecycler___dummyCount < DummyRecycler___MAX_DUMMY_COUNT then
                set this=DummyRecycler___lastInstance
                //For double free protection
                set DummyRecycler___next[this]=- 1
                set DummyRecycler___dummy[this]=bj_lastCreatedUnit

                    call SaveInteger(Table___ht, (s__DummyRecycler___S_tb), (GetHandleId(bj_lastCreatedUnit)), ( this)) // INLINED!!



                set DummyRecycler___lastInstance=DummyRecycler___lastInstance + 1
            endif
            set DummyRecycler___dummyCount=DummyRecycler___dummyCount + 1
        endif

        return bj_lastCreatedUnit
    endfunction
 
    function RecycleDummy takes unit u returns nothing

            local integer this= (LoadInteger(Table___ht, (s__DummyRecycler___S_tb), (GetHandleId(u)))) // INLINED!!



        local integer head
        local integer cHead
     
        //If the unit is a legit Dummy Unit
        if this > 0 and DummyRecycler___next[this] == - 1 then
            //Find where to insert based on the list having the least number of units
            set head=DummyRecycler___countNext[DummyRecycler___countHead[DummyRecycler___lower]]
            set DummyRecycler___next[this]=head
            set DummyRecycler___prev[this]=DummyRecycler___prev[head]
            set DummyRecycler___next[DummyRecycler___prev[this]]=this
            set DummyRecycler___prev[DummyRecycler___next[this]]=this
            //Update Status
            call SetUnitFacing(u, DummyRecycler___angle[head])
            call PauseUnit(u, true)
            call SetUnitOwner(u, DummyRecycler___OWNER, false)


                    call SetUnitX(u, s__WorldBounds_maxX)
                    call SetUnitY(u, s__WorldBounds_maxY)








            set DummyRecycler___count[head]=DummyRecycler___count[head] + 1
         
            //---------------------------
            //    Update Count Lists
            //---------------------------
            //Remove
            set DummyRecycler___countNext[DummyRecycler___countPrev[head]]=DummyRecycler___countNext[head]
            set DummyRecycler___countPrev[DummyRecycler___countNext[head]]=DummyRecycler___countPrev[head]
            //Add to the new Count List
            set cHead=DummyRecycler___countHead[DummyRecycler___count[head]]
            set DummyRecycler___countNext[head]=cHead
            set DummyRecycler___countPrev[head]=DummyRecycler___countPrev[cHead]
            set DummyRecycler___countNext[DummyRecycler___countPrev[head]]=head
            set DummyRecycler___countPrev[DummyRecycler___countNext[head]]=head
         
            //---------------------------
            //  Update Bounds
            //---------------------------
            set cHead=DummyRecycler___countHead[DummyRecycler___lower]
            if DummyRecycler___countNext[cHead] == cHead then
                set DummyRecycler___lower=DummyRecycler___lower + 1
            endif
            if DummyRecycler___count[head] > DummyRecycler___upper then
                set DummyRecycler___upper=DummyRecycler___count[head]
            endif
        elseif this == 0 then
            call RemoveUnit(u)
        endif
     
    endfunction
 
    function DummyRecycler___Expires takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer id= GetHandleId(t)

            call RecycleDummy((LoadUnitHandle(Table___ht, (((s__DummyRecycler___S_tb))), (id)))) // INLINED!!
            call RemoveSavedHandle(Table___ht, (((s__DummyRecycler___S_tb))), (id)) // INLINED!!




        call DestroyTimer(t)
        set t=null
    endfunction

    function DummyAddRecycleTimer takes unit u,real time returns nothing
        local timer t= CreateTimer()

            call SaveUnitHandle(Table___ht, (((s__DummyRecycler___S_tb))), (GetHandleId(t)), ( u)) // INLINED!!



        call TimerStart(t, time, false, function DummyRecycler___Expires)
        set t=null
    endfunction
 
    function GetRecycledDummyAnyAngle takes real x,real y,real z returns unit
        return GetRecycledDummy(x , y , z , DummyRecycler___angle[DummyRecycler___countNext[DummyRecycler___countHead[DummyRecycler___upper]]])
    endfunction
 
    // runtextmacro DUMMY_DEBUG_TOOLS()
 

//library DummyRecycler ends
//library Lists:

// --------------------------------------------------------------
// TODO: INITIALIZATION OF GLOBAL GUI VARIABLES DOES NOT WORK
// --------------------------------------------------------------





function Lists_GetHashtable takes nothing returns hashtable

        return Lists___hashTable



endfunction

//==============
//System Initialization











//==============
//For Each methods





//==============


//library Lists ends
//library MoveSpeedBonus:
//////////////////////////////////////////////////////
// Guhun's Move Speed System v2.0.1
//-----------------------------------

//===================================================
// Simple configuration
//===================================================

function GMSS_GetDefaultMaxSpeed takes nothing returns real

    return 522.0 // Value for Default Maximum Speed

endfunction

function GMSS_GetDefaultMinSpeed takes nothing returns real

    return 0.000 // Value for Default Minimum Speed

endfunction

//===================================================
// Advanced configuration
//===================================================









    function GMSS_GetHashtable takes nothing returns hashtable



//textmacro instance: GMSS_AlternateHashtable()
        return udg_Hashtable_2
//end of: GMSS_AlternateHashtable()

    endfunction


//===================================================
// Data Storage Utilities
//===================================================
//Positive Unit Handle ID > Move Bonus
//Negative Unit Handle ID > Move Multiplier

function MoveSpeedBonus___KEY takes nothing returns integer



//textmacro instance: GMSS_AlternateHashtableKey()
        return 'Amov'
//end of: GMSS_AlternateHashtableKey()

endfunction

function MoveSpeedBonus___GetUnitId takes unit whichUnit returns integer
    return GetHandleId(whichUnit)
endfunction

function MoveSpeedBonus___LoadMultiplier takes integer uId returns real



        return LoadReal((udg_Hashtable_2), ('Amov'), - uId) // INLINED!!
        

endfunction

function MoveSpeedBonus___LoadBonus takes integer uId returns real



        return LoadReal((udg_Hashtable_2), ('Amov'), uId) // INLINED!!

endfunction

function MoveSpeedBonus___RemoveMultiplier takes integer uId returns nothing



        call RemoveSavedReal((udg_Hashtable_2), ('Amov'), - uId) // INLINED!!

endfunction

function MoveSpeedBonus___RemoveBonus takes integer uId returns nothing



        call RemoveSavedReal((udg_Hashtable_2), ('Amov'), uId) // INLINED!!

endfunction

function MoveSpeedBonus___SaveMultiplier takes integer uId,real value returns nothing



        call SaveReal((udg_Hashtable_2), ('Amov'), - uId, value) // INLINED!!

endfunction

function MoveSpeedBonus___SaveBonus takes integer uId,real value returns nothing



        call SaveReal((udg_Hashtable_2), ('Amov'), uId, value) // INLINED!!

endfunction

//===================================================
// API functions
//===================================================

// Adds "amount" to unit speed bonus and sets unit speed between "minSpeed" and "maxSpeed".
function GMSS_UnitAddMoveSpeedEx takes unit whichUnit,real amount,real minSpeed,real maxSpeed returns real
    local integer uId= (GetHandleId((whichUnit))) // INLINED!!
    local real bonus= (LoadReal((udg_Hashtable_2), ('Amov'), (uId))) // INLINED!!
    local real multiplier= (LoadReal((udg_Hashtable_2), ('Amov'), - (uId))) // INLINED!!
    
    //Fix multiplier for when there is no saved value
    if multiplier == 0 then
        set multiplier=1
    endif
    
    if amount != 0 then
        //Set new value and save/clear data as necessary
        set bonus=bonus + amount
        
        if bonus < - 0.99999 and bonus > 0.00001 then //Consider floating point imprecision when clearing Hashtable data
            call RemoveSavedReal((udg_Hashtable_2), ('Amov'), (uId)) // INLINED!!
        else
            call SaveReal((udg_Hashtable_2), ('Amov'), (uId ), (( bonus)*1.0)) // INLINED!!
        endif
    endif
    
    //Set Unit Move Speed (any ability modifiers are applied to this after it is set)
    call SetUnitMoveSpeed(whichUnit, RMaxBJ(minSpeed, RMinBJ(maxSpeed, GetUnitDefaultMoveSpeed(whichUnit) * multiplier + bonus)))
    return bonus
endfunction

// Multiplies unit speed multiplier by "amount" and sets unit speed between "minSpeed" and "maxSpeed".
function GMSS_UnitMultiplyMoveSpeedEx takes unit whichUnit,real amount,real minSpeed,real maxSpeed returns real
    local integer uId= (GetHandleId((whichUnit))) // INLINED!!
    local real bonus= (LoadReal((udg_Hashtable_2), ('Amov'), (uId))) // INLINED!!
    local real multiplier= (LoadReal((udg_Hashtable_2), ('Amov'), - (uId))) // INLINED!!
   
    //Fix multiplier for when there is no saved value
    if multiplier == 0 then
        set multiplier=1
    endif
   
    if amount == 1 or amount <= 0 then
    else
        //Set new value and save/clear data as necessary
        set multiplier=multiplier * amount
        
        if multiplier < 1.00001 and multiplier > 0.99999 then //Consider floating point imprecision when clearing Hashtable data
            call RemoveSavedReal((udg_Hashtable_2), ('Amov'), - (uId)) // INLINED!!
        else
            call SaveReal((udg_Hashtable_2), ('Amov'), - (uId ), (( multiplier)*1.0)) // INLINED!!
        endif
    endif
    
    //Set Unit Move Speed (any ability modifiers are applied to this after it is set)
    call SetUnitMoveSpeed(whichUnit, RMaxBJ(minSpeed, RMinBJ(maxSpeed, GetUnitDefaultMoveSpeed(whichUnit) * multiplier + bonus)))
    return multiplier
endfunction

// Like GMSS_UnitAddMoveSpeedEx, but min and max values are drawn from GMSS_GetDefaultMax(Min)Speed.
function GMSS_UnitAddMoveSpeed takes unit whichUnit,real amount returns real
    return GMSS_UnitAddMoveSpeedEx(whichUnit , amount , (0.000) , (522.0)) // INLINED!!
endfunction

// Like GMSS_UnitMultiplyMoveSpeedEx, but min and max values are drawn from GMSS_GetDefaultMax(Min)Speed.
function GMSS_UnitMultiplyMoveSpeed takes unit whichUnit,real amount returns real
    return GMSS_UnitMultiplyMoveSpeedEx(whichUnit , amount , (0.000) , (522.0)) // INLINED!!
endfunction


function GMSS_UnitGetMoveBonus takes unit whichUnit returns real
    return (LoadReal((udg_Hashtable_2), ('Amov'), ((GetHandleId((whichUnit)))))) // INLINED!!
endfunction


function GMSS_UnitGetMoveMultiplier takes unit whichUnit returns real
    local real multiplier= (LoadReal((udg_Hashtable_2), ('Amov'), - ((GetHandleId((whichUnit)))))) // INLINED!!
    if multiplier == 0 then
        return 1.0
    endif
    return multiplier
endfunction

// Clears all Hashtable or Table data stored for 'whichUnit' in the system.
function GMSS_ClearData takes unit whichUnit returns nothing
    local integer uId= GetHandleId(whichUnit)

    call RemoveSavedReal((udg_Hashtable_2), ('Amov'), (uId)) // INLINED!!
    call RemoveSavedReal((udg_Hashtable_2), ('Amov'), - (uId)) // INLINED!!
endfunction

//===================================================
// Auto Cleanup and Initialization
//===================================================









// This trick is used because you can't have two structs with the same name, even inside an unused static if.






































































//library MoveSpeedBonus ends
//library StructureTileDefinition:
   
    function Get64TileCenterCoordinate takes real a returns real
        if ( a >= 0. ) then
            return R2I(( ( a ) / 64 ) + .5) * 64. - 32
        else
            return R2I(( ( a ) / 64 ) - .5) * 64. + 32
        endif
    endfunction
    
    function Get64TileMin takes real a returns real
        return Get64TileCenterCoordinate(a) - 32.
    endfunction
   
    function Get64TileMax takes real a returns real
        return Get64TileCenterCoordinate(a) + 32.
    endfunction
    
    function AreCoordinatesInSame64Tile takes real a,real b returns boolean
        return Get64TileCenterCoordinate(a) == Get64TileCenterCoordinate(b)
    endfunction
   
    function AreLocationsInSame64Tile takes real x1,real y1,real x2,real y2 returns boolean
        return AreCoordinatesInSame64Tile(x1 , x2) and AreCoordinatesInSame64Tile(y1 , y2)
    endfunction
    
    
   

//library StructureTileDefinition ends
//library TileDefinition:
   
    function GetTileCenterCoordinate takes real a returns real
        if ( a >= 0. ) then
            return R2I(( a / 128 ) + .5) * 128.
        else
            return R2I(( a / 128 ) - .5) * 128.
        endif
    endfunction
   
    function AreCoordinatesInSameTile takes real a,real b returns boolean
        return GetTileCenterCoordinate(a) == GetTileCenterCoordinate(b)
    endfunction
   
    function AreLocationsInSameTile takes real x1,real y1,real x2,real y2 returns boolean
        return AreCoordinatesInSameTile(x1 , x2) and AreCoordinatesInSameTile(y1 , y2)
    endfunction
   
    function GetTileMin takes real a returns real
        return GetTileCenterCoordinate(a) - 64.
    endfunction
   
    function GetTileMax takes real a returns real
        return GetTileCenterCoordinate(a) + 64.
    endfunction
    

       
        function GetTileId takes real x,real y returns integer
            local integer xI= R2I(x - s__WorldBounds_minX + 64) / 128
            local integer yI= R2I(y - s__WorldBounds_minY + 64) / 128

            if ( ( xI < 0 ) or ( xI >= WorldTilesX ) or ( yI < 0 ) or ( yI >= WorldTilesY ) ) then
                return - 1
            endif

            return ( yI * WorldTilesX + xI )
        endfunction

        function GetTileCenterXById takes integer id returns real
            if ( ( id < 0 ) or ( id >= WorldTilesX * WorldTilesY ) ) then
                return 0.
            endif

            return ( s__WorldBounds_minX + ModuloInteger(id, WorldTilesX) * 128. )
        endfunction

        function GetTileCenterYById takes integer id returns real
            if ( ( id < 0 ) or ( id >= WorldTilesX * WorldTilesY ) ) then
                return 0.
            endif

            return ( s__WorldBounds_minY + id / WorldTilesX * 128. )
        endfunction
       
       
//Implemented from module TileDefinition___Init:
            function s__TileDefinition___TileDefinition_TileDefinition___Init___onInit takes nothing returns nothing
                set WorldTilesX=R2I(s__WorldBounds_maxX - s__WorldBounds_minX) / 128 + 1
                set WorldTilesY=R2I(s__WorldBounds_maxY - s__WorldBounds_minY) / 128 + 1
            endfunction

   

//library TileDefinition ends
//library DummyDmg:

function InitializeOnDamageTrigger takes trigger whichTrigger,integer abilityId,code handlerFunc returns nothing
    if udg_Hashtable_2 == null then
        set udg_Hashtable_2=InitHashtable()
    endif
    call TriggerAddCondition(whichTrigger, Condition(handlerFunc))
    call SaveTriggerHandle(udg_Hashtable_2, abilityId, 0, whichTrigger)
endfunction

//===========================================================================
// This system uses a hacky solution in order to keep Hashtable_1 and Hashtable_2 as free as possible:
// It uses the negative parent keys of ArrayAgent_Hashtable!!
// Using negative integers makes it so Dummies are fully compatible with the ArrayAgent system.
constant function DummyDmg_HASHTABLE takes nothing returns hashtable
    return ArrayAgent_hashTable
endfunction

function DummyDmg_GetKey takes unit whichUnit returns integer
    return - GetHandleId(whichUnit)
endfunction
//===========================================================================

function DummyDmg_ApplyTimedLife takes unit whichUnit,real timeout returns nothing
    //call UnitApplyTimedLife(whichUnit, 'BTLF', timeout + GetRandomReal(0,1))
    call DummyAddRecycleTimer(whichUnit , timeout)
endfunction

function DummyDmg_GetCaster takes integer dummyKey returns unit
    return LoadUnitHandle((ArrayAgent_hashTable), dummyKey, 0) // INLINED!!
endfunction

function DummyDmg_GetAbility takes integer dummyKey returns integer
    return LoadInteger((ArrayAgent_hashTable), dummyKey, 1) // INLINED!!
endfunction

function DummyDmg_SetCaster takes integer dummyKey,unit whichUnit returns nothing
    call SaveUnitHandle((ArrayAgent_hashTable), dummyKey, 0, whichUnit) // INLINED!!
endfunction

function DummyDmg_SetAbility takes integer dummyKey,integer abilityId returns nothing
    call SaveInteger((ArrayAgent_hashTable), dummyKey, 1, abilityId) // INLINED!!
endfunction

function DummyDmg_IsDummy takes integer dummyKey returns boolean
    return HaveSavedHandle((ArrayAgent_hashTable), dummyKey, 0) // INLINED!!
endfunction

function DummyDmg_HasTrigger takes integer dummyKey returns boolean
    return HaveSavedInteger((ArrayAgent_hashTable), dummyKey, 1) // INLINED!!
endfunction

function DummyDmg_FlushKey takes integer dummyKey returns nothing
    call FlushChildHashtable((ArrayAgent_hashTable), dummyKey) // INLINED!!
endfunction

function DummyDmg_CreateDummyEx takes unit spellCaster,integer unitId,integer abilityId,real x,real y,real expiration returns unit
    local integer dummyKey
    local unit realSpellCaster= spellCaster
    
    //set spellCaster = CreateUnit(GetOwningPlayer(spellCaster), unitId, x, y, bj_UNIT_FACING)
    set spellCaster=(GetRecycledDummy(((x )*1.0) , (( y )*1.0) , (( 0)*1.0) , DummyRecycler___angle[DummyRecycler___countNext[DummyRecycler___countHead[DummyRecycler___upper]]])) // INLINED!!
    call FlushChildHashtable((ArrayAgent_hashTable), ((- GetHandleId((spellCaster))))) // INLINED!!
    call PauseUnit(spellCaster, false)
    call SetUnitOwner(spellCaster, GetOwningPlayer(realSpellCaster), false)
    
    set dummyKey=(- GetHandleId((spellCaster))) // INLINED!!
    
    call SaveUnitHandle((ArrayAgent_hashTable), (dummyKey ), 0, ( realSpellCaster)) // INLINED!!
    if abilityId > 0 then
        call SaveInteger((ArrayAgent_hashTable), (dummyKey ), 1, ( abilityId)) // INLINED!!
    endif
    
    if expiration >= 0 then
        call DummyAddRecycleTimer((spellCaster ) , (( expiration)*1.0)) // INLINED!!
    endif
    
    set realSpellCaster=null
    return spellCaster // No need to null paramters
endfunction


function DummyDmg_CreateDummyAt takes unit spellCaster,integer abilityId,real x,real y,real expiration returns unit
    return DummyDmg_CreateDummyEx(spellCaster , 'h07Q' , abilityId , x , y , expiration)
endfunction

function DummyDmg_CreateDummy takes unit spellCaster,integer abilityId,real expiration returns unit
    return (DummyDmg_CreateDummyEx((spellCaster ) , 'h07Q' , ( abilityId ) , (( GetUnitX(spellCaster) )*1.0) , (( GetUnitY(spellCaster) )*1.0) , (( expiration)*1.0))) // INLINED!!
endfunction



//library DummyDmg ends
//library GLHS:
////////////////////////////////////////////////////////////////////////////////////////////////////
// System API
/////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
// Configurables
/////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
// System Source (DO NOT TOUCH ANYTHING BELOW THIS LINE)
/////////////////////////////////////////


//==============================================
// Utilities (Private functions)
//==============================================

// If a negative setKey is specified, this will actually set the previous element of the positive setKey
function GLHS___SetNext takes integer setKey,integer data,integer next returns nothing
    call SaveInteger((Lists___hashTable), setKey, data, next) // INLINED!!
endfunction

// If a negative setKey is specified, this will actually set the next element of the positive setKey
function GLHS___SetPrev takes integer setKey,integer data,integer prev returns nothing
    call SaveInteger((Lists___hashTable), - setKey, data, prev) // INLINED!!
endfunction

// These functions clear the link data of an element (used to remove stuff from the list)
function GLHS___ClearNext takes integer setKey,integer data returns nothing
    call RemoveSavedInteger((Lists___hashTable), setKey, data) // INLINED!!
endfunction
    
function GLHS___ClearPrev takes integer setKey,integer data returns nothing
    call RemoveSavedInteger((Lists___hashTable), - setKey, data) // INLINED!!
endfunction

//Returns the next element after the specified "data" in the set
//To get the first element, pass "0" as the parameter "data"
function GLHS___GetNext takes integer setKey,integer data returns integer
    return LoadInteger((Lists___hashTable), setKey, data) // INLINED!!
endfunction

//Returns the element that preceeds the specified "data" in the set
//To get the last element, pass "0" as the parameter "data"
function GLHS___GetPrev takes integer setKey,integer data returns integer
    return LoadInteger((Lists___hashTable), - setKey, data) // INLINED!!
endfunction

//Adds an element to a set, in the position preceeding the element passed as the second parameter
//If data is already present in set, behaviour is undefined
function GLHS___AddBefore takes integer setKey,integer next,integer data returns nothing
    local integer prev= (LoadInteger((Lists___hashTable), - (setKey ), ( next))) // INLINED!!
    
    call SaveInteger((Lists___hashTable), (setKey ), ( prev ), ( data)) // INLINED!!
    call SaveInteger((Lists___hashTable), - (setKey ), ( next ), ( data)) // INLINED!!
    
    call SaveInteger((Lists___hashTable), (setKey ), ( data ), ( next)) // INLINED!!
    call SaveInteger((Lists___hashTable), - (setKey ), ( data ), ( prev)) // INLINED!!
endfunction

//==============================================
// System API
//==============================================



    function s__LinkedHashSet_begin takes integer this returns integer
        return (LoadInteger((Lists___hashTable), (this ), ( 0))) // INLINED!!
    endfunction
    
    function s__LinkedHashSet_end takes nothing returns integer
        return 0
    endfunction
    
    function s__LinkedHashSet_rBegin takes integer this returns integer
        return (LoadInteger((Lists___hashTable), - (this ), ( 0))) // INLINED!!
    endfunction
    
    function s__LinkedHashSet_rEnd takes nothing returns integer
        return 0
    endfunction
    
    function s__LinkedHashSet_next takes integer this,integer i returns integer
        return (LoadInteger((Lists___hashTable), (this ), ( i))) // INLINED!!
    endfunction
    
    function s__LinkedHashSet_prev takes integer this,integer i returns integer
        return (LoadInteger((Lists___hashTable), - (this ), ( i))) // INLINED!!
    endfunction
    
    function s__LinkedHashSet_setNext takes integer this,integer i,integer next returns nothing
        call SaveInteger((Lists___hashTable), (this ), ( i ), ( next)) // INLINED!!
    endfunction
    
    function s__LinkedHashSet_setPrev takes integer this,integer i,integer prev returns nothing
        call SaveInteger((Lists___hashTable), - (this ), ( i ), ( prev)) // INLINED!!
    endfunction
    
    function s__LinkedHashSet_delete takes integer this,integer i returns nothing
        local integer next= (LoadInteger((Lists___hashTable), (this ), ( i))) // INLINED!!
        local integer prev= (LoadInteger((Lists___hashTable), - (this ), ( i))) // INLINED!!
    
        call SaveInteger((Lists___hashTable), - (this ), ( next ), ( prev)) // INLINED!!
        call SaveInteger((Lists___hashTable), (this ), ( prev ), ( next)) // INLINED!!
            
        call RemoveSavedInteger((Lists___hashTable), (this ), ( i)) // INLINED!!
        call RemoveSavedInteger((Lists___hashTable), - (this ), ( i)) // INLINED!!
    endfunction

    constant function s__LinkedHashSet_RECYCLE_KEY takes nothing returns integer
        return Lists_RECYCLE_KEY
    endfunction
    















    
    function s__LinkedHashSet_getEnumSet takes nothing returns integer
        return s__LinkedHashSet_enumSet
    endfunction
    
    function s__LinkedHashSet_getEnumElement takes nothing returns integer
        return s__LinkedHashSet_enumElement
    endfunction
    
    
    function s__LinkedHashSet_addBefore takes integer this,integer oldData,integer newData returns nothing
        call GLHS___AddBefore(this , oldData , newData)
    endfunction
    
    
    function s__LinkedHashSet_addAfter takes integer this,integer oldData,integer newData returns nothing
        call GLHS___AddBefore(- this , oldData , newData)
    endfunction

    
    function s__LinkedHashSet_append takes integer this,integer data returns nothing
        call GLHS___AddBefore((this) , (0 ) , ( data)) // INLINED!!
    endfunction
    
    
    function s__LinkedHashSet_prepend takes integer this,integer data returns nothing
        call GLHS___AddBefore(- (this) , (0 ) , ( data)) // INLINED!!
    endfunction
    
    
    function s__LinkedHashSet_remove takes integer this,integer data returns nothing
        call s__LinkedHashSet_delete(this,data)
    endfunction
    
    
    function s__LinkedHashSet_clear takes integer this returns nothing
        call FlushChildHashtable((Lists___hashTable), this) // INLINED!!
        call FlushChildHashtable((Lists___hashTable), - this) // INLINED!!
    endfunction
    
    
    function s__LinkedHashSet_getFirst takes integer this returns integer
        return (LoadInteger((Lists___hashTable), ((this) ), ( 0))) // INLINED!!
    endfunction
    
    
    function s__LinkedHashSet_getLast takes integer this returns integer
        return (LoadInteger((Lists___hashTable), - ((this) ), ( 0))) // INLINED!!
    endfunction
    
    
    function s__LinkedHashSet_isEmpty takes integer this returns boolean
        return (LoadInteger((Lists___hashTable), ((this) ), ( 0))) != (0) // INLINED!!
    endfunction
    
    
    function s__LinkedHashSet_contains takes integer this,integer data returns boolean
        return HaveSavedInteger((Lists___hashTable), this, data) // INLINED!!
    endfunction
    
    
    function s__LinkedHashSet_size takes integer this returns integer
        local integer data= (LoadInteger((Lists___hashTable), ((this) ), ( 0))) // INLINED!!
        local integer count= 0
        
        loop
        exitwhen data == (0) // INLINED!!
            set count=count + 1
            set data=(LoadInteger((Lists___hashTable), ((this) ), ( (data)))) // INLINED!!
        endloop
        
        return count
    endfunction
    
    //This function loops through a Set and executes a trigger for each element, setting the udg_List variables to their relevant equivalents each time
    function s__LinkedHashSet_forEach takes integer this,trigger trig returns nothing
        local integer data= (LoadInteger((Lists___hashTable), ((this) ), ( 0))) // INLINED!!
        
        loop
        exitwhen data == (0) // INLINED!!
            set s__LinkedHashSet_enumElement=data
            set s__LinkedHashSet_enumSet=this
            
            set data=(LoadInteger((Lists___hashTable), ((this) ), ( (data)))) // INLINED!!
            
            if IsTriggerEnabled(trig) and TriggerEvaluate(trig) then
                call TriggerExecute(trig)
            endif
        endloop
    endfunction
    
    //If 'until' parameter is a non-negative number, then the loop will break after iterating over that many elements
    function s__LinkedHashSet_forEachCounted takes integer this,trigger trig,integer until returns nothing
        local integer data= (LoadInteger((Lists___hashTable), ((this) ), ( 0))) // INLINED!!
        local integer count= 0
            
        loop
        exitwhen data == (0) or count == until // INLINED!!
            set s__LinkedHashSet_enumElement=data
            set s__LinkedHashSet_enumSet=this
            
            set data=(LoadInteger((Lists___hashTable), ((this) ), ( (data)))) // INLINED!!
            
            if IsTriggerEnabled(trig) and TriggerEvaluate(trig) then
                call TriggerExecute(trig)
            endif
            
            set count=count + 1
        endloop
    endfunction
    
    // You may specify a code that will run in a ForPlayer loop instead of a trigger
    function s__LinkedHashSet_forEachCode takes integer this,code func returns nothing
        local integer data= (LoadInteger((Lists___hashTable), ((this) ), ( 0))) // INLINED!!
        
        loop
        exitwhen data == (0) // INLINED!!
            set s__LinkedHashSet_enumElement=data
            set s__LinkedHashSet_enumSet=this
            
            set data=(LoadInteger((Lists___hashTable), ((this) ), ( (data)))) // INLINED!!
            
            call ForForce(bj_FORCE_PLAYER[0], func)
        endloop
    endfunction
    
    
    function s__LinkedHashSet_forEachCodeCounted takes integer this,code func,integer until returns nothing
        local integer data= (LoadInteger((Lists___hashTable), ((this) ), ( 0))) // INLINED!!
        local integer count= 0
            
        loop
        exitwhen data == (0) or count == until // INLINED!!
            set s__LinkedHashSet_enumElement=data
            set s__LinkedHashSet_enumSet=this
            
            set data=(LoadInteger((Lists___hashTable), ((this) ), ( (data)))) // INLINED!!
            
            call ForForce(bj_FORCE_PLAYER[0], func)
            
            set count=count + 1
        endloop
    endfunction
    
    function s__LinkedHashSet_forEachWipe takes integer this,integer start,integer finish,code func returns integer
        local integer data= (LoadInteger((Lists___hashTable), (this ), ( start))) // INLINED!!
        local integer nextData
        local integer countRemoved= 0
            
        loop
        exitwhen data == finish or data == 0
        
            set nextData=(LoadInteger((Lists___hashTable), (this ), ( data))) // INLINED!!

            call RemoveSavedInteger((Lists___hashTable), (this ), ( data)) // INLINED!!
            call RemoveSavedInteger((Lists___hashTable), - (- this ), ( data)) // INLINED!!
            
            set s__LinkedHashSet_enumElement=data
            set s__LinkedHashSet_enumSet=this
            call ForForce(bj_FORCE_PLAYER[0], func)

            set data=nextData
            set countRemoved=countRemoved + 1
        endloop
        
        call SaveInteger((Lists___hashTable), - (this ), ( data ), ( start)) // INLINED!!
        call SaveInteger((Lists___hashTable), (this ), ( start ), ( data)) // INLINED!!

        return countRemoved
    endfunction

    
    function s__LinkedHashSet_create takes nothing returns integer
        return GMUI_GetIndex((Lists_RECYCLE_KEY)) // INLINED!!
    endfunction
    
    
    function s__LinkedHashSet_destroy takes integer this returns nothing
        call FlushChildHashtable((Lists___hashTable), this) // INLINED!!
        call FlushChildHashtable((Lists___hashTable), - this) // INLINED!!
//Implemented from module GMUI_deallocate_this:
//textmacro instance: GMUI_RecycleIndex("this","thistype.RECYCLE_KEY()")
    call SaveInteger(GMUI_hashTable, (Lists_RECYCLE_KEY), this, LoadInteger(GMUI_hashTable, (Lists_RECYCLE_KEY), 0)) // INLINED!!
    call SaveInteger(GMUI_hashTable, (Lists_RECYCLE_KEY), 0, this) // INLINED!!
//end of: GMUI_RecycleIndex("this","thistype.RECYCLE_KEY()")
    endfunction
    
////////////////////////////////////////////////////////////////////////////////////////////////////

//library GLHS ends
//library HashtableWrapper:

// Declare (copy-and-paste) this textmacro somewhere in your library.
// It's functionally the same as a wrapped hashtable, but it instead wraps a HashTable struct.
// The HashTable struct is declared in Bribe's Table library (after version 4.0.)
// You can declare this textmacro at the very end of your library (order does not matter)
                                                                                        


//library HashtableWrapper ends
//library MoveSpeedModification:

function UnitAddMoveSpeed takes unit whichUnit,real amount returns nothing
call GMSS_UnitAddMoveSpeedEx((whichUnit ) , (( amount)*1.0) , (0.000) , (522.0)) // INLINED!!
endfunction

function UnitMultiplyMoveSpeed takes unit whichUnit,real amount returns nothing
call GMSS_UnitMultiplyMoveSpeedEx((whichUnit ) , (( amount)*1.0) , (0.000) , (522.0)) // INLINED!!
endfunction


//library MoveSpeedModification ends
//library TableStruct:
// Defines Structs that use Table (or ConstTable) as a backend, instead of arrays.
// You should use your own allocator.






//Implemented from module TableStruct___Const:
        function s__TableStruct_type takes integer i returns integer
            return i
        endfunction






    
    function s__TableStruct_setHandle takes integer parent,integer child,handle h returns nothing
        if h != null then
            call SaveFogStateHandle(ConstTable___ht, (((((parent))))), (child), ( ConvertFogState(GetHandleId(h)))) // INLINED!!
        else
            call RemoveSavedHandle(ConstTable___ht, (((((parent))))), (child)) // INLINED!!
        endif
    endfunction
    
    function s__TableStruct_setAgent takes integer parent,integer child,agent a returns nothing
        if a != null then
            call SaveAgentHandle(ConstTable___ht, (((((parent))))), (child), ( a)) // INLINED!!
        else
            call RemoveSavedHandle(ConstTable___ht, (((((parent))))), (child)) // INLINED!!
        endif
    endfunction
















//library TableStruct ends
//library TimedBonus:

// TODO: Change implementation to use a Linked Hash Set instead of an array to pass parameters.


function TimedBonusTimerFunc takes nothing returns nothing
    local timer t= GetExpiredTimer()
    local integer tId= (GetHandleId((t))) // INLINED!!
    local unit timerUnit= (LoadUnitHandle(ArrayAgent_hashTable, (tId ), ( - 1))) // INLINED!!
    local integer bonusType= 0

    loop
    exitwhen bonusType > 10
        call CSS_AddBonus(timerUnit , - (LoadInteger(ArrayAgent_hashTable, (tId ), ( bonusType))) , bonusType) // INLINED!!
        set bonusType=bonusType + 1
    endloop
    
call GMSS_UnitAddMoveSpeedEx((timerUnit ) , (( - (LoadReal(ArrayAgent_hashTable, (tId ), ( bonusType))))*1.0) , (0.000) , (522.0)) // INLINED!!
call GMSS_UnitMultiplyMoveSpeedEx((timerUnit ) , (( 1. / (LoadReal(ArrayAgent_hashTable, (tId ), ( bonusType + 1))))*1.0) , (0.000) , (522.0)) // INLINED!!
    
    call PauseTimer(t)
    call DestroyTimer(t)
    call FlushChildHashtable(ArrayAgent_hashTable, (tId)) // INLINED!!

    set t=null
    set timerUnit=null
endfunction

function AddTimedBonus takes unit whichUnit,real moveAdd,real moveMul,real duration returns nothing
    local integer bonusType= 0
    local timer t= CreateTimer()
    local integer tId= (GetHandleId((t))) // INLINED!!

    loop
    exitwhen bonusType > 10
        if udg_TimerBonuses[bonusType] != 0 then
            call CSS_AddBonus(whichUnit , udg_TimerBonuses[bonusType] , bonusType)
            call SaveInteger(ArrayAgent_hashTable, (tId ), ( bonusType ), ( udg_TimerBonuses[bonusType])) // INLINED!!
            set udg_TimerBonuses[bonusType]=0
        endif
        set bonusType=bonusType + 1
    endloop

    if moveAdd != 0 then
        call SaveReal(ArrayAgent_hashTable, (tId ), ( bonusType ), (( moveAdd)*1.0)) // INLINED!!
call GMSS_UnitAddMoveSpeedEx((whichUnit ) , (( moveAdd)*1.0) , (0.000) , (522.0)) // INLINED!!
    endif
    if moveMul > 0 and moveMul != 1 then
        call SaveReal(ArrayAgent_hashTable, (tId ), ( bonusType + 1 ), (( moveMul)*1.0)) // INLINED!!
call GMSS_UnitMultiplyMoveSpeedEx((whichUnit ) , (( moveMul)*1.0) , (0.000) , (522.0)) // INLINED!!
    endif

    call SaveAgentHandle(ArrayAgent_hashTable, (tId ), ( - 1 ), ( whichUnit)) // INLINED!!
    call TimerStart(t, duration, false, function TimedBonusTimerFunc)
    
    set t=null
endfunction


//library TimedBonus ends
//library FilterTransformations:


//textmacro instance: TableStruct_NewConstTableField("", "data")

         constant function s__FilterTransformations_Globals__get_data takes nothing returns integer
            return s__FilterTransformations_Globals_data_impl
        endfunction





//end of: TableStruct_NewConstTableField("", "data")


function IsOrderMorph takes integer orderId returns boolean
    return (HaveSavedBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (orderId))) // INLINED!!
endfunction


function FilterTransformations__onInit takes nothing returns nothing
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("burrow")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("unburrow")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("sphinxform")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("unsphinxform")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("bearform")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("unbearform")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("ravenform")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("unravenform")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("root")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("unroot")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("etherealform")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("unetherealform")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("corporealform")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("uncorporealform")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("submerge")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("unsubmerge")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("robogoblin")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("unrobogoblin")), ( true)) // INLINED!!
       call SaveBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), (OrderId("metamorphosis")), ( true)) // INLINED!!
endfunction


//library FilterTransformations ends
//library LoPDecoBuilders:
    
    
    constant function s__LoP_DecoBuilders__get_SpecialDecoFirstIndex takes nothing returns integer
        return 0
    endfunction
    
//textmacro instance: TableStruct_NewReadonlyStaticPrimitiveField("SpecialDecoLastIndex","integer")
    function s__LoP_DecoBuilders__get_SpecialDecoLastIndex takes nothing returns integer
        return (LoadInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_SpecialDecoLastIndex_impl))) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders__set_SpecialDecoLastIndex takes integer new_SpecialDecoLastIndex returns nothing
        call SaveInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_SpecialDecoLastIndex_impl), ( new_SpecialDecoLastIndex)) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders_SpecialDecoLastIndexClear takes nothing returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_SpecialDecoLastIndex_impl)) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders_SpecialDecoLastIndexExists takes nothing returns boolean
        return (HaveSavedInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_SpecialDecoLastIndex_impl))) // INLINED!!
    endfunction
//end of: TableStruct_NewReadonlyStaticPrimitiveField("SpecialDecoLastIndex","integer")
//textmacro instance: TableStruct_NewReadonlyStaticPrimitiveField("BasicDecoFirstIndex","integer")
    function s__LoP_DecoBuilders__get_BasicDecoFirstIndex takes nothing returns integer
        return (LoadInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_BasicDecoFirstIndex_impl))) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders__set_BasicDecoFirstIndex takes integer new_BasicDecoFirstIndex returns nothing
        call SaveInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_BasicDecoFirstIndex_impl), ( new_BasicDecoFirstIndex)) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders_BasicDecoFirstIndexClear takes nothing returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_BasicDecoFirstIndex_impl)) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders_BasicDecoFirstIndexExists takes nothing returns boolean
        return (HaveSavedInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_BasicDecoFirstIndex_impl))) // INLINED!!
    endfunction
//end of: TableStruct_NewReadonlyStaticPrimitiveField("BasicDecoFirstIndex","integer")
//textmacro instance: TableStruct_NewReadonlyStaticPrimitiveField("BasicDecoLastIndex","integer")
    function s__LoP_DecoBuilders__get_BasicDecoLastIndex takes nothing returns integer
        return (LoadInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_BasicDecoLastIndex_impl))) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders__set_BasicDecoLastIndex takes integer new_BasicDecoLastIndex returns nothing
        call SaveInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_BasicDecoLastIndex_impl), ( new_BasicDecoLastIndex)) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders_BasicDecoLastIndexClear takes nothing returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_BasicDecoLastIndex_impl)) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders_BasicDecoLastIndexExists takes nothing returns boolean
        return (HaveSavedInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_BasicDecoLastIndex_impl))) // INLINED!!
    endfunction
//end of: TableStruct_NewReadonlyStaticPrimitiveField("BasicDecoLastIndex","integer")
//textmacro instance: TableStruct_NewReadonlyStaticPrimitiveField("AdvDecoFirstIndex","integer")
    function s__LoP_DecoBuilders__get_AdvDecoFirstIndex takes nothing returns integer
        return (LoadInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_AdvDecoFirstIndex_impl))) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders__set_AdvDecoFirstIndex takes integer new_AdvDecoFirstIndex returns nothing
        call SaveInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_AdvDecoFirstIndex_impl), ( new_AdvDecoFirstIndex)) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders_AdvDecoFirstIndexClear takes nothing returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_AdvDecoFirstIndex_impl)) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders_AdvDecoFirstIndexExists takes nothing returns boolean
        return (HaveSavedInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_AdvDecoFirstIndex_impl))) // INLINED!!
    endfunction
//end of: TableStruct_NewReadonlyStaticPrimitiveField("AdvDecoFirstIndex","integer")
//textmacro instance: TableStruct_NewReadonlyStaticPrimitiveField("DecoLastIndex","integer")
    function s__LoP_DecoBuilders__get_DecoLastIndex takes nothing returns integer
        return (LoadInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_DecoLastIndex_impl))) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders__set_DecoLastIndex takes integer new_DecoLastIndex returns nothing
        call SaveInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_DecoLastIndex_impl), ( new_DecoLastIndex)) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders_DecoLastIndexClear takes nothing returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_DecoLastIndex_impl)) // INLINED!!
    endfunction
    
    function s__LoP_DecoBuilders_DecoLastIndexExists takes nothing returns boolean
        return (HaveSavedInteger(ConstTable___ht, (((((s__LoP_DecoBuilders_static_members_key))))), (s__LoP_DecoBuilders_DecoLastIndex_impl))) // INLINED!!
    endfunction
//end of: TableStruct_NewReadonlyStaticPrimitiveField("DecoLastIndex","integer")
    


    // The number of Deco Builders inside of the Special Deco Tent.
    constant function SpecialDecoTotal takes nothing returns integer
        return 2 // This is actually 1 less than the total to be in line with udg_System_DecoTotal
    endfunction
    


//library LoPDecoBuilders ends
//library LoPInit:


//textmacro instance: TableStruct_NewConstTableField("", "regionTable")

         constant function s__LoPInit_Globals__get_regionTable takes nothing returns integer
            return s__LoPInit_Globals_regionTable_impl
        endfunction





//end of: TableStruct_NewConstTableField("", "regionTable")

// This function is called in Init Main
function InitPlayerCircles takes nothing returns nothing
    local region tempRegion= CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Blue)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(1))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Teal)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(2))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Purple)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(3))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Yellow)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(4))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Orange)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(5))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Green)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(6))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Pink)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(7))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Gray)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(8))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Light_Blue)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(9))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Dark_Green)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(10))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Brown)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(11))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Maroon)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(12))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Navy)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(13))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Turquoise)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(14))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Violet)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(15))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Wheat)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(16))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Peach)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(17))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Mint)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(18))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Lavender)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(19))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Coal)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(20))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Snow)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(21))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Emerald)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(22))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    set tempRegion=CreateRegion()
    call RegionAddRect(tempRegion, gg_rct_GiveTo_Peanut)
    call SavePlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(tempRegion)), ( Player(23))) // INLINED!!
    call TriggerRegisterEnterRegion(gg_trg_System_Titan_GiveUnit, tempRegion, null)
    // =========
    // End
    // =========
    set tempRegion=null
endfunction


//library LoPInit ends
//library MultiBoard:



//textmacro instance: TableStruct_NewReadonlyStructField("items", "Table")
    function s__MultiBoard__get_items takes integer this returns integer
        return (LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), (this))) // INLINED!!
    endfunction
    
    function s__MultiBoard__set_items takes integer this,integer new_items returns nothing
        call SaveInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), (this), ( new_items)) // INLINED!!
    endfunction
    
    function s__MultiBoard_itemsClear takes integer this returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), (this)) // INLINED!!
    endfunction
//end of: TableStruct_NewReadonlyStructField("items", "Table")
    
//textmacro instance: TableStruct_NewReadonlyPrimitiveField("cols", "integer")
    function s__MultiBoard__get_cols takes integer this returns integer
        return (LoadInteger(ConstTable___ht, (((((s__MultiBoard_cols_impl))))), (this))) // INLINED!!
    endfunction
    
    function s__MultiBoard__set_cols takes integer this,integer new_cols returns nothing
        call SaveInteger(ConstTable___ht, (((((s__MultiBoard_cols_impl))))), (this), ( new_cols)) // INLINED!!
    endfunction
    
    function s__MultiBoard_colsClear takes integer this returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((((s__MultiBoard_cols_impl))))), (this)) // INLINED!!
    endfunction
//end of: TableStruct_NewReadonlyPrimitiveField("cols", "integer")
//textmacro instance: TableStruct_NewReadonlyPrimitiveField("rows", "integer")
    function s__MultiBoard__get_rows takes integer this returns integer
        return (LoadInteger(ConstTable___ht, (((((s__MultiBoard_rows_impl))))), (this))) // INLINED!!
    endfunction
    
    function s__MultiBoard__set_rows takes integer this,integer new_rows returns nothing
        call SaveInteger(ConstTable___ht, (((((s__MultiBoard_rows_impl))))), (this), ( new_rows)) // INLINED!!
    endfunction
    
    function s__MultiBoard_rowsClear takes integer this returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((((s__MultiBoard_rows_impl))))), (this)) // INLINED!!
    endfunction
//end of: TableStruct_NewReadonlyPrimitiveField("rows", "integer")
    
//textmacro instance: TableStruct_NewReadonlyHandleField("multiboard", "multiboard")
    function s__MultiBoard__get_multiboard takes integer this returns multiboard
        return (LoadMultiboardHandle(ConstTable___ht, (((((s__MultiBoard_multiboard_impl))))), (this))) // INLINED!!
    endfunction
    
    function s__MultiBoard__set_multiboard takes integer this,multiboard new_multiboard returns nothing
        call s__TableStruct_setHandle(s__MultiBoard_multiboard_impl , this , new_multiboard)
    endfunction
    
    function s__MultiBoard_multiboardClear takes integer this returns nothing
        call RemoveSavedHandle(ConstTable___ht, (((((s__MultiBoard_multiboard_impl))))), (this)) // INLINED!!
    endfunction
//end of: TableStruct_NewReadonlyHandleField("multiboard", "multiboard")
    
    function s__MultiBoard_get takes integer this,integer i,integer j returns multiboarditem
        return (LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((this))))), (i)))))), (j))) // INLINED!!
    endfunction
    
    function s__MultiBoard_setValue takes integer this,integer i,integer j,string value returns nothing
        call MultiboardSetItemValue((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), (((this)))))), ((i ))))))), (( j)))), value) // INLINED!!
    endfunction
    
    function s__MultiBoard_setValueColor takes integer this,integer i,integer j,integer r,integer g,integer b,integer a returns nothing
        call MultiboardSetItemValueColor((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), (((this)))))), ((i ))))))), (( j)))), r, g, b, a) // INLINED!!
    endfunction
    
    function s__MultiBoard_setIcon takes integer this,integer i,integer j,string iconFileName returns nothing
        call MultiboardSetItemIcon((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), (((this)))))), ((i ))))))), (( j)))), iconFileName) // INLINED!!
    endfunction
    
    function s__MultiBoard_setStyle takes integer this,integer i,integer j,boolean showValue,boolean showIcon returns nothing
        call MultiboardSetItemStyle((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), (((this)))))), ((i ))))))), (( j)))), showValue, showIcon) // INLINED!!
    endfunction
    
    function s__MultiBoard_setWidth takes integer this,integer i,integer j,real width returns nothing
        call MultiboardSetItemWidth((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), (((this)))))), ((i ))))))), (( j)))), width) // INLINED!!
    endfunction
    
    function s__MultiBoard_refresh takes multiboard mb returns integer
        local integer this= GetHandleId(mb)
        local integer rows= MultiboardGetRowCount(mb)
        local integer cols= MultiboardGetColumnCount(mb)
        
        local integer oldCols= (LoadInteger(ConstTable___ht, (((((s__MultiBoard_cols_impl))))), ((this)))) // INLINED!!
        local integer oldRows= (LoadInteger(ConstTable___ht, (((((s__MultiBoard_rows_impl))))), ((this)))) // INLINED!!
        
        local integer i= 0
        local integer j
        
        if (LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((this)))) == 0 then // INLINED!!
            call SaveInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((this)), ( (s__Table_create()))) // INLINED!!
            call s__TableStruct_setHandle(s__MultiBoard_multiboard_impl , (this) , (mb)) // INLINED!!
        endif

        loop
        exitwhen i >= rows
            if i >= oldRows then
                call SaveInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((this))))), (i), ( s__Table_create())) // INLINED!!
                set j=0
            else
                set j=cols
                loop
                exitwhen j >= oldCols
                    call MultiboardReleaseItem((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((this))))), (i)))))), (j)))) // INLINED!!
                    call RemoveSavedHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((this))))), (i)))))), (j)) // INLINED!!
                    set j=j + 1
                endloop
                set j=oldCols
            endif
            call SaveInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((this))))), (0), ( s__Table_create())) // INLINED!!
            loop
            exitwhen j >= cols
                call SaveMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((this))))), (i)))))), (j), ( MultiboardGetItem(mb, i, j))) // INLINED!!
                set j=j + 1
            endloop
            set i=i + 1
        endloop
        
        loop
        exitwhen i >= oldCols
            set j=0
            loop
                exitwhen j >= oldCols
                call MultiboardReleaseItem((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((this))))), (i)))))), (j)))) // INLINED!!
                set j=j + 1
            endloop
            call s__Table_destroy((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((this))))), (i)))) // INLINED!!
            set i=i + 1
        endloop
        
        call SaveInteger(ConstTable___ht, (((((s__MultiBoard_cols_impl))))), ((this)), ( (cols))) // INLINED!!
        call SaveInteger(ConstTable___ht, (((((s__MultiBoard_rows_impl))))), ((this)), ( (rows))) // INLINED!!
    
        return this
    endfunction
    
    // TODO:
    function s__MultiBoard_destroy takes integer this returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((this))) // INLINED!!
        call RemoveSavedInteger(ConstTable___ht, (((((s__MultiBoard_rows_impl))))), ((this))) // INLINED!!
        call RemoveSavedInteger(ConstTable___ht, (((((s__MultiBoard_cols_impl))))), ((this))) // INLINED!!
        call RemoveSavedHandle(ConstTable___ht, (((((s__MultiBoard_multiboard_impl))))), ((this))) // INLINED!!
    endfunction



//library MultiBoard ends
//library RectEnvironment:


//Implemented from module GMUIUseGenericKey:
    constant function s__TerrainFog_RECYCLE_KEY takes nothing returns integer
        return GMUI_GENERIC_KEY
    endfunction
//Implemented from module GMUIAllocatorMethods:

    function s__TerrainFog_allocate takes nothing returns integer
        return GMUI_GetIndex((GMUI_GENERIC_KEY)) // INLINED!!
    endfunction
    
    function s__TerrainFog_deallocate takes integer this returns nothing
        call GMUI_RecycleIndex((GMUI_GENERIC_KEY) , this) // INLINED!!
    endfunction

    
//textmacro instance: TableStruct_NewPrimitiveField("style", "integer")
    function s__TerrainFog__get_style takes integer this returns integer
        return (LoadInteger(ConstTable___ht, (((((s__TerrainFog_style_impl))))), (this))) // INLINED!!
    endfunction
    
    function s__TerrainFog__set_style takes integer this,integer new_style returns nothing
        call SaveInteger(ConstTable___ht, (((((s__TerrainFog_style_impl))))), (this), ( new_style)) // INLINED!!
    endfunction
    
    function s__TerrainFog_styleClear takes integer this returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((((s__TerrainFog_style_impl))))), (this)) // INLINED!!
    endfunction
//end of: TableStruct_NewPrimitiveField("style", "integer")
//textmacro instance: TableStruct_NewPrimitiveField("zStart", "real")
    function s__TerrainFog__get_zStart takes integer this returns real
        return (LoadReal(ConstTable___ht, (((((s__TerrainFog_zStart_impl))))), (this))) // INLINED!!
    endfunction
    
    function s__TerrainFog__set_zStart takes integer this,real new_zStart returns nothing
        call SaveReal(ConstTable___ht, (((((s__TerrainFog_zStart_impl))))), (this), (( new_zStart)*1.0)) // INLINED!!
    endfunction
    
    function s__TerrainFog_zStartClear takes integer this returns nothing
        call RemoveSavedReal(ConstTable___ht, (((((s__TerrainFog_zStart_impl))))), (this)) // INLINED!!
    endfunction
//end of: TableStruct_NewPrimitiveField("zStart", "real")
//textmacro instance: TableStruct_NewPrimitiveField("zEnd", "real")
    function s__TerrainFog__get_zEnd takes integer this returns real
        return (LoadReal(ConstTable___ht, (((((s__TerrainFog_zEnd_impl))))), (this))) // INLINED!!
    endfunction
    
    function s__TerrainFog__set_zEnd takes integer this,real new_zEnd returns nothing
        call SaveReal(ConstTable___ht, (((((s__TerrainFog_zEnd_impl))))), (this), (( new_zEnd)*1.0)) // INLINED!!
    endfunction
    
    function s__TerrainFog_zEndClear takes integer this returns nothing
        call RemoveSavedReal(ConstTable___ht, (((((s__TerrainFog_zEnd_impl))))), (this)) // INLINED!!
    endfunction
//end of: TableStruct_NewPrimitiveField("zEnd", "real")
//textmacro instance: TableStruct_NewPrimitiveField("density", "real")
    function s__TerrainFog__get_density takes integer this returns real
        return (LoadReal(ConstTable___ht, (((((s__TerrainFog_density_impl))))), (this))) // INLINED!!
    endfunction
    
    function s__TerrainFog__set_density takes integer this,real new_density returns nothing
        call SaveReal(ConstTable___ht, (((((s__TerrainFog_density_impl))))), (this), (( new_density)*1.0)) // INLINED!!
    endfunction
    
    function s__TerrainFog_densityClear takes integer this returns nothing
        call RemoveSavedReal(ConstTable___ht, (((((s__TerrainFog_density_impl))))), (this)) // INLINED!!
    endfunction
//end of: TableStruct_NewPrimitiveField("density", "real")
//textmacro instance: TableStruct_NewPrimitiveField("red", "real")
    function s__TerrainFog__get_red takes integer this returns real
        return (LoadReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), (this))) // INLINED!!
    endfunction
    
    function s__TerrainFog__set_red takes integer this,real new_red returns nothing
        call SaveReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), (this), (( new_red)*1.0)) // INLINED!!
    endfunction
    
    function s__TerrainFog_redClear takes integer this returns nothing
        call RemoveSavedReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), (this)) // INLINED!!
    endfunction
//end of: TableStruct_NewPrimitiveField("red", "real")
//textmacro instance: TableStruct_NewPrimitiveField("green", "real")
    function s__TerrainFog__get_green takes integer this returns real
        return (LoadReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), (this))) // INLINED!!
    endfunction
    
    function s__TerrainFog__set_green takes integer this,real new_green returns nothing
        call SaveReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), (this), (( new_green)*1.0)) // INLINED!!
    endfunction
    
    function s__TerrainFog_greenClear takes integer this returns nothing
        call RemoveSavedReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), (this)) // INLINED!!
    endfunction
//end of: TableStruct_NewPrimitiveField("green", "real")
//textmacro instance: TableStruct_NewPrimitiveField("blue", "real")
    function s__TerrainFog__get_blue takes integer this returns real
        return (LoadReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), (this))) // INLINED!!
    endfunction
    
    function s__TerrainFog__set_blue takes integer this,real new_blue returns nothing
        call SaveReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), (this), (( new_blue)*1.0)) // INLINED!!
    endfunction
    
    function s__TerrainFog_blueClear takes integer this returns nothing
        call RemoveSavedReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), (this)) // INLINED!!
    endfunction
//end of: TableStruct_NewPrimitiveField("blue", "real")
    
    function s__TerrainFog_applyForPlayer takes integer this,player whichPlayer returns nothing
        if GetLocalPlayer() == whichPlayer then
            call SetTerrainFogEx((LoadInteger(ConstTable___ht, (((((s__TerrainFog_style_impl))))), ((this)))), (LoadReal(ConstTable___ht, (((((s__TerrainFog_zStart_impl))))), ((this)))), (LoadReal(ConstTable___ht, (((((s__TerrainFog_zEnd_impl))))), ((this)))), (LoadReal(ConstTable___ht, (((((s__TerrainFog_density_impl))))), ((this)))), (LoadReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), ((this)))), (LoadReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), ((this)))), (LoadReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), ((this))))) // INLINED!!
        endif
    endfunction
    
    function s__TerrainFog_apply takes integer this returns nothing
        call SetTerrainFogEx((LoadInteger(ConstTable___ht, (((((s__TerrainFog_style_impl))))), ((this)))), (LoadReal(ConstTable___ht, (((((s__TerrainFog_zStart_impl))))), ((this)))), (LoadReal(ConstTable___ht, (((((s__TerrainFog_zEnd_impl))))), ((this)))), (LoadReal(ConstTable___ht, (((((s__TerrainFog_density_impl))))), ((this)))), (LoadReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), ((this)))), (LoadReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), ((this)))), (LoadReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), ((this))))) // INLINED!!
    endfunction
        
    function s__TerrainFog_create takes nothing returns integer
        return (GMUI_GetIndex((GMUI_GENERIC_KEY))) // INLINED!!
    endfunction
    
    function s__TerrainFog_destroy takes integer this returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((((s__TerrainFog_style_impl))))), ((this))) // INLINED!!
        call RemoveSavedReal(ConstTable___ht, (((((s__TerrainFog_zStart_impl))))), ((this))) // INLINED!!
        call RemoveSavedReal(ConstTable___ht, (((((s__TerrainFog_zEnd_impl))))), ((this))) // INLINED!!
        call RemoveSavedReal(ConstTable___ht, (((((s__TerrainFog_density_impl))))), ((this))) // INLINED!!
        call RemoveSavedReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), ((this))) // INLINED!!
        call RemoveSavedReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), ((this))) // INLINED!!
        call RemoveSavedReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), ((this))) // INLINED!!
        call GMUI_RecycleIndex((GMUI_GENERIC_KEY) , (this)) // INLINED!!
    endfunction
    




//textmacro instance: TableStruct_NewStructField("fog", "TerrainFog")
    function s__RectEnvironment__get_fog takes integer this returns integer
        return (LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (this))) // INLINED!!
    endfunction
    
    function s__RectEnvironment__set_fog takes integer this,integer new_fog returns nothing
        call SaveInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (this), ( new_fog)) // INLINED!!
    endfunction
    
    function s__RectEnvironment_fogClear takes integer this returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (this)) // INLINED!!
    endfunction
//end of: TableStruct_NewStructField("fog", "TerrainFog")
    
    function s__RectEnvironment_apply takes integer this returns nothing
        local integer fog= (LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), ((this)))) // INLINED!!
        if (LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), ((this)))) != 0 then // INLINED!!
            call s__TerrainFog_apply((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), ((this))))) // INLINED!!
        else
            call ResetTerrainFog()
        endif
    endfunction
    
    function s__RectEnvironment_get takes rect r returns integer
        return GetHandleId(r)
    endfunction
    
    function s__RectEnvironment_destroy takes integer this returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), ((this))) // INLINED!!
    endfunction


//library RectEnvironment ends
//library UnitVisualMods:
//////////////////////////////////////////////////////
//Guhun's Unit Modification System v1.21


//Hashtable values:
// -2  -> Intended angle for the unit to reach in the GroupFunction
// -1  -> temporary integer to count how many times a  unit has been looped through in the GroupFunction

//////////////////////////////////////////////////////
// CONFIGURATION

// This function specifies what should be done to a unit when an argument which is not a valid
// player number (1 <= n <= bj_MAX_PLAYERS) is passed to GUMSSetUnitColor. The default behaviour is
// to set the color of the unit to the color of the owning player.

// NOTE: Hashtable data is automatically cleared when a non-player number argument is passed.
// You can reference a whichUnit variable. Do not alter this variable.



//==================================================================================================
//                                     Hashtable Declaration
//==================================================================================================

// Never use keyword to declare the hashtable at the bottom of the library. That generates callers
// that are unnecessary.


//textmacro instance: DeclareParentHashtableWrapperModule("hashTable","true", "data","private")
function UnitVisualMods___data_GetWrappedHashtable takes nothing returns hashtable
    return UnitVisualMods___hashTable
endfunction


    function s__UnitVisualMods___data_reals__getindex takes integer this,integer key returns real
        return LoadReal((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction
    function s__UnitVisualMods___data_reals__setindex takes integer this,integer key,real value returns nothing
        call SaveReal((UnitVisualMods___hashTable), this, key, value) // INLINED!!
    endfunction
    function s__UnitVisualMods___data_reals_has takes integer this,integer key returns boolean
        return HaveSavedReal((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction
    function s__UnitVisualMods___data_reals_remove takes integer this,integer key returns nothing
        call RemoveSavedReal((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction

    function s__UnitVisualMods___data_booleans__getindex takes integer this,integer key returns boolean
        return LoadBoolean((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction
    function s__UnitVisualMods___data_booleans__setindex takes integer this,integer key,boolean value returns nothing
        call SaveBoolean((UnitVisualMods___hashTable), this, key, value) // INLINED!!
    endfunction
    function s__UnitVisualMods___data_booleans_has takes integer this,integer key returns boolean
        return HaveSavedBoolean((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction
    function s__UnitVisualMods___data_booleans_remove takes integer this,integer key returns nothing
        call RemoveSavedBoolean((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction

    function s__UnitVisualMods___data_strings__getindex takes integer this,integer key returns string
        return LoadStr((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction
    function s__UnitVisualMods___data_strings__setindex takes integer this,integer key,string value returns nothing
        call SaveStr((UnitVisualMods___hashTable), this, key, value) // INLINED!!
    endfunction
    function s__UnitVisualMods___data_strings_has takes integer this,integer key returns boolean
        return HaveSavedString((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction
    function s__UnitVisualMods___data_strings_remove takes integer this,integer key returns nothing
        call RemoveSavedString((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction

    function s__UnitVisualMods___data_integers__getindex takes integer this,integer key returns integer
        return LoadInteger((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction
    function s__UnitVisualMods___data_integers__setindex takes integer this,integer key,integer value returns nothing
        call SaveInteger((UnitVisualMods___hashTable), this, key, value) // INLINED!!
    endfunction
    function s__UnitVisualMods___data_integers_has takes integer this,integer key returns boolean
        return HaveSavedInteger((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction
    function s__UnitVisualMods___data_integers_remove takes integer this,integer key returns nothing
        call RemoveSavedInteger((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction

    function s__UnitVisualMods___data_handles_has takes integer this,integer key returns boolean
        return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction
    function s__UnitVisualMods___data_handles_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction


        function s__UnitVisualMods___data_agents__setindex takes integer this,integer key,agent value returns nothing
            call SaveAgentHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_players__getindex takes integer this,integer key returns player
            return LoadPlayerHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_players__setindex takes integer this,integer key,player value returns nothing
            call SavePlayerHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_players_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_players_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_widgets__getindex takes integer this,integer key returns widget
            return LoadWidgetHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_widgets__setindex takes integer this,integer key,widget value returns nothing
            call SaveWidgetHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_widgets_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_widgets_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_destructables__getindex takes integer this,integer key returns destructable
            return LoadDestructableHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_destructables__setindex takes integer this,integer key,destructable value returns nothing
            call SaveDestructableHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_destructables_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_destructables_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_items__getindex takes integer this,integer key returns item
            return LoadItemHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_items__setindex takes integer this,integer key,item value returns nothing
            call SaveItemHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_items_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_items_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_units__getindex takes integer this,integer key returns unit
            return LoadUnitHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_units__setindex takes integer this,integer key,unit value returns nothing
            call SaveUnitHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_units_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_units_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_abilitys__getindex takes integer this,integer key returns ability
            return LoadAbilityHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_abilitys__setindex takes integer this,integer key,ability value returns nothing
            call SaveAbilityHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_abilitys_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_abilitys_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_timers__getindex takes integer this,integer key returns timer
            return LoadTimerHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_timers__setindex takes integer this,integer key,timer value returns nothing
            call SaveTimerHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_timers_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_timers_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_triggers__getindex takes integer this,integer key returns trigger
            return LoadTriggerHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_triggers__setindex takes integer this,integer key,trigger value returns nothing
            call SaveTriggerHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_triggers_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_triggers_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_triggerconditions__getindex takes integer this,integer key returns triggercondition
            return LoadTriggerConditionHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_triggerconditions__setindex takes integer this,integer key,triggercondition value returns nothing
            call SaveTriggerConditionHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_triggerconditions_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_triggerconditions_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_triggeractions__getindex takes integer this,integer key returns triggeraction
            return LoadTriggerActionHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_triggeractions__setindex takes integer this,integer key,triggeraction value returns nothing
            call SaveTriggerActionHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_triggeractions_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_triggeractions_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_events__getindex takes integer this,integer key returns event
            return LoadTriggerEventHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_events__setindex takes integer this,integer key,event value returns nothing
            call SaveTriggerEventHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_events_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_events_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_forces__getindex takes integer this,integer key returns force
            return LoadForceHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_forces__setindex takes integer this,integer key,force value returns nothing
            call SaveForceHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_forces_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_forces_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_groups__getindex takes integer this,integer key returns group
            return LoadGroupHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_groups__setindex takes integer this,integer key,group value returns nothing
            call SaveGroupHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_groups_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_groups_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_locations__getindex takes integer this,integer key returns location
            return LoadLocationHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_locations__setindex takes integer this,integer key,location value returns nothing
            call SaveLocationHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_locations_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_locations_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_rects__getindex takes integer this,integer key returns rect
            return LoadRectHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_rects__setindex takes integer this,integer key,rect value returns nothing
            call SaveRectHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_rects_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_rects_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_boolexprs__getindex takes integer this,integer key returns boolexpr
            return LoadBooleanExprHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_boolexprs__setindex takes integer this,integer key,boolexpr value returns nothing
            call SaveBooleanExprHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_boolexprs_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_boolexprs_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_sounds__getindex takes integer this,integer key returns sound
            return LoadSoundHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_sounds__setindex takes integer this,integer key,sound value returns nothing
            call SaveSoundHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_sounds_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_sounds_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_effects__getindex takes integer this,integer key returns effect
            return LoadEffectHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_effects__setindex takes integer this,integer key,effect value returns nothing
            call SaveEffectHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_effects_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_effects_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_unitpools__getindex takes integer this,integer key returns unitpool
            return LoadUnitPoolHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_unitpools__setindex takes integer this,integer key,unitpool value returns nothing
            call SaveUnitPoolHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_unitpools_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_unitpools_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_itempools__getindex takes integer this,integer key returns itempool
            return LoadItemPoolHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_itempools__setindex takes integer this,integer key,itempool value returns nothing
            call SaveItemPoolHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_itempools_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_itempools_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_quests__getindex takes integer this,integer key returns quest
            return LoadQuestHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_quests__setindex takes integer this,integer key,quest value returns nothing
            call SaveQuestHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_quests_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_quests_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_questitems__getindex takes integer this,integer key returns questitem
            return LoadQuestItemHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_questitems__setindex takes integer this,integer key,questitem value returns nothing
            call SaveQuestItemHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_questitems_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_questitems_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_defeatconditions__getindex takes integer this,integer key returns defeatcondition
            return LoadDefeatConditionHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_defeatconditions__setindex takes integer this,integer key,defeatcondition value returns nothing
            call SaveDefeatConditionHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_defeatconditions_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_defeatconditions_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_timerdialogs__getindex takes integer this,integer key returns timerdialog
            return LoadTimerDialogHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_timerdialogs__setindex takes integer this,integer key,timerdialog value returns nothing
            call SaveTimerDialogHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_timerdialogs_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_timerdialogs_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_leaderboards__getindex takes integer this,integer key returns leaderboard
            return LoadLeaderboardHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_leaderboards__setindex takes integer this,integer key,leaderboard value returns nothing
            call SaveLeaderboardHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_leaderboards_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_leaderboards_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_multiboards__getindex takes integer this,integer key returns multiboard
            return LoadMultiboardHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_multiboards__setindex takes integer this,integer key,multiboard value returns nothing
            call SaveMultiboardHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_multiboards_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_multiboards_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_multiboarditems__getindex takes integer this,integer key returns multiboarditem
            return LoadMultiboardItemHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_multiboarditems__setindex takes integer this,integer key,multiboarditem value returns nothing
            call SaveMultiboardItemHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_multiboarditems_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_multiboarditems_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_trackables__getindex takes integer this,integer key returns trackable
            return LoadTrackableHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_trackables__setindex takes integer this,integer key,trackable value returns nothing
            call SaveTrackableHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_trackables_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_trackables_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_dialogs__getindex takes integer this,integer key returns dialog
            return LoadDialogHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_dialogs__setindex takes integer this,integer key,dialog value returns nothing
            call SaveDialogHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_dialogs_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_dialogs_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_buttons__getindex takes integer this,integer key returns button
            return LoadButtonHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_buttons__setindex takes integer this,integer key,button value returns nothing
            call SaveButtonHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_buttons_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_buttons_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_texttags__getindex takes integer this,integer key returns texttag
            return LoadTextTagHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_texttags__setindex takes integer this,integer key,texttag value returns nothing
            call SaveTextTagHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_texttags_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_texttags_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_lightnings__getindex takes integer this,integer key returns lightning
            return LoadLightningHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_lightnings__setindex takes integer this,integer key,lightning value returns nothing
            call SaveLightningHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_lightnings_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_lightnings_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_images__getindex takes integer this,integer key returns image
            return LoadImageHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_images__setindex takes integer this,integer key,image value returns nothing
            call SaveImageHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_images_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_images_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_ubersplats__getindex takes integer this,integer key returns ubersplat
            return LoadUbersplatHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_ubersplats__setindex takes integer this,integer key,ubersplat value returns nothing
            call SaveUbersplatHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_ubersplats_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_ubersplats_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_regions__getindex takes integer this,integer key returns region
            return LoadRegionHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_regions__setindex takes integer this,integer key,region value returns nothing
            call SaveRegionHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_regions_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_regions_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_fogstates__getindex takes integer this,integer key returns fogstate
            return LoadFogStateHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_fogstates__setindex takes integer this,integer key,fogstate value returns nothing
            call SaveFogStateHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_fogstates_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_fogstates_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_fogmodifiers__getindex takes integer this,integer key returns fogmodifier
            return LoadFogModifierHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_fogmodifiers__setindex takes integer this,integer key,fogmodifier value returns nothing
            call SaveFogModifierHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_fogmodifiers_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_fogmodifiers_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction

        function s__UnitVisualMods___data_hashtables__getindex takes integer this,integer key returns hashtable
            return LoadHashtableHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_hashtables__setindex takes integer this,integer key,hashtable value returns nothing
            call SaveHashtableHandle((UnitVisualMods___hashTable), this, key, value) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_hashtables_has takes integer this,integer key returns boolean
            return HaveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction
        function s__UnitVisualMods___data_hashtables_remove takes integer this,integer key returns nothing
            call RemoveSavedHandle((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction


    
//Implemented from module UnitVisualMods___data_realm:
    function s__UnitVisualMods___data_Child__get_real takes integer this returns integer
        return this
    endfunction
//Implemented from module UnitVisualMods___data_integerm:
    function s__UnitVisualMods___data_Child__get_integer takes integer this returns integer
        return this
    endfunction
//Implemented from module UnitVisualMods___data_booleanm:
    function s__UnitVisualMods___data_Child__get_boolean takes integer this returns integer
        return this
    endfunction
//Implemented from module UnitVisualMods___data_stringm:
    function s__UnitVisualMods___data_Child__get_string takes integer this returns integer
        return this
    endfunction
    

        function s__UnitVisualMods___data_Child__get_handle takes integer this returns integer
            return this
        endfunction
    
        function s__UnitVisualMods___data_Child__get_agent takes integer this returns integer
            return this
        endfunction

//Implemented from module UnitVisualMods___data_playerm:
        function s__UnitVisualMods___data_Child__get_player takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_widgetm:
        function s__UnitVisualMods___data_Child__get_widget takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_destructablem:
        function s__UnitVisualMods___data_Child__get_destructable takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_itemm:
        function s__UnitVisualMods___data_Child__get_item takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_unitm:
        function s__UnitVisualMods___data_Child__get_unit takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_abilitym:
        function s__UnitVisualMods___data_Child__get_ability takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_timerm:
        function s__UnitVisualMods___data_Child__get_timer takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_triggerm:
        function s__UnitVisualMods___data_Child__get_trigger takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_triggerconditionm:
        function s__UnitVisualMods___data_Child__get_triggercondition takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_triggeractionm:
        function s__UnitVisualMods___data_Child__get_triggeraction takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_eventm:
        function s__UnitVisualMods___data_Child__get_event takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_forcem:
        function s__UnitVisualMods___data_Child__get_force takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_groupm:
        function s__UnitVisualMods___data_Child__get_group takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_locationm:
        function s__UnitVisualMods___data_Child__get_location takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_rectm:
        function s__UnitVisualMods___data_Child__get_rect takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_boolexprm:
        function s__UnitVisualMods___data_Child__get_boolexpr takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_soundm:
        function s__UnitVisualMods___data_Child__get_sound takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_effectm:
        function s__UnitVisualMods___data_Child__get_effect takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_unitpoolm:
        function s__UnitVisualMods___data_Child__get_unitpool takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_itempoolm:
        function s__UnitVisualMods___data_Child__get_itempool takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_questm:
        function s__UnitVisualMods___data_Child__get_quest takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_questitemm:
        function s__UnitVisualMods___data_Child__get_questitem takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_defeatconditionm:
        function s__UnitVisualMods___data_Child__get_defeatcondition takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_timerdialogm:
        function s__UnitVisualMods___data_Child__get_timerdialog takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_leaderboardm:
        function s__UnitVisualMods___data_Child__get_leaderboard takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_multiboardm:
        function s__UnitVisualMods___data_Child__get_multiboard takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_multiboarditemm:
        function s__UnitVisualMods___data_Child__get_multiboarditem takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_trackablem:
        function s__UnitVisualMods___data_Child__get_trackable takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_dialogm:
        function s__UnitVisualMods___data_Child__get_dialog takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_buttonm:
        function s__UnitVisualMods___data_Child__get_button takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_texttagm:
        function s__UnitVisualMods___data_Child__get_texttag takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_lightningm:
        function s__UnitVisualMods___data_Child__get_lightning takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_imagem:
        function s__UnitVisualMods___data_Child__get_image takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_ubersplatm:
        function s__UnitVisualMods___data_Child__get_ubersplat takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_regionm:
        function s__UnitVisualMods___data_Child__get_region takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_fogstatem:
        function s__UnitVisualMods___data_Child__get_fogstate takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_fogmodifierm:
        function s__UnitVisualMods___data_Child__get_fogmodifier takes integer this returns integer
            return this
        endfunction
//Implemented from module UnitVisualMods___data_hashtablem:
        function s__UnitVisualMods___data_Child__get_hashtable takes integer this returns integer
            return this
        endfunction

   

        function s__UnitVisualMods___data_Child__getindex takes integer this,integer key returns integer
            return LoadInteger((UnitVisualMods___hashTable), this, key) // INLINED!!
        endfunction





   
    function s__UnitVisualMods___data_Child__setindex takes integer this,integer key,integer tb returns nothing
        call SaveInteger((UnitVisualMods___hashTable), this, key, tb) // INLINED!!
    endfunction
   
    function s__UnitVisualMods___data_Child_has takes integer this,integer key returns boolean
        return HaveSavedInteger((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction
   
    function s__UnitVisualMods___data_Child_remove takes integer this,integer key returns nothing
        call RemoveSavedInteger((UnitVisualMods___hashTable), this, key) // INLINED!!
    endfunction
   
    function s__UnitVisualMods___data_Child_flush takes integer this returns nothing
        call FlushChildHashtable((UnitVisualMods___hashTable), this) // INLINED!!
    endfunction

//end of: DeclareParentHashtableWrapperModule("hashTable","true", "data","private")







//Implemented from module UnitVisualMods___data_ParentHashtableWrapper:
    function s__UnitVisualMods___data__staticgetindex takes integer key returns integer
        return key
    endfunction
    
    function s__UnitVisualMods___data_flushChild takes integer key returns nothing
        call FlushChildHashtable((UnitVisualMods___hashTable), key) // INLINED!!
    endfunction
    
    function s__UnitVisualMods___data_flush takes nothing returns nothing
        call FlushParentHashtable((UnitVisualMods___hashTable)) // INLINED!!
    endfunction
    
    function s__UnitVisualMods___data_hashtable takes nothing returns hashtable
        return (UnitVisualMods___hashTable) // INLINED!!
    endfunction































    
    function s__TerrainType2Id__staticgetindex takes integer key returns integer
        return (LoadInteger((UnitVisualMods___hashTable), (((s__TerrainType2Id_KEY))), (key))) // INLINED!!
    endfunction
    
    function s__TerrainType2Id__staticsetindex takes integer key,integer value returns nothing
        call SaveInteger((UnitVisualMods___hashTable), (((s__TerrainType2Id_KEY))), (key), ( value)) // INLINED!!
    endfunction


//==================================================================================================
//                                        Source Code
//==================================================================================================

function GUMS_I2PlayerColor takes integer i returns playercolor
    return UnitVisualMods___I2PC[i]
endfunction

function GUMS_AddStructureFlightAbility takes unit structure returns nothing
    local real facing

    if not HaveSavedReal(UnitVisualMods___hashTable, GetHandleId(structure), - 2) then
        set facing=GetUnitFacing(structure)
        call SaveReal(UnitVisualMods___hashTable, GetHandleId(structure), - 2, facing)
        call UnitAddAbility(structure, 'DEDF')
        call SetUnitFacingTimed(structure, facing, 0)
        call GroupAddUnit(UnitVisualMods___loopGroup, structure)
    else
        call UnitAddAbility(structure, 'DEDF')
        call SetUnitFacingTimed(structure, LoadReal(UnitVisualMods___hashTable, GetHandleId(structure), - 2), 0)
    endif
endfunction

function GUMS_RegisterImmovableUnit takes unit whichUnit returns nothing
    call GroupAddUnit(UnitVisualMods___loopGroup, whichUnit)
endfunction

//////////////////////////////////////////////////////
constant function GUMSCustomUnitNameColor takes nothing returns string
    return "|cffffcc00"
endfunction

function GUMSConvertToCustomName takes string name returns string
    return ("|cffffcc00") + name + "|r" // INLINED!!
endfunction

function GUMSConvertFromCustomName takes string name returns string
    return SubString(name, 10, StringLength(name) - 2)
endfunction

//==========================================
//CONSTANT FUNCTIONS FOR HASHTABLE ADDRESSES

function GUMS_GetUnitSelectionType takes unit whichUnit returns integer
    return LoadInteger(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___SELECT)
endfunction

function GUMS_GetTerrainTileIndex takes integer terrainType returns integer
    return (LoadInteger((UnitVisualMods___hashTable), (((s__TerrainType2Id_KEY))), ((terrainType)))) // INLINED!!
endfunction
//==========================================
//GUMS SELECTION TYPE CONSTANTS
constant function GUMS_SELECTION_DEFAULT takes nothing returns integer
    return 0
endfunction

constant function GUMS_SELECTION_DRAG takes nothing returns integer
    return 1
endfunction

constant function GUMS_SELECTION_UNSELECTABLE takes nothing returns integer
    return 2
endfunction
//==========================================

//==========================================
// GUMS Animation Tag Utilities
function GUMSTagDict takes string whichStr returns string
    set whichStr=StringCase(whichStr, false)
    
    if whichStr == "gold" then
        return "g"
    endif
    if whichStr == "g" then
        return "gold"
    endif
    
    if whichStr == "lumber" then
        return "l"
    endif
    if whichStr == "l" then
        return "lumber"
    endif
    
    if whichStr == "alternate" then
        return "a"
    endif
    if whichStr == "a" then
        return "alternate"
    endif
    
    if whichStr == "swim" then
        return "s"
    endif
    if whichStr == "s" then
        return "swim"
    endif
    
    if whichStr == "upgrade" then
        return "u"
    endif
    if whichStr == "u" then
        return "upgrade"
    endif
    
    if whichStr == "defend" then
        return "d"
    endif
    if whichStr == "d" then
        return "defend"
    endif
    
    if whichStr == "work" then
        return "w"
    endif
    if whichStr == "w" then
        return "work"
    endif
    
    if whichStr == "first" then
        return "n1"
    endif
    if whichStr == "second" then
        return "n2"
    endif
    if whichStr == "third" then
        return "n3"
    endif
    if whichStr == "fourth" then
        return "n4"
    endif
    if whichStr == "fifth" then
        return "n5"
    endif
    
    if whichStr == "n1" then
        return "first"
    endif
    if whichStr == "n2" then
        return "second"
    endif
    if whichStr == "n3" then
        return "third"
    endif
    if whichStr == "n4" then
        return "fourth"
    endif
    if whichStr == "n5" then
        return "fifth"
    endif
    
    return whichStr
endfunction

function GUMSConvertTags takes string whichStr returns string
    local string result= ""
    local integer cutToComma= - 1
    loop
    exitwhen cutToComma == 0
        //call BJDebugMsg("Here:" + whichStr + "hello")
        set cutToComma=CutToCharacter(whichStr , " ")
        set result=result + GUMSTagDict(SubString(whichStr, 0, cutToComma)) + " "
        set whichStr=SubString(whichStr, cutToComma + 1, StringLength(whichStr) + 1)
    endloop
    return SubString(result, 0, StringLength(result) - 1)
endfunction
//==========================================

//==========================================
// GUMS Flying Height and Facing Timer

//THIS FUNCTION IS USED TO SET FLYING HEIGHT AND FACING OF IMMOBILE UNITS (NO 'Amov')
function GUMSGroupFunction takes nothing returns nothing
    local unit enumUnit= GetEnumUnit()
    local integer unitId= GetHandleId(enumUnit)
    local real face
    local boolean removeReal
    
    
    //Check if unit is having it's facing changed and apply values accordingly
    if not HaveSavedReal(UnitVisualMods___hashTable, unitId, - 2) then
        set face=GetUnitFacing(enumUnit)
        set removeReal=false
    else
        set face=LoadReal(UnitVisualMods___hashTable, unitId, - 2)
        set removeReal=true
    endif
    
    //Move unit to it's own position to fix flying height and facing
    if not HaveSavedInteger(UnitVisualMods___hashTable, unitId, - 1) then
        call SaveInteger(UnitVisualMods___hashTable, unitId, - 1, 0)
        call SetUnitPosition(enumUnit, GetUnitX(enumUnit), GetUnitY(enumUnit))
    elseif GetUnitFacing(enumUnit) < face - 0.001 or GetUnitFacing(enumUnit) > face + 0.001 then
        call SetUnitPosition(enumUnit, GetUnitX(enumUnit), GetUnitY(enumUnit))
    else
        call RemoveSavedInteger(UnitVisualMods___hashTable, unitId, - 1)
        if removeReal then //Not sure if removing unexisting stuff can cause crashes, but might as well avoid it
            call RemoveSavedReal(UnitVisualMods___hashTable, unitId, - 2)
        endif
        call GroupRemoveUnit(UnitVisualMods___loopGroup, enumUnit)
        call SetUnitPosition(enumUnit, GetUnitX(enumUnit), GetUnitY(enumUnit))
    endif

    set enumUnit=null
endfunction

//THIS FUNCTION IS RUN ON A TIMER THAT CALLS THE FUNCTION ABOVE
function GUMSTimerFunction takes nothing returns nothing
    call ForGroup(UnitVisualMods___loopGroup, function GUMSGroupFunction)
endfunction
//==========================================

//==========================================
// GUMS API
//==========================================

function GUMSClearUnitData takes unit whichUnit returns nothing
    call GroupRemoveUnit(UnitVisualMods___loopGroup, whichUnit)
    call FlushChildHashtable(UnitVisualMods___hashTable, GetHandleId(whichUnit))
endfunction

//==========================================
// GUMS Setters

//Set Scale
function GUMSSetUnitScale takes unit whichUnit,real scale returns nothing
    call SetUnitScale(whichUnit, scale, scale, scale)
    call SaveReal(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___SCALE, scale)
endfunction

//Set Vertex Color
function GUMSSetUnitVertexColor takes unit whichUnit,real red,real green,real blue,real trans returns nothing
    local integer intRed= R2I(2.55 * red)
    local integer intGreen= R2I(2.55 * green)
    local integer intBlue= R2I(2.55 * blue)
    local integer intAlpha= R2I(2.55 * ( 100. - trans ))
    
    call SetUnitVertexColor(whichUnit, intRed, intGreen, intBlue, intAlpha)
    call SaveInteger(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___RED, intRed)
    call SaveInteger(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___GREEN, intGreen)
    call SaveInteger(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___BLUE, intBlue)
    call SaveInteger(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___ALPHA, intAlpha)
endfunction

//Set Player Color (why in hell can't this be retrieved with natives?!)
function GUMSSetUnitColor takes unit whichUnit,integer color returns nothing
    if color <= bj_MAX_PLAYER_SLOTS and color >= 1 then
        call SaveInteger(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___COLOR, color)
        call SetUnitColor(whichUnit, UnitVisualMods___I2PC[color])
    else
        call RemoveSavedInteger(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___COLOR)
//textmacro instance: GUMS_Config_ResetColorFunc()
    // DEFAULT
    //call SetUnitColor(whichUnit, GetPlayerColor(GetOwningPlayer(whichUnit)))
    
    // LOP
    call SetUnitColor(whichUnit, UnitVisualMods___I2PC[udg_System_PlayerColor[GetPlayerId(GetOwningPlayer(whichUnit)) + 1]])
//end of: GUMS_Config_ResetColorFunc()
    endif
endfunction

//Set Animation Speed
function GUMSSetUnitAnimSpeed takes unit whichUnit,real speedMultiplier returns nothing
    call SetUnitTimeScale(whichUnit, speedMultiplier)
    call SaveReal(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___ASPEED, speedMultiplier)
endfunction

//Set Animation Tag
function GUMSAddUnitAnimationTag takes unit whichUnit,string whichTag returns nothing
    local integer unitId= GetHandleId(whichUnit)
    local string oldTag= GUMSConvertTags(LoadStr(UnitVisualMods___hashTable, unitId, UnitVisualMods___ATAG))
    call RemoveSavedString(UnitVisualMods___hashTable, unitId, UnitVisualMods___ATAG)
    call AddUnitAnimationProperties(whichUnit, oldTag, false)
    if whichTag != "" then
        
        call AddUnitAnimationProperties(whichUnit, whichTag, true)
        set whichTag=GUMSConvertTags(whichTag)
        //call BJDebugMsg(whichTag)
        call SaveStr(UnitVisualMods___hashTable, unitId, UnitVisualMods___ATAG, whichTag)
    endif
endfunction

//==========================================
// GUMS Getters

    

        function s__UnitVisuals__get_values takes integer this returns integer
            return ((this)) // INLINED!!
        endfunction





    
    function s__UnitVisuals_get takes unit whichUnit returns integer
        return GetHandleId(whichUnit)
    endfunction
    
    function s__UnitVisuals_hasScale takes integer this returns boolean
        return (HaveSavedReal((UnitVisualMods___hashTable), (((((this))))), (UnitVisualMods___SCALE))) // INLINED!!
    endfunction
    
    function s__UnitVisuals_hasVertexColor takes integer this,integer whichChannel returns boolean
        return (HaveSavedInteger((UnitVisualMods___hashTable), (((this))), (whichChannel))) // INLINED!!
    endfunction
    
    function s__UnitVisuals_hasColor takes integer this returns boolean
        return (HaveSavedInteger((UnitVisualMods___hashTable), (((this))), (UnitVisualMods___COLOR))) // INLINED!!
    endfunction
    
    function s__UnitVisuals_hasAnimSpeed takes integer this returns boolean
        return (HaveSavedReal((UnitVisualMods___hashTable), (((((this))))), (UnitVisualMods___ASPEED))) // INLINED!!
    endfunction
    
    function s__UnitVisuals_hasAnimTag takes integer this returns boolean
        return (HaveSavedString((UnitVisualMods___hashTable), (((((this))))), (UnitVisualMods___ATAG))) // INLINED!!
    endfunction
    
    function s__UnitVisuals_getScale takes integer this returns string
        if (HaveSavedReal((UnitVisualMods___hashTable), ((((((this)))))), (UnitVisualMods___SCALE))) then // INLINED!!
            return R2S((LoadReal((UnitVisualMods___hashTable), (((((this))))), (UnitVisualMods___SCALE)))) // INLINED!!
        else
            return "D" //D stands for default
        endif
    endfunction
    
    function s__UnitVisuals_getVertexColor takes integer this,integer r1g2b3a4 returns string
        if (HaveSavedInteger((UnitVisualMods___hashTable), ((((this)))), ((r1g2b3a4)))) then // INLINED!!
            return I2S((LoadInteger((UnitVisualMods___hashTable), (((this))), (r1g2b3a4)))) // INLINED!!
        else
            return "D"
        endif
    endfunction
    
    function s__UnitVisuals_getVertexRed takes integer this returns string
        return s__UnitVisuals_getVertexColor(this,UnitVisualMods___RED)
    endfunction
    
    function s__UnitVisuals_getVertexGreen takes integer this returns string
        return s__UnitVisuals_getVertexColor(this,UnitVisualMods___GREEN)
    endfunction
    
    function s__UnitVisuals_getVertexBlue takes integer this returns string
        return s__UnitVisuals_getVertexColor(this,UnitVisualMods___BLUE)
    endfunction
    
    function s__UnitVisuals_getVertexAlpha takes integer this returns string
        return s__UnitVisuals_getVertexColor(this,UnitVisualMods___ALPHA)
    endfunction
    
    function s__UnitVisuals_getColor takes integer this returns string
        if (HaveSavedInteger((UnitVisualMods___hashTable), ((((this)))), (UnitVisualMods___COLOR))) then // INLINED!!
            return I2S((LoadInteger((UnitVisualMods___hashTable), (((this))), (UnitVisualMods___COLOR)))) // INLINED!!
        else
            return "D"
        endif
    endfunction
    
    function s__UnitVisuals_getAnimSpeed takes integer this returns string
        if (HaveSavedReal((UnitVisualMods___hashTable), ((((((this)))))), (UnitVisualMods___ASPEED))) then // INLINED!!
            return R2S((LoadReal((UnitVisualMods___hashTable), (((((this))))), (UnitVisualMods___ASPEED)))) // INLINED!!
        else
            return "D"
        endif
    endfunction
    
    function s__UnitVisuals_getAnimTag takes integer this returns string
        if (HaveSavedString((UnitVisualMods___hashTable), ((((((this)))))), (UnitVisualMods___ATAG))) then // INLINED!!
            return (LoadStr((UnitVisualMods___hashTable), (((((this))))), (UnitVisualMods___ATAG))) // INLINED!!
        else
            return "D"
        endif
    endfunction

function GUMS_HaveSavedScale takes unit whichUnit returns boolean
    return HaveSavedReal(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___SCALE)
endfunction

function GUMS_HaveSavedVertexColor takes unit whichUnit,integer r1b2g3a4 returns boolean
    return HaveSavedInteger(UnitVisualMods___hashTable, GetHandleId(whichUnit), r1b2g3a4)
endfunction

function GUMS_HaveSavedColor takes unit whichUnit returns boolean
    return HaveSavedInteger(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___COLOR)
endfunction

function GUMS_HaveSavedAnimSpeed takes unit whichUnit returns boolean
    return HaveSavedReal(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___ASPEED)
endfunction

function GUMS_HaveSavedAnimationTag takes unit whichUnit returns boolean
    return HaveSavedString(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___ATAG)
endfunction 

//THESE FUNCTIONS RETRIEVE THE SAVED VALUES IN THE HASHTABLE OR RETURN "D" IF THERE IS NO SAVED VALUE
//GET Scale
function GUMSGetUnitScale takes unit whichUnit returns string
    return s__UnitVisuals_getScale((GetHandleId((whichUnit)))) // INLINED!!
endfunction

//GET Vertex Color
function GUMSGetUnitVertexColor takes unit whichUnit,integer r1g2b3a4 returns string
    return s__UnitVisuals_getVertexColor((GetHandleId((whichUnit))),r1g2b3a4) // INLINED!!
endfunction

//GET Player Color (why in hell can't this be retrieved with natives?!)
function GUMSGetUnitColor takes unit whichUnit returns string
    return s__UnitVisuals_getColor((GetHandleId((whichUnit)))) // INLINED!!
endfunction

//GET Animation Speed
function GUMSGetUnitAnimSpeed takes unit whichUnit returns string
    return s__UnitVisuals_getAnimSpeed((GetHandleId((whichUnit)))) // INLINED!!
endfunction

//GET Animation Tag
function GUMSGetUnitAnimationTag takes unit whichUnit returns string
    return s__UnitVisuals_getAnimTag((GetHandleId((whichUnit)))) // INLINED!!
endfunction

///////////////////////////
//These functions are used to work with unit names
//
//The unit's default proper name is saved in a Hashtable so it can be reset
///////////////////////////

function GUMSUnitHasCustomName takes integer unitHandle returns boolean
    return HaveSavedString(UnitVisualMods___hashTable, unitHandle, UnitVisualMods___NAME)
endfunction

function GUMSGetDefaultName takes integer unitHandle returns string
    return LoadStr(UnitVisualMods___hashTable, unitHandle, UnitVisualMods___NAME)
endfunction

function GUMSResetUnitName takes unit whichUnit returns nothing
    local integer unitHandle= GetHandleId(whichUnit)
    
    if IsUnitType(whichUnit, UNIT_TYPE_HERO) then
        call BlzSetHeroProperName(whichUnit, (LoadStr(UnitVisualMods___hashTable, (unitHandle), UnitVisualMods___NAME))) // INLINED!!
    else
        call BlzSetUnitName(whichUnit, (LoadStr(UnitVisualMods___hashTable, (unitHandle), UnitVisualMods___NAME))) // INLINED!!
    endif
    
    call RemoveSavedString(UnitVisualMods___hashTable, unitHandle, UnitVisualMods___NAME)
endfunction

function GUMSSetUnitName takes unit whichUnit,string name returns nothing
    if name != "" then
        if IsUnitType(whichUnit, UNIT_TYPE_HERO) then
            if not (HaveSavedString(UnitVisualMods___hashTable, (GetHandleId(whichUnit)), UnitVisualMods___NAME)) then // INLINED!!
                call SaveStr(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___NAME, GetHeroProperName(whichUnit))
            endif
            call BlzSetHeroProperName(whichUnit, (("|cffffcc00") + (name) + "|r")) // INLINED!!
        else
            if not (HaveSavedString(UnitVisualMods___hashTable, (GetHandleId(whichUnit)), UnitVisualMods___NAME)) then // INLINED!!
                call SaveStr(UnitVisualMods___hashTable, GetHandleId(whichUnit), UnitVisualMods___NAME, GetUnitName(whichUnit))
            endif
            call BlzSetUnitName(whichUnit, (("|cffffcc00") + (name) + "|r")) // INLINED!!
        endif
    else
        call GUMSResetUnitName(whichUnit)
    endif
endfunction

function GUMSGetUnitName takes unit whichUnit returns string
    if IsUnitType(whichUnit, UNIT_TYPE_HERO) then
        return GUMSConvertFromCustomName(GetHeroProperName(whichUnit))
    else
        return GUMSConvertFromCustomName(GetUnitName(whichUnit))
    endif
endfunction


//==========================================
// GUMS Copying Utilities

// Does not copy:
//    -Unit selectability
//    -Unit custom name

// Creates a new unit and copies all the GUMS values from the old unit to the newly created one.
// bj_lastCreatedUnit is set to the newly created unit.
// If the specified newType is nonpositive, then the created unit will have the same type as the copied one
function GUMSCopyUnit takes unit whichUnit,player owner,integer newType returns nothing
    local real fangle= GetUnitFacing(whichUnit)
    if newType < 1 then
        set newType=GetUnitTypeId(whichUnit)
    endif
    set bj_lastCreatedUnit=CreateUnit(owner, newType, GetUnitX(whichUnit), GetUnitY(whichUnit), fangle)
    if UnitAddAbility(bj_lastCreatedUnit, 'Amrf') then
        call UnitRemoveAbility(bj_lastCreatedUnit, 'Amrf')
    endif
    call SetUnitFlyHeight(bj_lastCreatedUnit, GetUnitFlyHeight(whichUnit), 0)
    //Fix Flying (TLLOP SPECIFIC)
    if GetUnitAbilityLevel(bj_lastCreatedUnit, 'Amov') == 0 then
        if IsUnitType(bj_lastCreatedUnit, UNIT_TYPE_STRUCTURE) then
            if GetUnitFlyHeight(whichUnit) > 0.5 then
                call SaveReal(UnitVisualMods___hashTable, GetHandleId(bj_lastCreatedUnit), - 2, fangle)
                call UnitAddAbility(bj_lastCreatedUnit, 'DEDF')
                call IssueImmediateOrder(bj_lastCreatedUnit, "unroot")
                call SetUnitFacingTimed(bj_lastCreatedUnit, fangle, 0)
            endif
        endif
        call GroupAddUnit(UnitVisualMods___loopGroup, bj_lastCreatedUnit)
    endif
    //EndofFix
    //FIX Flying (ANY MAP)
//    if GetUnitAbilityLevel(bj_lastCreatedUnit, 'Amov') == 0 then
//        call GroupAddUnit(loopGroup, bj_lastCreatedUnit)
//    endif
    //EndofFix
        if (s__UnitVisuals_getScale((GetHandleId(((whichUnit)))))) != "D" then // INLINED!!
        call GUMSSetUnitScale(bj_lastCreatedUnit , S2R((s__UnitVisuals_getScale((GetHandleId(((whichUnit)))))))) // INLINED!!
    endif
    if (s__UnitVisuals_getVertexColor((GetHandleId(((whichUnit )))),( 1))) != "D" then // INLINED!!
        call GUMSSetUnitVertexColor(bj_lastCreatedUnit , S2I((s__UnitVisuals_getVertexColor((GetHandleId(((whichUnit )))),( 1)))) / 2.55 , S2I((s__UnitVisuals_getVertexColor((GetHandleId(((whichUnit )))),( 2)))) / 2.55 , S2I((s__UnitVisuals_getVertexColor((GetHandleId(((whichUnit )))),( 3)))) / 2.55 , ( 255 - S2I((s__UnitVisuals_getVertexColor((GetHandleId(((whichUnit )))),( 4)))) ) / 2.55) // INLINED!!
    endif
    if (s__UnitVisuals_getColor((GetHandleId(((whichUnit)))))) != "D" then // INLINED!!
        call GUMSSetUnitColor(bj_lastCreatedUnit , S2I((s__UnitVisuals_getColor((GetHandleId(((whichUnit)))))))) // INLINED!!
    endif
    if (s__UnitVisuals_getAnimSpeed((GetHandleId(((whichUnit)))))) != "D" then // INLINED!!
        call GUMSSetUnitAnimSpeed(bj_lastCreatedUnit , S2R((s__UnitVisuals_getAnimSpeed((GetHandleId(((whichUnit)))))))) // INLINED!!
    endif
    if (s__UnitVisuals_getAnimTag((GetHandleId(((whichUnit)))))) != "D" then // INLINED!!
        call GUMSAddUnitAnimationTag(bj_lastCreatedUnit , GUMSConvertTags((s__UnitVisuals_getAnimTag((GetHandleId(((whichUnit)))))))) // INLINED!!
    endif
endfunction

// Copies all GUMS values from one source unit to a target unit.
function GUMSCopyValues takes unit source,unit target returns nothing
    local real fangle= GetUnitFacing(source)
    local integer sourceId= GetHandleId(source)
    
    if UnitAddAbility(target, 'Amrf') then
        call UnitRemoveAbility(target, 'Amrf')
    endif
    //Fix Flying (TLLOP SPECIFIC)
    if GetUnitAbilityLevel(target, 'Amov') == 0 then
        if IsUnitType(target, UNIT_TYPE_STRUCTURE) then
            if GetUnitFlyHeight(source) > 0.5 then
            call SaveReal(UnitVisualMods___hashTable, GetHandleId(target), - 2, fangle)
                if UnitAddAbility(target, 'DEDF') then
                    
                endif
                call IssueImmediateOrder(target, "unroot")
                call SetUnitFacingTimed(target, fangle, 0)
            endif
        endif
        call GroupAddUnit(UnitVisualMods___loopGroup, target)
    endif
    //EndofFix
    //FIX Flying (ANY MAP)
//    if GetUnitAbilityLevel(bj_lastCreatedUnit, 'Amov') == 0 then
//        call GroupAddUnit(loopGroup, bj_lastCreatedUnit)
//    endif
    //EndofFix
    if (HaveSavedReal((UnitVisualMods___hashTable), ((((((sourceId)))))), (UnitVisualMods___SCALE))) then // INLINED!!
        call GUMSSetUnitScale(target , (LoadReal((UnitVisualMods___hashTable), (((((sourceId))))), (UnitVisualMods___SCALE)))) // INLINED!!
    endif
    if (HaveSavedInteger((UnitVisualMods___hashTable), ((((sourceId)))), ((UnitVisualMods___RED)))) then // INLINED!!
        call GUMSSetUnitVertexColor(target , (LoadInteger((UnitVisualMods___hashTable), (((sourceId))), (UnitVisualMods___RED))) / 2.55 , (LoadInteger((UnitVisualMods___hashTable), (((sourceId))), (UnitVisualMods___GREEN))) / 2.55 , (LoadInteger((UnitVisualMods___hashTable), (((sourceId))), (UnitVisualMods___BLUE))) / 2.55 , ( 255 - (LoadInteger((UnitVisualMods___hashTable), (((sourceId))), (UnitVisualMods___ALPHA))) ) / 2.55) // INLINED!!
    endif
    if (HaveSavedInteger((UnitVisualMods___hashTable), ((((sourceId)))), (UnitVisualMods___COLOR))) then // INLINED!!
        call GUMSSetUnitColor(target , (LoadInteger((UnitVisualMods___hashTable), (((sourceId))), (UnitVisualMods___COLOR)))) // INLINED!!
    endif
    if (HaveSavedReal((UnitVisualMods___hashTable), ((((((sourceId)))))), (UnitVisualMods___ASPEED))) then // INLINED!!
        call GUMSSetUnitAnimSpeed(target , (LoadReal((UnitVisualMods___hashTable), (((((sourceId))))), (UnitVisualMods___ASPEED)))) // INLINED!!
    endif
    if (HaveSavedString((UnitVisualMods___hashTable), ((((((sourceId)))))), (UnitVisualMods___ATAG))) then // INLINED!!
        call GUMSAddUnitAnimationTag(target , (LoadStr((UnitVisualMods___hashTable), (((((sourceId))))), (UnitVisualMods___ATAG)))) // INLINED!!
    endif
endfunction

//==========================================
// GUMS Unit Selectability Utilities

function GUMSMakeUnitUnSelectable takes unit whichUnit returns nothing
    local integer unitId= GetHandleId(whichUnit)
    local integer selectionType= LoadInteger(UnitVisualMods___hashTable, unitId, UnitVisualMods___SELECT)

    if selectionType == (2) then // INLINED!!
        return //Unit is already unselectable, do nothing.
    endif

    if UnitAddAbility(whichUnit, 'Aloc') then //Do nothing is unit has locust by default.
        call UnitRemoveAbility(whichUnit, 'Aloc')
        call SaveInteger(UnitVisualMods___hashTable, unitId, UnitVisualMods___SELECT, (2)) // INLINED!!
        call SetUnitInvulnerable(whichUnit, true)
    endif
endfunction

function GUMSMakeUnitDragSelectable takes unit whichUnit returns nothing
    local integer unitId= GetHandleId(whichUnit)
    local integer selectionType= LoadInteger(UnitVisualMods___hashTable, unitId, UnitVisualMods___SELECT)

    if selectionType == (1) then // INLINED!!
        return //Unit is already drag-selectable, do nothing.
    endif
    
    if selectionType != (2) then //Check if unit is already unselectable. // INLINED!!
        if UnitAddAbility(whichUnit, 'Aloc') then //Do nothing is unit has locust by default.
            call UnitRemoveAbility(whichUnit, 'Aloc')
            call SaveInteger(UnitVisualMods___hashTable, unitId, UnitVisualMods___SELECT, (1)) // INLINED!!
        else
            return
        endif
    endif
    
    //This if block makes the unit drag-selectable after removing the locust ability.
    if not IsUnitHidden(whichUnit) then
        call ShowUnit(whichUnit, false)
        call ShowUnit(whichUnit, true)
    endif
endfunction

function GUMSMakeUnitSelectable takes unit whichUnit returns nothing
    local integer unitId= GetHandleId(whichUnit)
    local integer selectionType= LoadInteger(UnitVisualMods___hashTable, unitId, UnitVisualMods___SELECT)
    
    if selectionType == (0) then // INLINED!!
        return //Unit has not been give a special selection type, do nothing.
    endif

    call ShowUnit(whichUnit, false) //Hide old unit.
    call GUMSCopyUnit(whichUnit , GetOwningPlayer(whichUnit) , (0)) //Create fresh copy that is selectable. // INLINED!!
endfunction


//////////////////////////////////////////////////////
//End of GUMS
//////////////////////////////////////////////////////

function GUMSSetUnitFacing takes unit whichUnit,real newAngle returns nothing
    call SetUnitPosition(whichUnit, GetUnitX(whichUnit), GetUnitY(whichUnit))
    call SetUnitFacing(whichUnit, newAngle)
    call GroupAddUnit(UnitVisualMods___loopGroup, whichUnit)
    call SaveReal(UnitVisualMods___hashTable, GetHandleId(whichUnit), - 2, ModuloReal(newAngle, 360))
endfunction

function GUMSSetUnitFlyHeight takes unit whichUnit,real newHeight returns nothing
    if UnitAddAbility(whichUnit, 'Amrf') then
        call UnitRemoveAbility(whichUnit, 'Amrf')
    endif
    call SetUnitFlyHeight(whichUnit, newHeight, 99999.00)
    call SetUnitPosition(whichUnit, GetUnitX(whichUnit), GetUnitY(whichUnit))
    call GroupAddUnit(UnitVisualMods___loopGroup, whichUnit)
endfunction

function GUMSSetUnitVertexColorString takes unit whichUnit,string args,string separator returns nothing
    local integer cutToComma
    local real cRed
    local real cGreen
    local real cBlue
    local real cAlpha
    
    set cutToComma=CutToCharacter(args , separator)
    set cRed=S2R((SubString((args ), 0, ( cutToComma)))) // INLINED!!
    set args=CutToCommaShorten(args , cutToComma)
    set cutToComma=CutToCharacter(args , separator)
    set cGreen=S2R((SubString((args ), 0, ( cutToComma)))) // INLINED!!
    set args=CutToCommaShorten(args , cutToComma)
    set cutToComma=CutToCharacter(args , separator)
    set cBlue=S2R((SubString((args ), 0, ( cutToComma)))) // INLINED!!
    set args=CutToCommaShorten(args , cutToComma)
    set cutToComma=CutToCharacter(args , separator)
    set cAlpha=S2R((SubString((args ), 0, ( cutToComma)))) // INLINED!!
    set args=CutToCommaShorten(args , cutToComma)
    
    call GUMSSetUnitVertexColor(whichUnit , cRed , cGreen , cBlue , cAlpha)
endfunction



//==================================================================================================
//                                        Initialization
//==================================================================================================

// When a unit cancels of finishes an upgrade, reapply its Visual modifications.
function GUMS_FixUpgrades takes nothing returns nothing
    call GUMSCopyValues(GetTriggerUnit() , GetTriggerUnit())
endfunction


function UnitVisualMods___onInit takes nothing returns nothing
    local trigger fixUpgrades= CreateTrigger()
    local integer i
    local timer t= CreateTimer()
    
    call TriggerRegisterAnyUnitEventBJ(fixUpgrades, EVENT_PLAYER_UNIT_UPGRADE_CANCEL)
    call TriggerRegisterAnyUnitEventBJ(fixUpgrades, EVENT_PLAYER_UNIT_UPGRADE_FINISH)
    call TriggerAddAction(fixUpgrades, function GUMS_FixUpgrades)
    

        set UnitVisualMods___hashTable=InitHashtable()

    
    set i=1
    loop
        exitwhen i > bj_MAX_PLAYER_SLOTS
        set UnitVisualMods___I2PC[i]=GetPlayerColor(Player(i - 1))
        set i=i + 1
    endloop
    
    call TimerStart(t, 0.1, true, function GUMSTimerFunction)
    
    set i=0
    loop
        exitwhen i > 15
        call SaveInteger((UnitVisualMods___hashTable), (((s__TerrainType2Id_KEY))), ((udg_TileSystem_TILES[i])), ( ( i))) // INLINED!!
        set i=i + 1
    endloop
endfunction

//==================================================================================================

//library UnitVisualMods ends
//library AutoRectEnvironment:


//textmacro instance: TableStruct_NewStaticPrimitiveField("lastCameraX", "real")
    function s__AutoRectEnvironment___Globals__get_lastCameraX takes nothing returns real
        return (LoadReal(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraX_impl))) // INLINED!!
    endfunction
    
    function s__AutoRectEnvironment___Globals__set_lastCameraX takes real new_lastCameraX returns nothing
        call SaveReal(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraX_impl), (( new_lastCameraX)*1.0)) // INLINED!!
    endfunction
    
    function s__AutoRectEnvironment___Globals_lastCameraXClear takes nothing returns nothing
        call RemoveSavedReal(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraX_impl)) // INLINED!!
    endfunction
//end of: TableStruct_NewStaticPrimitiveField("lastCameraX", "real")
//textmacro instance: TableStruct_NewStaticPrimitiveField("lastCameraY", "real")
    function s__AutoRectEnvironment___Globals__get_lastCameraY takes nothing returns real
        return (LoadReal(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraY_impl))) // INLINED!!
    endfunction
    
    function s__AutoRectEnvironment___Globals__set_lastCameraY takes real new_lastCameraY returns nothing
        call SaveReal(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraY_impl), (( new_lastCameraY)*1.0)) // INLINED!!
    endfunction
    
    function s__AutoRectEnvironment___Globals_lastCameraYClear takes nothing returns nothing
        call RemoveSavedReal(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraY_impl)) // INLINED!!
    endfunction
//end of: TableStruct_NewStaticPrimitiveField("lastCameraY", "real")
//textmacro instance: TableStruct_NewStaticPrimitiveField("rectWasMoved", "boolean")
    function s__AutoRectEnvironment___Globals__get_rectWasMoved takes nothing returns boolean
        return (LoadBoolean(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_rectWasMoved_impl))) // INLINED!!
    endfunction
    
    function s__AutoRectEnvironment___Globals__set_rectWasMoved takes boolean new_rectWasMoved returns nothing
        call SaveBoolean(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_rectWasMoved_impl), ( new_rectWasMoved)) // INLINED!!
    endfunction
    
    function s__AutoRectEnvironment___Globals_rectWasMovedClear takes nothing returns nothing
        call RemoveSavedBoolean(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_rectWasMoved_impl)) // INLINED!!
    endfunction
//end of: TableStruct_NewStaticPrimitiveField("rectWasMoved", "boolean")
    
//textmacro instance: TableStruct_NewStaticHandleField("lastCameraRect", "rect")
    function s__AutoRectEnvironment___Globals__get_lastCameraRect takes nothing returns rect
        return (LoadRectHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraRect_impl))) // INLINED!!
    endfunction
    
    function s__AutoRectEnvironment___Globals__set_lastCameraRect takes rect new_lastCameraRect returns nothing
        call s__TableStruct_setHandle(s__AutoRectEnvironment___Globals_static_members_key , s__AutoRectEnvironment___Globals_lastCameraRect_impl , new_lastCameraRect)
    endfunction
    
    function s__AutoRectEnvironment___Globals_lastCameraRectClear takes nothing returns nothing
        call RemoveSavedHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraRect_impl)) // INLINED!!
    endfunction
//end of: TableStruct_NewStaticHandleField("lastCameraRect", "rect")
//textmacro instance: TableStruct_NewStaticHandleField("allRects", "region")
    function s__AutoRectEnvironment___Globals__get_allRects takes nothing returns region
        return (LoadRegionHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_allRects_impl))) // INLINED!!
    endfunction
    
    function s__AutoRectEnvironment___Globals__set_allRects takes region new_allRects returns nothing
        call s__TableStruct_setHandle(s__AutoRectEnvironment___Globals_static_members_key , s__AutoRectEnvironment___Globals_allRects_impl , new_allRects)
    endfunction
    
    function s__AutoRectEnvironment___Globals_allRectsClear takes nothing returns nothing
        call RemoveSavedHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_allRects_impl)) // INLINED!!
    endfunction
//end of: TableStruct_NewStaticHandleField("allRects", "region")
    
//textmacro instance: TableStruct_NewStaticStructField("rects", "LinkedHashSet")
    function s__AutoRectEnvironment___Globals__get_rects takes nothing returns integer
        return (LoadInteger(ConstTable___ht, (((s__AutoRectEnvironment___Globals_static_members_key))), (s__AutoRectEnvironment___Globals_rects_impl))) // INLINED!!
    endfunction
    
    function s__AutoRectEnvironment___Globals__set_rects takes integer new_rects returns nothing
        call SaveInteger(ConstTable___ht, (((s__AutoRectEnvironment___Globals_static_members_key))), (s__AutoRectEnvironment___Globals_rects_impl), ( new_rects)) // INLINED!!
    endfunction
    
    function s__AutoRectEnvironment___Globals_rectsClear takes nothing returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((s__AutoRectEnvironment___Globals_static_members_key))), (s__AutoRectEnvironment___Globals_rects_impl)) // INLINED!!
    endfunction
    
    function s__AutoRectEnvironment___Globals_rectsExists takes nothing returns boolean
        return (HaveSavedInteger(ConstTable___ht, (((s__AutoRectEnvironment___Globals_static_members_key))), (s__AutoRectEnvironment___Globals_rects_impl))) // INLINED!!
    endfunction
//end of: TableStruct_NewStaticStructField("rects", "LinkedHashSet")
    
//textmacro instance: TableStruct_NewConstTableField("public","id2")

        constant function s__AutoRectEnvironment___Globals__get_id2 takes nothing returns integer
            return s__AutoRectEnvironment___Globals_id2_impl
        endfunction





//end of: TableStruct_NewConstTableField("public","id2")

function AutoRectEnvironment_RegisterRect takes rect r returns nothing
    local integer rId= GetHandleId(r)
    
    if not (HaveSavedHandle(ConstTable___ht, ((((s__AutoRectEnvironment___Globals_id2_impl)))), (rId))) then // INLINED!!
        call SaveRectHandle(ConstTable___ht, ((((s__AutoRectEnvironment___Globals_id2_impl)))), (rId), ( r)) // INLINED!!
        call RegionAddRect((LoadRegionHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_allRects_impl))), r) // INLINED!!
        call GLHS___AddBefore((((LoadInteger(ConstTable___ht, (((s__AutoRectEnvironment___Globals_static_members_key))), (s__AutoRectEnvironment___Globals_rects_impl))))) , (0 ) , ( (rId))) // INLINED!!
    endif
endfunction

function AutoRectEnvironment_DeRegisterRect takes rect r returns nothing
    local integer rId= GetHandleId(r)
    
    // This rect can be different for each player. Null the handle to reduce reference counter.
    if r == (LoadRectHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraRect_impl))) then // INLINED!!
        call s__TableStruct_setHandle(s__AutoRectEnvironment___Globals_static_members_key , s__AutoRectEnvironment___Globals_lastCameraRect_impl , (null)) // This possibly avoids desyncs. // INLINED!!
    endif
    
    if (HaveSavedHandle(ConstTable___ht, ((((s__AutoRectEnvironment___Globals_id2_impl)))), (rId))) then // INLINED!!
        call SaveBoolean(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_rectWasMoved_impl), ( (true))) // INLINED!!
        call RemoveSavedHandle(ConstTable___ht, ((((s__AutoRectEnvironment___Globals_id2_impl)))), (rId)) // INLINED!!
        call RegionClearRect((LoadRegionHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_allRects_impl))), r) // INLINED!!
        call s__LinkedHashSet_delete(((LoadInteger(ConstTable___ht, (((s__AutoRectEnvironment___Globals_static_members_key))), (s__AutoRectEnvironment___Globals_rects_impl)))),(rId)) // INLINED!!
    endif
endfunction

function AutoRectEnvironment_MoveRect takes rect r,real newCenterX,real newCenterY returns nothing

    if (HaveSavedHandle(ConstTable___ht, ((((s__AutoRectEnvironment___Globals_id2_impl)))), (GetHandleId(r)))) then // INLINED!!
        call SaveBoolean(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_rectWasMoved_impl), ( (true))) // INLINED!!
        call RegionClearRect((LoadRegionHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_allRects_impl))), r) // INLINED!!
        call MoveRectTo(r, newCenterX, newCenterY)
        call RegionAddRect((LoadRegionHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_allRects_impl))), r) // INLINED!!
    endif
    
endfunction

function AutoRectEnvironment_SetRect takes rect r,real minx,real miny,real maxx,real maxy returns nothing
    if (HaveSavedHandle(ConstTable___ht, ((((s__AutoRectEnvironment___Globals_id2_impl)))), (GetHandleId(r)))) then // INLINED!!
        call SaveBoolean(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_rectWasMoved_impl), ( (true))) // INLINED!!
        call RegionClearRect((LoadRegionHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_allRects_impl))), r) // INLINED!!
        call SetRect(r, minx, miny, maxx, maxy)
        call RegionAddRect((LoadRegionHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_allRects_impl))), r) // INLINED!!
    endif
endfunction












function onTimer takes nothing returns nothing
    local real x= GetCameraTargetPositionX()
    local real y= GetCameraTargetPositionY()
    local rect r
    local integer i
    
    if (LoadRectHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraRect_impl))) != null then // INLINED!!
        if GetRectMinX((LoadRectHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraRect_impl)))) <= x and x <= GetRectMaxX((LoadRectHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraRect_impl)))) and GetRectMinY((LoadRectHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraRect_impl)))) <= y and y <= GetRectMaxY((LoadRectHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraRect_impl)))) then // INLINED!!
            //call BJDebugMsg("In last rect.")
            call s__RectEnvironment_apply((GetHandleId(((LoadRectHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraRect_impl))))))) // INLINED!!
            return
        else
            // Do not set Globals.lastCameraRect to null, it's likely the camera will soon return to the last rect.
        endif
    endif
    
    if (LoadBoolean(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_rectWasMoved_impl))) then // INLINED!!
        call SaveBoolean(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_rectWasMoved_impl), ( (false))) // INLINED!!
    else
        if (LoadReal(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraX_impl))) == x and (LoadReal(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraY_impl))) == y then // INLINED!!
            //call BJDebugMsg("Camera did not move, no Globals.rects moved: do nothing.")
            return
        endif
    endif
    
    if IsPointInRegion((LoadRegionHandle(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_allRects_impl))), x, y) then // INLINED!!
        set i=(LoadInteger((Lists___hashTable), (((LoadInteger(ConstTable___ht, (((s__AutoRectEnvironment___Globals_static_members_key))), (s__AutoRectEnvironment___Globals_rects_impl)))) ), ( 0))) // INLINED!!
            loop
                exitwhen i == (0) // INLINED!!
                set r=(LoadRectHandle(ConstTable___ht, ((((s__AutoRectEnvironment___Globals_id2_impl)))), (i))) // INLINED!!
                
                if GetRectMinX(r) <= x and x <= GetRectMaxX(r) and GetRectMinY(r) <= y and y <= GetRectMaxY(r) then
                    //call BJDebugMsg("Found rect!")
                    call s__TableStruct_setHandle(s__AutoRectEnvironment___Globals_static_members_key , s__AutoRectEnvironment___Globals_lastCameraRect_impl , (r)) // INLINED!!
                    call s__RectEnvironment_apply((GetHandleId((r)))) // INLINED!!
                    exitwhen true
                endif
            
                set i=(LoadInteger((Lists___hashTable), (((LoadInteger(ConstTable___ht, (((s__AutoRectEnvironment___Globals_static_members_key))), (s__AutoRectEnvironment___Globals_rects_impl)))) ), ( (i)))) // INLINED!!
            endloop
        set r=null
    else
        //call BJDebugMsg("Camera not in region.")
        call s__RectEnvironment_apply((0))
    endif
    
    call SaveReal(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraX_impl), (( ((x)*1.0))*1.0)) // INLINED!!
    call SaveReal(ConstTable___ht, (((((s__AutoRectEnvironment___Globals_static_members_key))))), (s__AutoRectEnvironment___Globals_lastCameraY_impl), (( ((y)*1.0))*1.0)) // INLINED!!
endfunction


//Implemented from module AutoRectEnvironment___InitModule:
    function s__AutoRectEnvironment___InitStruct_AutoRectEnvironment___InitModule___onInit takes nothing returns nothing
        local timer t= CreateTimer()
        call SaveInteger(ConstTable___ht, (((s__AutoRectEnvironment___Globals_static_members_key))), (s__AutoRectEnvironment___Globals_rects_impl), ( ((GMUI_GetIndex((Lists_RECYCLE_KEY)))))) // INLINED!!
        
        call s__TableStruct_setHandle(s__AutoRectEnvironment___Globals_static_members_key , s__AutoRectEnvironment___Globals_allRects_impl , (CreateRegion())) // INLINED!!
        
        call TimerStart(t, AutoRectEnvironment___PERIOD, true, function onTimer)
    endfunction

//library AutoRectEnvironment ends
//library GameTime:

//textmacro instance: TableStruct_NewReadonlyStaticPrimitiveField("hours", "integer")
    function s__GameTime__get_hours takes nothing returns integer
        return (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_hours_impl))) // INLINED!!
    endfunction
    
    function s__GameTime__set_hours takes integer new_hours returns nothing
        call SaveInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_hours_impl), ( new_hours)) // INLINED!!
    endfunction
    
    function s__GameTime_hoursClear takes nothing returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_hours_impl)) // INLINED!!
    endfunction
    
    function s__GameTime_hoursExists takes nothing returns boolean
        return (HaveSavedInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_hours_impl))) // INLINED!!
    endfunction
//end of: TableStruct_NewReadonlyStaticPrimitiveField("hours", "integer")
//textmacro instance: TableStruct_NewReadonlyStaticPrimitiveField("minutes", "integer")
    function s__GameTime__get_minutes takes nothing returns integer
        return (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl))) // INLINED!!
    endfunction
    
    function s__GameTime__set_minutes takes integer new_minutes returns nothing
        call SaveInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl), ( new_minutes)) // INLINED!!
    endfunction
    
    function s__GameTime_minutesClear takes nothing returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl)) // INLINED!!
    endfunction
    
    function s__GameTime_minutesExists takes nothing returns boolean
        return (HaveSavedInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl))) // INLINED!!
    endfunction
//end of: TableStruct_NewReadonlyStaticPrimitiveField("minutes", "integer")
//textmacro instance: TableStruct_NewReadonlyStaticPrimitiveField("seconds", "integer")
    function s__GameTime__get_seconds takes nothing returns integer
        return (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_seconds_impl))) // INLINED!!
    endfunction
    
    function s__GameTime__set_seconds takes integer new_seconds returns nothing
        call SaveInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_seconds_impl), ( new_seconds)) // INLINED!!
    endfunction
    
    function s__GameTime_secondsClear takes nothing returns nothing
        call RemoveSavedInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_seconds_impl)) // INLINED!!
    endfunction
    
    function s__GameTime_secondsExists takes nothing returns boolean
        return (HaveSavedInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_seconds_impl))) // INLINED!!
    endfunction
//end of: TableStruct_NewReadonlyStaticPrimitiveField("seconds", "integer")
    
//textmacro instance: TableStruct_NewReadonlyStaticHandleField("timer", "timer")
    function s__GameTime__get_timer takes nothing returns timer
        return (LoadTimerHandle(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_timer_impl))) // INLINED!!
    endfunction
    
    function s__GameTime__set_timer takes timer new_timer returns nothing
        call s__TableStruct_setHandle(s__GameTime_static_members_key , s__GameTime_timer_impl , new_timer)
    endfunction
    
    function s__GameTime_timerClear takes nothing returns nothing
        call RemoveSavedHandle(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_timer_impl)) // INLINED!!
    endfunction
    
    function s__GameTime_timerExists takes nothing returns boolean
        return (HaveSavedHandle(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_timer_impl))) // INLINED!!
    endfunction
//end of: TableStruct_NewReadonlyStaticHandleField("timer", "timer")
//textmacro instance: TableStruct_NewReadonlyStaticHandleField("multiboard", "multiboard")
    function s__GameTime__get_multiboard takes nothing returns multiboard
        return (LoadMultiboardHandle(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_multiboard_impl))) // INLINED!!
    endfunction
    
    function s__GameTime__set_multiboard takes multiboard new_multiboard returns nothing
        call s__TableStruct_setHandle(s__GameTime_static_members_key , s__GameTime_multiboard_impl , new_multiboard)
    endfunction
    
    function s__GameTime_multiboardClear takes nothing returns nothing
        call RemoveSavedHandle(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_multiboard_impl)) // INLINED!!
    endfunction
    
    function s__GameTime_multiboardExists takes nothing returns boolean
        return (HaveSavedHandle(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_multiboard_impl))) // INLINED!!
    endfunction
//end of: TableStruct_NewReadonlyStaticHandleField("multiboard", "multiboard")
    
    function s__GameTime_toString takes nothing returns string
        return I2S((LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_hours_impl)))) + " : " + I2S((LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl)))) + " : " + I2S((LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_seconds_impl)))) // INLINED!!
    endfunction
    
    function s__GameTime_toStringEx takes string sep returns string
        return I2S((LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_hours_impl)))) + sep + I2S((LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl)))) + sep + I2S((LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_seconds_impl)))) // INLINED!!
    endfunction
    
    function s__GameTime_asMinutes takes nothing returns real
        return 60. * (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_hours_impl))) + (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl))) + (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_seconds_impl))) / 60. // INLINED!!
    endfunction
    
    function s__GameTime_asHours takes nothing returns real
        return (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_hours_impl))) + (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl))) / 60. + (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_seconds_impl))) / 3600. // INLINED!!
    endfunction
    
    function s__GameTime_asSeconds takes nothing returns integer
        return (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_hours_impl))) * 3600 + (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl))) * 60 + (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_seconds_impl))) // INLINED!!
    endfunction
    
    function s__GameTime_onTimer takes nothing returns nothing
        local integer sec= (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_seconds_impl))) // INLINED!!
        local string s
    
        if sec == 0 and (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl))) == 0 and (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_hours_impl))) == 0 then // INLINED!!
            call s__TableStruct_setHandle(s__GameTime_static_members_key , s__GameTime_multiboard_impl , (CreateMultiboard())) // INLINED!!
            call MultiboardSetRowCount((LoadMultiboardHandle(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_multiboard_impl))), 1) // INLINED!!
            call MultiboardSetColumnCount((LoadMultiboardHandle(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_multiboard_impl))), 5) // INLINED!!
            call MultiboardSetTitleText((LoadMultiboardHandle(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_multiboard_impl))), "Elapsed Time") // INLINED!!
            
            set sec=s__MultiBoard_refresh((LoadMultiboardHandle(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_multiboard_impl)))) // INLINED!!
            call MultiboardSetItemStyle((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 0 ))))), ( true ), ( false)) // INLINED!!
            call MultiboardSetItemStyle((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 1 ))))), ( true ), ( false)) // INLINED!!
            call MultiboardSetItemStyle((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 2 ))))), ( true ), ( false)) // INLINED!!
            call MultiboardSetItemStyle((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 3 ))))), ( true ), ( false)) // INLINED!!
            call MultiboardSetItemStyle((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 4 ))))), ( true ), ( false)) // INLINED!!
            call MultiboardSetItemWidth((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 0 ))))), (( 0.015)*1.0)) // INLINED!!
            call MultiboardSetItemWidth((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 1 ))))), (( 0.005)*1.0)) // INLINED!!
            call MultiboardSetItemWidth((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 2 ))))), (( 0.015)*1.0)) // INLINED!!
            call MultiboardSetItemWidth((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 3 ))))), (( 0.005)*1.0)) // INLINED!!
            call MultiboardSetItemWidth((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 4 ))))), (( 0.015)*1.0)) // INLINED!!
            
            set sec=0
        endif
    
        if sec == 60 then
            if (LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl))) == 60 then // INLINED!!
                call SaveInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_hours_impl), ( ((LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_hours_impl))) + 1))) // INLINED!!
                call SaveInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl), ( (0))) // INLINED!!
            else
                call SaveInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl), ( ((LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl))) + 1))) // INLINED!!
            endif
            call SaveInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_seconds_impl), ( (0))) // INLINED!!
        else
            call SaveInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_seconds_impl), ( (sec + 1))) // INLINED!!
        endif
        
        set sec=GetHandleId((LoadMultiboardHandle(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_multiboard_impl)))) // INLINED!!
        //call MultiboardSuppressDisplay(false)
        
        set s=I2S((LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_hours_impl)))) // INLINED!!
        if StringLength(s) == 1 then
            set s="0" + s
        endif
        call MultiboardSetItemValue((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 0 ))))), ( s)) // INLINED!!
        call MultiboardSetItemValue((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 1 ))))), ( ":")) // INLINED!!
        set s=I2S((LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_minutes_impl)))) // INLINED!!
        if StringLength(s) == 1 then
            set s="0" + s
        endif
        call MultiboardSetItemValue((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 2 ))))), ( s)) // INLINED!!
        call MultiboardSetItemValue((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 3 ))))), ( ":")) // INLINED!!
        set s=I2S((LoadInteger(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_seconds_impl)))) // INLINED!!
        if StringLength(s) == 1 then
            set s="0" + s
        endif
        call MultiboardSetItemValue((LoadMultiboardItemHandle(Table___ht, ((((LoadInteger(Table___ht, ((LoadInteger(ConstTable___ht, (((s__MultiBoard_items_impl))), ((((sec))))))), (((0 ) ))))))), (( ( 4 ))))), ( s)) // INLINED!!
        
        call MultiboardDisplay((LoadMultiboardHandle(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_multiboard_impl))), true) // INLINED!!
    endfunction
    
    function s__GameTime_onInit takes nothing returns nothing
        call s__TableStruct_setHandle(s__GameTime_static_members_key , s__GameTime_timer_impl , (CreateTimer())) // INLINED!!
                
        
        call TimerStart((LoadTimerHandle(ConstTable___ht, (((((s__GameTime_static_members_key))))), (s__GameTime_timer_impl))), 1., true, function s__GameTime_onTimer) // INLINED!!
    endfunction



//library GameTime ends
//library LoPInitDecoBuilders:



// The number of Basic Deco Builders



// This function is called in Init 0 seconds
function InitDecoTents takes nothing returns nothing
    local rect decoRect= gg_rct_Deco_Tents_Rect
    
    local real xStep= 256.
    local real yStep= 192.
    
    local real xMax= GetRectMaxX(decoRect) - xStep
    local real xMin= GetRectMinX(decoRect)
    local real yMax= GetRectMaxY(decoRect)
    local real yMin= GetRectMinY(decoRect)
    
    local real xStart= xMin + xStep / 2.
    local real yStart= yMin + yStep / 2.
    local real xCur= xStart
    local real yCur= yStart
        
    local unit decoTent= null
    local integer decoNumber= 0
    
    local integer i
    
    local integer decoTentCount= 1
    
    loop
    exitwhen decoNumber > (2) // INLINED!!
        set decoTent=CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'n03H', xCur, yCur, bj_UNIT_FACING)
        call BlzSetUnitName(decoTent, "Deco Tent Special " + I2S(decoTentCount))
        call SetUnitVertexColor(decoTent, 255, 165, 0, 255)
        
        set i=0
        loop
        exitwhen i >= bj_MAX_STOCK_UNIT_SLOTS or decoNumber > (2) // INLINED!!
            call AddUnitToStock(decoTent, udg_DecoUnitTypes[decoNumber], 1, 3)
            set i=i + 1
            set decoNumber=decoNumber + 1
        endloop
        
        set xCur=xCur + xStep
        if xCur > xMax then
            set yCur=yCur + yStep
            set xCur=xStart
        endif
        set decoTentCount=decoTentCount + 1

    endloop
    
    set decoTentCount=1
    
    loop
    exitwhen decoNumber > udg_System_DecoTotal
        set decoTent=CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'n03H', xCur, yCur, bj_UNIT_FACING)
        call BlzSetUnitName(decoTent, "Deco Tent " + I2S(decoTentCount))
        
        set i=0
        loop
        exitwhen i >= bj_MAX_STOCK_UNIT_SLOTS or decoNumber > udg_System_DecoTotal
            call AddUnitToStock(decoTent, udg_DecoUnitTypes[decoNumber], 1, 3)
            set i=i + 1
            set decoNumber=decoNumber + 1
        endloop
        
        set xCur=xCur + xStep
        if xCur > xMax then
            set yCur=yCur + yStep
            set xCur=xStart
        endif
        set decoTentCount=decoTentCount + 1

    endloop
endfunction

// This function is called in Init Main
function InitDecoUnitTypeArray takes nothing returns nothing
    local integer i= 0
    // ---------
    // Special Decos
    // ---------
    // Units and Trees
    set udg_DecoUnitTypes[i]='u015'
    // Terrain
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02E'
    // Controller
    // set i = ( i + 1 )
    // set udg_DecoUnitTypes[i] = 'h0KD'
    // Docks
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u003'
    // Misc
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u00W'
    
    
    // ---------
    // Basic Decos
    // ---------
    // Archways
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u014'
    // Bushes
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u00A'
    // Camp
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u035'
    // City 1
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u016'
    // City 2
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u017'
    // City 3
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u01T'
    // Corpses
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u00N'
    // Crops
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u00B'
    // Dungeon
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u01P'
    // Effects
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u036'
    // Fire
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u01C'
    // Furniture Deco
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u03Q'
    // Gates
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u00V'
    // Ice
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u03P'
    // Rocks
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u013'
    // Seats
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u01R'
    // Statue 1
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u01N'
    // Statue 2
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u023'
    // Walls (Wood)
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u000'
    // Walls 1
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02J'
    // Walls 2
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02K'
    // Water
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u00Z'
    // Webs
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02P'
    
    
    // Arabian 1
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02G'
    // Arabian 2
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02H'
    // Blacksmith
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u01E'
    // Blocks
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u03A'
    // Celtic
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u029'
    // Chaos
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u039'
    // Chess
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u027'
    // Dalaran
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02D'
    // Draenei
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02O'
    // Elves
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02A'
    // Fence
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u03I'
    // Flags
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u005'
    // Floors
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02C'
    // Flowers 1
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u004'
    // Flowers 2
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u006'
    // Forsaken
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u025'
    // Goblin
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02R'
    // Gravestones
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02S'
    // Mansion
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02I'
    // Market
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u01D'
    // Medieval 1
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u01S'
    // Medieval 2
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02L'
    // Naga
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u03R'
    // Nordic
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u03S'
    // Obelisks
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u00Y'
    // Pandaren
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02N'
    // Quilboar
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u026'
    // Rostrodle
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02Q'
    // Ruined
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02T'
    // Ruins
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u00X'
    // Runes
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u001'
    // Runic
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u02M'
    // Trees
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u01B'
    // Village
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u01O'
    // Walls (Icecrown)
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u011'
    // Walls (Ruins)
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u012'
    // Walls (Stone)
    set i=( i + 1 )
    set udg_DecoUnitTypes[i]='u010'
    
    // End of Deco Creation
    set udg_System_DecoTotal=i
endfunction

//library LoPInitDecoBuilders ends
//library UserDefinedRects:
    
//////////////////////////////////////////////////////
//Guhun's User Defined Rect System v1.2.0


// TODO: check if bj_groupRandomCurrentPick is being used somewhere in LoP. If not, make this system use a differnt global.







//=============================
//CONSTANTS THAT RETURN THE INTEGER ADDRESS OF A GUDR MEMBER IN THE HASHTABLE

//textmacro instance: GUDR_INDEX("RECT", "0")
    constant function s__UserDefinedRects___Indices__get_RECT takes nothing returns integer
        return 0
    endfunction
//end of: GUDR_INDEX("RECT", "0")
//textmacro instance: GUDR_INDEX("LIGHT_T", "1")
    constant function s__UserDefinedRects___Indices__get_LIGHT_T takes nothing returns integer
        return 1
    endfunction
//end of: GUDR_INDEX("LIGHT_T", "1")
//textmacro instance: GUDR_INDEX("LIGHT_B", "2")
    constant function s__UserDefinedRects___Indices__get_LIGHT_B takes nothing returns integer
        return 2
    endfunction
//end of: GUDR_INDEX("LIGHT_B", "2")
//textmacro instance: GUDR_INDEX("LIGHT_L", "3")
    constant function s__UserDefinedRects___Indices__get_LIGHT_L takes nothing returns integer
        return 3
    endfunction
//end of: GUDR_INDEX("LIGHT_L", "3")
//textmacro instance: GUDR_INDEX("LIGHT_R", "4")
    constant function s__UserDefinedRects___Indices__get_LIGHT_R takes nothing returns integer
        return 4
    endfunction
//end of: GUDR_INDEX("LIGHT_R", "4")
//textmacro instance: GUDR_INDEX("WEATHER", "5")
    constant function s__UserDefinedRects___Indices__get_WEATHER takes nothing returns integer
        return 5
    endfunction
//end of: GUDR_INDEX("WEATHER", "5")
//textmacro instance: GUDR_INDEX("GROUP", "6")
    constant function s__UserDefinedRects___Indices__get_GROUP takes nothing returns integer
        return 6
    endfunction
//end of: GUDR_INDEX("GROUP", "6")
//textmacro instance: GUDR_INDEX("HIDDEN", "7")
    constant function s__UserDefinedRects___Indices__get_HIDDEN takes nothing returns integer
        return 7
    endfunction
//end of: GUDR_INDEX("HIDDEN", "7")
//textmacro instance: GUDR_INDEX("WEATHER_TYPE", "8")
    constant function s__UserDefinedRects___Indices__get_WEATHER_TYPE takes nothing returns integer
        return 8
    endfunction
//end of: GUDR_INDEX("WEATHER_TYPE", "8")
//=============================
//FUNCTIONS THAT RETURN BOOLEANS
function GUDR_IsUnitIdGenerator takes integer unitHandle returns boolean
    return HaveSavedHandle(UserDefinedRects___hashTable, unitHandle, (0)) // INLINED!!
endfunction

function GUDR_IsUnitGenerator takes unit whichUnit returns boolean
    return (HaveSavedHandle(UserDefinedRects___hashTable, (GetHandleId(whichUnit)), (0))) // INLINED!!
endfunction

function GUDR_IsGeneratorIdHidden takes integer generatorId returns boolean
    return LoadBoolean(UserDefinedRects___hashTable, generatorId, (7)) // INLINED!!
endfunction

function GUDR_IsGeneratorHidden takes unit generator returns boolean
    return (LoadBoolean(UserDefinedRects___hashTable, (GetHandleId(generator)), (7))) // INLINED!!
endfunction

function GUDR_GeneratorIdHasGroup takes integer generatorId returns boolean
    return HaveSavedHandle(UserDefinedRects___hashTable, generatorId, (6)) // INLINED!!
endfunction

function GUDR_GeneratorHasGroup takes unit generator returns boolean
    return (HaveSavedHandle(UserDefinedRects___hashTable, (GetHandleId(generator)), (6))) // INLINED!!
endfunction

function GUDR_GeneratorIdHasWeather takes integer generatorId returns boolean
    return HaveSavedInteger(UserDefinedRects___hashTable, generatorId, (5)) // INLINED!!
endfunction

function GUDR_GeneratorHasWeather takes unit generator returns boolean
    return (HaveSavedInteger(UserDefinedRects___hashTable, (GetHandleId(generator)), (5))) // INLINED!!
endfunction
//=============================
//FUNCTIONS TO GET GUDR MEMBERS

//Handle Id as parameter
function GUDR_GetGeneratorIdRect takes integer generatorId returns rect
    return LoadRectHandle(UserDefinedRects___hashTable, generatorId, (0)) // INLINED!!
endfunction

function GUDR_GetGeneratorIdWeatherEffect takes integer generatorId returns weathereffect
    return UserDefinedRects___weatherEffects[LoadInteger(UserDefinedRects___hashTable, generatorId, (5))] // INLINED!!
endfunction

function GUDR_GetGeneratorIdGroup takes integer generatorId returns group
    return LoadGroupHandle(UserDefinedRects___hashTable, generatorId, (6)) // INLINED!!
endfunction

function GUDR_GetGeneratorIdWeatherType takes integer generatorId returns integer
    return LoadInteger(UserDefinedRects___hashTable, generatorId, (8)) // INLINED!!
endfunction

//Unit as parameter

function GUDR_GetGeneratorRect takes unit generator returns rect
    return (LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId(generator)), (0))) // INLINED!!
endfunction

function GUDR_GetGeneratorWeatherEffect takes unit generator returns weathereffect
    return (UserDefinedRects___weatherEffects[LoadInteger(UserDefinedRects___hashTable, (GetHandleId(generator)), (5))]) // INLINED!!
endfunction

function GUDR_GetGeneratorGroup takes unit generator returns group
    return (LoadGroupHandle(UserDefinedRects___hashTable, (GetHandleId(generator)), (6))) // INLINED!!
endfunction

function GUDR_GetGeneratorWeatherType takes unit generator returns integer
    return (LoadInteger(UserDefinedRects___hashTable, (GetHandleId(generator)), (8))) // INLINED!!
endfunction

function GUDR_ConvertWeatherType takes integer weatherType returns integer
    return LoadInteger(UserDefinedRects___hashTable, 0, weatherType)
endfunction

function UserDefinedRects___GetGeneratorIdLightning takes integer genId,integer i returns lightning
    return LoadLightningHandle(UserDefinedRects___hashTable, genId, i)
endfunction

//=============================

function GUDR_SwapGroup_UnitsInsideUDR takes group whichGroup,boolean includeGenerator,boolexpr filter returns integer
    local integer genId
    local unit firstOfGroup
    
    set firstOfGroup=FirstOfGroup(whichGroup)
    set genId=GetHandleId(firstOfGroup)
    
    if (HaveSavedHandle(UserDefinedRects___hashTable, (genId), (0))) then // INLINED!!
        set bj_groupRandomCurrentPick=firstOfGroup
        
        call GroupClear(whichGroup)
        call GroupEnumUnitsInRect(whichGroup, (LoadRectHandle(UserDefinedRects___hashTable, (genId), (0))), filter) // INLINED!!
        
        if not includeGenerator then
            call GroupRemoveUnit(whichGroup, firstOfGroup)
        endif
    else
        set genId=0
    endif
    
    set firstOfGroup=null
    return genId
endfunction

//Returns the Handle Id of an active UDR generator selected by a player
//Additionally, the global bj_groupRandomCurrentPick will be set to the selected generator
function GUDR_PlayerGetSelectedGeneratorId takes player whichPlayer returns integer
    local unit firstOfGroup
    local integer unitId
    local group slctGrp= CreateGroup()
    
    call GroupEnumUnitsSelected(slctGrp, whichPlayer, null)
    set firstOfGroup=FirstOfGroup(slctGrp)
    set unitId=GetHandleId(firstOfGroup)
    
    call DestroyGroup(slctGrp)
    set slctGrp=null
    
    if (HaveSavedHandle(UserDefinedRects___hashTable, (unitId), (0))) then // INLINED!!
        set bj_groupRandomCurrentPick=firstOfGroup
        return unitId
    endif
    
    return 0
endfunction


function ChangeGUDRWeatherNew takes unit whichUnit,integer changeWeather,integer finalWeather returns integer
    local integer curWeather
    local integer unitId= GetHandleId(whichUnit)
    local integer weatherId
    
    if not (HaveSavedHandle(UserDefinedRects___hashTable, (unitId), (0))) then // INLINED!!
        return 0
    endif

    if finalWeather < 1 or finalWeather > 21 then
        set curWeather=(LoadInteger(UserDefinedRects___hashTable, (unitId), (8))) // INLINED!!
        set finalWeather=curWeather + changeWeather
    endif
        

    if finalWeather > 21 then
        loop
        exitwhen finalWeather <= 21
                set finalWeather=finalWeather - 21
        endloop
    elseif finalWeather < 1 then
        loop
        exitwhen finalWeather >= 1
                set finalWeather=finalWeather + 21
        endloop
    endif
    
    call SaveInteger(UserDefinedRects___hashTable, unitId, (8), finalWeather) // INLINED!!
    
    // Update Weather, if it exists.
    set weatherId=LoadInteger(UserDefinedRects___hashTable, unitId, 5)
    if weatherId > 0 then
        call EnableWeatherEffect(UserDefinedRects___weatherEffects[weatherId], false) //BUG: If weather effect is not disabled before destruction, it's sound effect will remain
        call RemoveWeatherEffect(UserDefinedRects___weatherEffects[weatherId])
        set UserDefinedRects___weatherEffects[weatherId]=AddWeatherEffect((LoadRectHandle(UserDefinedRects___hashTable, (unitId), (0))), (LoadInteger(UserDefinedRects___hashTable, 0, (finalWeather)))) // INLINED!!
        call EnableWeatherEffect(UserDefinedRects___weatherEffects[weatherId], true)
    endif
    
    return finalWeather
endfunction

function GroupGUDRFilter takes nothing returns boolean
    local unit filterUnit= GetFilterUnit()
    
    if (HaveSavedHandle(UserDefinedRects___hashTable, (GetHandleId((filterUnit))), (0))) or GetOwningPlayer(filterUnit) != bj_forceRandomCurrentPick then // INLINED!!
        set filterUnit=null
        return false
    endif
    
    call SetUnitPathing(filterUnit, false)
    set filterUnit=null
    return true
endfunction

function GroupGUDR takes unit whichUnit,boolean unlock returns boolean
    local integer unitId= GetHandleId(whichUnit)
    local group g
    local unit firstUnit
    local player storeGlobal= bj_forceRandomCurrentPick
    
    if not (HaveSavedHandle(UserDefinedRects___hashTable, (unitId), (0))) then // INLINED!!
        return false
    endif
    
    set g=(LoadGroupHandle(UserDefinedRects___hashTable, (unitId), (6))) // INLINED!!
    
    //Save the GURD's owner in the Hashtable for use in the EnumFilter function
    set firstUnit=FirstOfGroup(g)
    
    //This loop clears the group and restores pathing and unpauses
    loop
    exitwhen firstUnit == null
        if GetUnitTypeId(firstUnit) != 0 then
            call SetUnitPathing(firstUnit, true)
            call GroupRemoveUnit(g, firstUnit)
        else
            call GroupRefresh(g)
        endif
        set firstUnit=FirstOfGroup(g)
    endloop
    
    //We only want to add new units to the group if the user doesn't want to unlock it
    if not unlock then
        call BJDebugMsg(" G Test")
        set bj_forceRandomCurrentPick=GetOwningPlayer(whichUnit)
        call GroupEnumUnitsInRect(g, (LoadRectHandle(UserDefinedRects___hashTable, (unitId), (0))), Condition(function GroupGUDRFilter)) // INLINED!!
        set bj_forceRandomCurrentPick=storeGlobal
    endif
    
    set g=null
    set firstUnit=null
    return true
endfunction


function CreateWeather takes unit whichUnit returns boolean
    local integer instance
    local integer genId= GetHandleId(whichUnit)
    
    if not (HaveSavedHandle(UserDefinedRects___hashTable, (genId), (0))) then // INLINED!!
        return false
    endif
    









        set instance=GMUI_GetIndex(UserDefinedRects___RECYCLE_KEY)

    
    call SaveInteger(UserDefinedRects___hashTable, GetHandleId(whichUnit), (5), instance) // INLINED!!
    set UserDefinedRects___weatherEffects[instance]=AddWeatherEffect((LoadRectHandle(UserDefinedRects___hashTable, (genId), (0))), (LoadInteger(UserDefinedRects___hashTable, 0, ((LoadInteger(UserDefinedRects___hashTable, (genId), (8))))))) // INLINED!!
    call EnableWeatherEffect(UserDefinedRects___weatherEffects[instance], true)
    
    return true
endfunction

function DestroyWeather takes unit whichUnit returns boolean
    local integer instance= LoadInteger(UserDefinedRects___hashTable, GetHandleId(whichUnit), (5)) // INLINED!!
    
    if instance < 1 then
        return false // False for effect not destroyed, unit did not have weather attached.
    endif
    
    call EnableWeatherEffect(UserDefinedRects___weatherEffects[instance], false) // BUG: If weather effect is not disabled before destruction, it's sound effect will remain
    call RemoveWeatherEffect(UserDefinedRects___weatherEffects[instance])
    set UserDefinedRects___weatherEffects[instance]=null // Null to free handles for other systems
    call RemoveSavedInteger(UserDefinedRects___hashTable, GetHandleId(whichUnit), (5)) // INLINED!!
    
    




        call GMUI_RecycleIndex(UserDefinedRects___RECYCLE_KEY , instance)

    
    return true // True for effect destroyed.
endfunction

function ToggleGUDRVisibility takes unit whichUnit,boolean toggle,boolean show returns boolean
    local real alpha
    local integer unitId= GetHandleId(whichUnit)
    
    if not (HaveSavedHandle(UserDefinedRects___hashTable, (unitId), (0))) then // INLINED!!
        return false
    endif
    
    if toggle then //If user wants to switch the current value, change the value of show to opposite of current value
        set show=not LoadBoolean(UserDefinedRects___hashTable, unitId, (7)) // INLINED!!
    endif
    
    call SaveBoolean(UserDefinedRects___hashTable, unitId, (7), show) //Save current show/hide boolean // INLINED!!
    
    //Convert Boolean to Real T/F = 1/0
    if show then
        set alpha=1 //Show > Alpha = 100%
    else
        set alpha=0 //Hide > Alpha = 0%
    endif
    //End of Conversion

    //After it has been decided if the GUDR should be shown or hidden, apply the choice
    call SetUnitVertexColor(whichUnit, 255, 255, 255, 255 * R2I(alpha))
    call SetLightningColor(LoadLightningHandle(UserDefinedRects___hashTable, unitId, (1)), 1, 1, 1, alpha) // INLINED!!
    call SetLightningColor(LoadLightningHandle(UserDefinedRects___hashTable, unitId, (2)), 1, 1, 1, alpha) // INLINED!!
    call SetLightningColor(LoadLightningHandle(UserDefinedRects___hashTable, unitId, (3)), 1, 1, 1, alpha) // INLINED!!
    call SetLightningColor(LoadLightningHandle(UserDefinedRects___hashTable, unitId, (4)), 1, 1, 1, alpha) // INLINED!!
    return true
endfunction

function MoveGUDR takes unit centerUnit,real offsetX,real offsetY,boolean expand returns boolean
    local integer unitId= GetHandleId(centerUnit)
    local real centerX= GetUnitX(centerUnit)
    local real centerY= GetUnitY(centerUnit)
    local rect userDefRect
    local integer weatherId
    
    local real minX
    local real maxX
    local real minY
    local real maxY
    
    if not (HaveSavedHandle(UserDefinedRects___hashTable, (unitId), (0))) then // INLINED!!
        return false
    endif
    
    set userDefRect=(LoadRectHandle(UserDefinedRects___hashTable, (unitId), (0))) // INLINED!!
    
    //If user wants to expand or contract the current region, Load the current value of its borders
    if expand then
        set offsetX=offsetX + GetRectMaxX(userDefRect) - GetRectCenterX(userDefRect)
        set offsetY=offsetY + GetRectMaxY(userDefRect) - GetRectCenterY(userDefRect)
    endif
    
    //Set the values of the borders based on the offsets
    set minX=centerX - offsetX
    set maxX=centerX + offsetX
    set minY=centerY - offsetY
    set maxY=centerY + offsetY
    
    //Update Lightnings
    call MoveLightning(LoadLightningHandle(UserDefinedRects___hashTable, unitId, (1)), true, minX, maxY, maxX, maxY) // INLINED!!
    call MoveLightning(LoadLightningHandle(UserDefinedRects___hashTable, unitId, (2)), true, minX, minY, maxX, minY) // INLINED!!
    call MoveLightning(LoadLightningHandle(UserDefinedRects___hashTable, unitId, (3)), true, minX, minY, minX, maxY) // INLINED!!
    call MoveLightning(LoadLightningHandle(UserDefinedRects___hashTable, unitId, (4)), true, maxX, minY, maxX, maxY) // INLINED!!
    
    //Update Rect

        call AutoRectEnvironment_SetRect(userDefRect , minX , minY , maxX , maxY)



    
    // Update Weather Effect
    set weatherId=LoadInteger(UserDefinedRects___hashTable, unitId, 5)
    if weatherId > 0 then
        call EnableWeatherEffect(UserDefinedRects___weatherEffects[weatherId], false) //BUG: If weather effect is not disabled before destruction, it's sound effect will remain
        call RemoveWeatherEffect(UserDefinedRects___weatherEffects[weatherId])
        set UserDefinedRects___weatherEffects[weatherId]=AddWeatherEffect(userDefRect, (LoadInteger(UserDefinedRects___hashTable, 0, ((LoadInteger(UserDefinedRects___hashTable, (unitId), (8))))))) // INLINED!!
        call EnableWeatherEffect(UserDefinedRects___weatherEffects[weatherId], true)
    endif
    
    set userDefRect=null
    return true
endfunction


function CreateGUDR takes unit centerUnit returns boolean
    local integer unitId= GetHandleId(centerUnit)
    local real centerX= GetUnitX(centerUnit)
    local real centerY= GetUnitY(centerUnit)
    local rect userDefRect
    

        local integer fog

    
    if (HaveSavedHandle(UserDefinedRects___hashTable, (unitId), (0))) then // INLINED!!
        return false
    endif
    
    set userDefRect=Rect(centerX - 32, centerY - 32, centerX + 32, centerY + 32)
    

        set fog=(GMUI_GetIndex((GMUI_GENERIC_KEY))) // INLINED!!
        call SaveInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId((userDefRect))))), ( (fog))) // INLINED!!
        call SaveInteger(ConstTable___ht, (((((s__TerrainFog_style_impl))))), ((fog)), ( (s__TerrainFog_EXPONENTIAL))) // INLINED!!
        call AutoRectEnvironment_RegisterRect(userDefRect)

    
    call SaveRectHandle(UserDefinedRects___hashTable, unitId, (0), userDefRect) // INLINED!!
    call SaveLightningHandle(UserDefinedRects___hashTable, unitId, (1), AddLightning("DRAM", true, centerX - 32, centerY + 32, centerX + 32, centerY + 32)) // INLINED!!
    call SaveLightningHandle(UserDefinedRects___hashTable, unitId, (2), AddLightning("DRAM", true, centerX - 32, centerY - 32, centerX + 32, centerY - 32)) // INLINED!!
    call SaveLightningHandle(UserDefinedRects___hashTable, unitId, (3), AddLightning("DRAM", true, centerX - 32, centerY - 32, centerX - 32, centerY + 32)) // INLINED!!
    call SaveLightningHandle(UserDefinedRects___hashTable, unitId, (4), AddLightning("DRAM", true, centerX + 32, centerY - 32, centerX + 32, centerY + 32)) // INLINED!!
    call SaveGroupHandle(UserDefinedRects___hashTable, unitId, (6), CreateGroup()) // INLINED!!
    call SaveBoolean(UserDefinedRects___hashTable, unitId, (7), true) //Save show/hide boolean as true, because nothing is being hidden // INLINED!!
    call SaveInteger(UserDefinedRects___hashTable, unitId, (8), 1) //Save 1 as it is the value of 'RAhr' // INLINED!!
    
    set userDefRect=null
    return true
endfunction

function DestroyGUDR takes unit centerUnit returns nothing
    local integer unitId= GetHandleId(centerUnit)
    local rect udr= (LoadRectHandle(UserDefinedRects___hashTable, (unitId), (0))) // INLINED!!
    

        local integer fog= (LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId((udr))))))) // INLINED!!

    
    if udr == null then
        return
    endif
    

        call AutoRectEnvironment_DeRegisterRect(udr)
        
        if fog > 0 then
            call s__TerrainFog_destroy(fog)
        endif


    call DestroyWeather(centerUnit)
    call GroupGUDR(centerUnit , true)
    call DestroyLightning((LoadLightningHandle(UserDefinedRects___hashTable, (unitId ), ( (1))))) // INLINED!!
    call DestroyLightning((LoadLightningHandle(UserDefinedRects___hashTable, (unitId ), ( (2))))) // INLINED!!
    call DestroyLightning((LoadLightningHandle(UserDefinedRects___hashTable, (unitId ), ( (3))))) // INLINED!!
    call DestroyLightning((LoadLightningHandle(UserDefinedRects___hashTable, (unitId ), ( (4))))) // INLINED!!
    call RemoveRect(udr)
    call DestroyGroup((LoadGroupHandle(UserDefinedRects___hashTable, (unitId), (6)))) // INLINED!!
    
    call FlushChildHashtable(UserDefinedRects___hashTable, unitId)

    set udr=null
endfunction

function UserDefinedRects___onInit takes nothing returns nothing



    
    call SaveInteger(UserDefinedRects___hashTable, 0, 1, 'RAhr')
    call SaveInteger(UserDefinedRects___hashTable, 0, 2, 'RAlr')
    call SaveInteger(UserDefinedRects___hashTable, 0, 3, 'MEds')
    call SaveInteger(UserDefinedRects___hashTable, 0, 4, 'FDbh')
    call SaveInteger(UserDefinedRects___hashTable, 0, 5, 'FDbl')
    call SaveInteger(UserDefinedRects___hashTable, 0, 6, 'FDgh')
    call SaveInteger(UserDefinedRects___hashTable, 0, 7, 'FDgl')
    call SaveInteger(UserDefinedRects___hashTable, 0, 8, 'FDrh')
    call SaveInteger(UserDefinedRects___hashTable, 0, 9, 'FDrl')
    call SaveInteger(UserDefinedRects___hashTable, 0, 10, 'FDwh')
    call SaveInteger(UserDefinedRects___hashTable, 0, 11, 'FDwl')
    call SaveInteger(UserDefinedRects___hashTable, 0, 12, 'RLhr')
    call SaveInteger(UserDefinedRects___hashTable, 0, 13, 'RLlr')
    call SaveInteger(UserDefinedRects___hashTable, 0, 14, 'SNbs')
    call SaveInteger(UserDefinedRects___hashTable, 0, 15, 'SNhs')
    call SaveInteger(UserDefinedRects___hashTable, 0, 16, 'SNls')
    call SaveInteger(UserDefinedRects___hashTable, 0, 17, 'WOcw')
    call SaveInteger(UserDefinedRects___hashTable, 0, 18, 'WOlw')
    call SaveInteger(UserDefinedRects___hashTable, 0, 19, 'LRaa')
    call SaveInteger(UserDefinedRects___hashTable, 0, 20, 'LRma')
    call SaveInteger(UserDefinedRects___hashTable, 0, 21, 'WNcw')
endfunction

//////////////////////////////////////////////////////
//END OF GUDR
//////////////////////////////////////////////////////

//library UserDefinedRects ends
//library LoPHeader:
function LoP_IsUnitDecoration takes unit whichUnit returns boolean
    return GetUnitAbilityLevel(whichUnit, 'A0C6') > 0
endfunction

function LoP_PlayerOwnsUnit takes player whichPlayer,unit whichUnit returns boolean
    local player p= GetOwningPlayer(whichUnit)
    
    if p == whichPlayer then
        return true
    endif
    return IsUnitInGroup(whichUnit, udg_System_NeutralUnits[GetPlayerId(whichPlayer)]) and p == Player(PLAYER_NEUTRAL_PASSIVE)
endfunction

function IsGroupEmpty takes group whichGroup returns boolean
    local unit firstUnit= FirstOfGroup(whichGroup)
    
    // If unit was removed from the game, refresh the group
    if GetUnitTypeId(firstUnit) == 0 then
        call GroupRefresh(whichGroup)
        set firstUnit=FirstOfGroup(whichGroup)
    endif
    
    if firstUnit != null then
        set firstUnit=null
        return false
    endif
    
    return true
endfunction

function Commands_GetArguments takes nothing returns string
    return SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString()))
endfunction

function Commands_StartsWithCommand takes nothing returns boolean
    return SubString(GetEventPlayerChatString(), 0, StringLength(GetEventPlayerChatStringMatched())) == GetEventPlayerChatStringMatched()
endfunction

function Commands_EnumSelectedCheckForGenerator takes group whichGroup,player whichPlayer,boolexpr filter returns integer
    call GroupEnumUnitsSelected(whichGroup, whichPlayer, filter)
    return GUDR_SwapGroup_UnitsInsideUDR(whichGroup , false , null)
endfunction

function Commands_GetChatMessagePlayerNumber takes string str returns integer
    local integer s2i= S2I(str)
    local integer strHash
    if s2i == 0 then //and str != "0" then
        set strHash=StringHash(str)
        if HaveSavedInteger(udg_Hashtable_1, 0, strHash) then
            return LoadInteger(udg_Hashtable_1, 0, strHash)
        endif
    endif
    return s2i
endfunction

function PlayerNumberIsNotExtraOrVictim takes integer ID returns boolean
    return ( ID <= bj_MAX_PLAYERS or ID == PLAYER_NEUTRAL_AGGRESSIVE + 1 or ID == PLAYER_NEUTRAL_PASSIVE + 1 ) and ( ID >= 1 )
endfunction

function PlayerNumberIsNotNeutral takes integer ID returns boolean
    return ID <= bj_MAX_PLAYERS and ID > 0
endfunction

function CheckCommandOverflow takes nothing returns boolean
    if udg_Commands_Counter < udg_Commands_Counter_Max then
        set udg_Commands_Counter=( udg_Commands_Counter + 1 )
        return true
    elseif udg_Commands_Counter == udg_Commands_Counter_Max then
        call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "Command Overflow! Execution stopped.\n Run the command again until it is finished.")
        set udg_Commands_Counter=( udg_Commands_Counter + 1 )
    endif
    return false
endfunction

function Commands_SetMaximumExecutions takes integer max returns nothing
    set udg_Commands_Counter=0
    set udg_Commands_Counter_Max=max
endfunction

function Commands_CheckOverflow takes nothing returns boolean
    return CheckCommandOverflow()
endfunction

//library LoPHeader ends
//library RectGenerator:

// Import instructions after configuration.
//===================================================
// Simple configuration
//===================================================

//===================================================
// Advanced configuration
//===================================================

// If this function returns true and AUTOMATIC_ON_SPAWN, the unit will have 'Amov' and 'Aatk' removed
// upon entering the map. Additionally, the abilities will only trigger for units when this function
// returns true upon being called with them as an argument.
function RectGenerator_Conditions takes unit whichUnit returns boolean
    return GetUnitTypeId(whichUnit) == RectGenerator_GENERATOR_ID // LoP_IsUnitDecoration(whichUnit)
endfunction



function RectGenerator___InFirstPage takes unit u returns boolean
	return GetUnitAbilityLevel(u, RectGenerator_CREATE_OR_DESTROY) > 0
endfunction

function RectGenerator___InSecondPage takes unit u returns boolean
	return GetUnitAbilityLevel(u, RectGenerator_TOGGLE_WEATHER) > 0
endfunction

function RectGenerator___InThirdPage takes unit u returns boolean
	return GetUnitAbilityLevel(u, RectGenerator_FOG_DENSITY_UP) > 0
endfunction
//===================================================
// Import instructions
//===================================================



//textmacro instance: TableStruct_NewConstTableField("public","strings")

        constant function s__RectGenerator___FogStyle__get_strings takes nothing returns integer
            return s__RectGenerator___FogStyle_strings_impl
        endfunction





//end of: TableStruct_NewConstTableField("public","strings")
//textmacro instance: TableStruct_NewConstTableField("private","linkedListNext")

        constant function s__RectGenerator___FogStyle__get_linkedListNext takes nothing returns integer
            return s__RectGenerator___FogStyle_linkedListNext_impl
        endfunction





//end of: TableStruct_NewConstTableField("private","linkedListNext")
//textmacro instance: TableStruct_NewConstTableField("private","linkedListPrev")

        constant function s__RectGenerator___FogStyle__get_linkedListPrev takes nothing returns integer
            return s__RectGenerator___FogStyle_linkedListPrev_impl
        endfunction





//end of: TableStruct_NewConstTableField("private","linkedListPrev")
        
        function s__RectGenerator___FogStyle_next takes integer this returns integer
            return (LoadInteger(ConstTable___ht, ((s__RectGenerator___FogStyle_linkedListNext_impl)), (this))) // INLINED!!
        endfunction
        
        function s__RectGenerator___FogStyle_prev takes integer this returns integer
            return (LoadInteger(ConstTable___ht, ((s__RectGenerator___FogStyle_linkedListPrev_impl)), (this))) // INLINED!!
        endfunction
        
        function s__RectGenerator___FogStyle_setNext takes integer this,integer nextStyle returns nothing
            call SaveInteger(ConstTable___ht, ((s__RectGenerator___FogStyle_linkedListNext_impl)), (this), ( nextStyle)) // INLINED!!
        endfunction
        
        function s__RectGenerator___FogStyle_setPrev takes integer this,integer prevStyle returns nothing
            call SaveInteger(ConstTable___ht, ((s__RectGenerator___FogStyle_linkedListPrev_impl)), (this), ( prevStyle)) // INLINED!!
        endfunction
        
        function s__RectGenerator___FogStyle_getString takes integer this returns string
            return (LoadStr(ConstTable___ht, ((((s__RectGenerator___FogStyle_strings_impl)))), (this))) // INLINED!!
        endfunction
        
        function s__RectGenerator___FogStyle_setString takes integer this,string str returns nothing
            call SaveStr(ConstTable___ht, ((((s__RectGenerator___FogStyle_strings_impl)))), (this), ( str)) // INLINED!!
        endfunction
        
        





function RectGenerator___GroupLoop takes nothing returns nothing
    local unit udr= GetTriggerUnit()
    local unit enumUnit= GetEnumUnit()
    
    if (HaveSavedHandle(UserDefinedRects___hashTable, (GetHandleId((enumUnit))), (0))) or GetOwningPlayer(enumUnit) != GetOwningPlayer(udr) then // INLINED!!
        call GroupRemoveUnit((LoadGroupHandle(UserDefinedRects___hashTable, (GetHandleId((udr))), (6))), enumUnit) // INLINED!!
    else
        call SetUnitPosition(enumUnit, GetUnitX(enumUnit) + GetSpellTargetX() - GetUnitX(udr), GetUnitY(enumUnit) + GetSpellTargetY() - GetUnitY(udr))
    endif
    
    set udr=null
    set enumUnit=null
endfunction


    function RectGenerator___GroupLoopTerrain takes nothing returns nothing
        local unit udr= GetTriggerUnit()
        local unit enumUnit= GetEnumUnit()
        
        if (HaveSavedHandle(UserDefinedRects___hashTable, (GetHandleId((enumUnit))), (0))) or GetOwningPlayer(enumUnit) != GetOwningPlayer(udr) then // INLINED!!
            call GroupRemoveUnit((LoadGroupHandle(UserDefinedRects___hashTable, (GetHandleId((udr))), (6))), enumUnit) // INLINED!!
        else
            call SetUnitPosition(enumUnit, GetUnitX(enumUnit) + GetTileCenterCoordinate(GetSpellTargetX()) - GetUnitX(udr), GetUnitY(enumUnit) + GetTileCenterCoordinate(GetSpellTargetY()) - GetUnitY(udr))
        endif
        
        set udr=null
        set enumUnit=null
    endfunction


function RectGenerator___ColorMessage takes string color,real value returns string
    return "Fog " + color + " set to: " + I2S(R2I(value * 100. + .5)) + "%"
endfunction


function RectGenerator___onCast takes nothing returns boolean
    local integer abilityId= GetSpellAbilityId()
    
    if not (GetUnitTypeId((GetTriggerUnit())) == RectGenerator_GENERATOR_ID) then // INLINED!!
        
    elseif abilityId == RectGenerator_PAGE_NEXT then

            if (GetUnitAbilityLevel((GetTriggerUnit()), RectGenerator_CREATE_OR_DESTROY) > 0) then // INLINED!!
//textmacro instance: GUDR_FirstPage("Remove","GetTriggerUnit()")

	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_CREATE_OR_DESTROY)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_TOGGLE_VISIBILITY)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_MOVE)

        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_MOVE_TERRAIN)

	
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_RETRACT_X)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_EXPAND_X)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_RETRACT_Y)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_EXPAND_Y)
	
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_LOCK_UNITS)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_UNLOCK_UNITS)

//end of: GUDR_FirstPage("Remove","GetTriggerUnit()")
//textmacro instance: GUDR_SecondPage("Add","GetTriggerUnit()")

	call UnitAddAbility(GetTriggerUnit(), RectGenerator_CHANGE_WEATHER_NEXT)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_CHANGE_WEATHER_PREV)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_TOGGLE_WEATHER)
	

        call UnitAddAbility(GetTriggerUnit(), RectGenerator_TOGGLE_FOG)
        call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_STYLE_UP)
        call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_STYLE_DOWN)
        call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_ZSTART_UP)
        call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_ZSTART_DOWN)
        call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_ZEND_UP)
        call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_ZEND_DOWN)


//end of: GUDR_SecondPage("Add","GetTriggerUnit()")
            elseif (GetUnitAbilityLevel((GetTriggerUnit()), RectGenerator_TOGGLE_WEATHER) > 0) then // INLINED!!
//textmacro instance: GUDR_SecondPage("Remove","GetTriggerUnit()")

	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_CHANGE_WEATHER_NEXT)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_CHANGE_WEATHER_PREV)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_TOGGLE_WEATHER)
	

        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_TOGGLE_FOG)
        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_STYLE_UP)
        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_STYLE_DOWN)
        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_ZSTART_UP)
        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_ZSTART_DOWN)
        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_ZEND_UP)
        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_ZEND_DOWN)


//end of: GUDR_SecondPage("Remove","GetTriggerUnit()")
//textmacro instance: GUDR_ThirdPage("Add","GetTriggerUnit()")

	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_DENSITY_UP)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_DENSITY_DOWN)
	
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_RED_UP)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_RED_DOWN)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_GREEN_UP)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_GREEN_DOWN)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_BLUE_UP)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_BLUE_DOWN)

//end of: GUDR_ThirdPage("Add","GetTriggerUnit()")
            else //if InThirdPage(GetTriggerUnit()) then
//textmacro instance: GUDR_ThirdPage("Remove","GetTriggerUnit()")

	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_DENSITY_UP)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_DENSITY_DOWN)
	
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_RED_UP)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_RED_DOWN)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_GREEN_UP)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_GREEN_DOWN)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_BLUE_UP)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_BLUE_DOWN)

//end of: GUDR_ThirdPage("Remove","GetTriggerUnit()")
//textmacro instance: GUDR_FirstPage("Add","GetTriggerUnit()")

	call UnitAddAbility(GetTriggerUnit(), RectGenerator_CREATE_OR_DESTROY)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_TOGGLE_VISIBILITY)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_MOVE)

        call UnitAddAbility(GetTriggerUnit(), RectGenerator_MOVE_TERRAIN)

	
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_RETRACT_X)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_EXPAND_X)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_RETRACT_Y)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_EXPAND_Y)
	
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_LOCK_UNITS)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_UNLOCK_UNITS)

//end of: GUDR_FirstPage("Add","GetTriggerUnit()")
            endif











































































        
    elseif abilityId == RectGenerator_PAGE_PREV then

            if (GetUnitAbilityLevel((GetTriggerUnit()), RectGenerator_CREATE_OR_DESTROY) > 0) then // INLINED!!
//textmacro instance: GUDR_FirstPage("Remove","GetTriggerUnit()")

	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_CREATE_OR_DESTROY)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_TOGGLE_VISIBILITY)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_MOVE)

        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_MOVE_TERRAIN)

	
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_RETRACT_X)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_EXPAND_X)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_RETRACT_Y)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_EXPAND_Y)
	
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_LOCK_UNITS)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_UNLOCK_UNITS)

//end of: GUDR_FirstPage("Remove","GetTriggerUnit()")
//textmacro instance: GUDR_ThirdPage("Add","GetTriggerUnit()")

	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_DENSITY_UP)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_DENSITY_DOWN)
	
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_RED_UP)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_RED_DOWN)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_GREEN_UP)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_GREEN_DOWN)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_BLUE_UP)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_BLUE_DOWN)

//end of: GUDR_ThirdPage("Add","GetTriggerUnit()")
            elseif (GetUnitAbilityLevel((GetTriggerUnit()), RectGenerator_TOGGLE_WEATHER) > 0) then // INLINED!!
//textmacro instance: GUDR_SecondPage("Remove","GetTriggerUnit()")

	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_CHANGE_WEATHER_NEXT)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_CHANGE_WEATHER_PREV)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_TOGGLE_WEATHER)
	

        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_TOGGLE_FOG)
        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_STYLE_UP)
        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_STYLE_DOWN)
        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_ZSTART_UP)
        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_ZSTART_DOWN)
        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_ZEND_UP)
        call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_ZEND_DOWN)


//end of: GUDR_SecondPage("Remove","GetTriggerUnit()")
//textmacro instance: GUDR_FirstPage("Add","GetTriggerUnit()")

	call UnitAddAbility(GetTriggerUnit(), RectGenerator_CREATE_OR_DESTROY)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_TOGGLE_VISIBILITY)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_MOVE)

        call UnitAddAbility(GetTriggerUnit(), RectGenerator_MOVE_TERRAIN)

	
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_RETRACT_X)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_EXPAND_X)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_RETRACT_Y)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_EXPAND_Y)
	
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_LOCK_UNITS)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_UNLOCK_UNITS)

//end of: GUDR_FirstPage("Add","GetTriggerUnit()")
            else //if InThirdPage(GetTriggerUnit()) then
//textmacro instance: GUDR_ThirdPage("Remove","GetTriggerUnit()")

	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_DENSITY_UP)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_DENSITY_DOWN)
	
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_RED_UP)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_RED_DOWN)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_GREEN_UP)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_GREEN_DOWN)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_BLUE_UP)
	call UnitRemoveAbility(GetTriggerUnit(), RectGenerator_FOG_BLUE_DOWN)

//end of: GUDR_ThirdPage("Remove","GetTriggerUnit()")
//textmacro instance: GUDR_SecondPage("Add","GetTriggerUnit()")

	call UnitAddAbility(GetTriggerUnit(), RectGenerator_CHANGE_WEATHER_NEXT)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_CHANGE_WEATHER_PREV)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_TOGGLE_WEATHER)
	

        call UnitAddAbility(GetTriggerUnit(), RectGenerator_TOGGLE_FOG)
        call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_STYLE_UP)
        call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_STYLE_DOWN)
        call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_ZSTART_UP)
        call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_ZSTART_DOWN)
        call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_ZEND_UP)
        call UnitAddAbility(GetTriggerUnit(), RectGenerator_FOG_ZEND_DOWN)


//end of: GUDR_SecondPage("Add","GetTriggerUnit()")
            endif











































































           
    elseif abilityId == RectGenerator_RETRACT_Y then
        call MoveGUDR(GetTriggerUnit() , 0 , - 64 , true)
        
    elseif abilityId == RectGenerator_EXPAND_Y then
        call MoveGUDR(GetTriggerUnit() , 0 , 64 , true)
        
    elseif abilityId == RectGenerator_EXPAND_X then
        call MoveGUDR(GetTriggerUnit() , 64 , 0 , true)
        
    elseif abilityId == RectGenerator_RETRACT_X then
        call MoveGUDR(GetTriggerUnit() , - 64 , 0 , true)
    
    elseif abilityId == RectGenerator_MOVE then

            if GetUnitX(GetTriggerUnit()) != Get64TileCenterCoordinate(GetUnitX(GetTriggerUnit())) then
                call SetUnitX(GetTriggerUnit(), GetUnitX(GetTriggerUnit()) + 32)
            endif
            if GetUnitY(GetTriggerUnit()) != Get64TileCenterCoordinate(GetUnitY(GetTriggerUnit())) then
                call SetUnitY(GetTriggerUnit(), GetUnitY(GetTriggerUnit()) + 32)
            endif

            
        if CountUnitsInGroup((LoadGroupHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (6)))) <= RectGenerator___MAXIMUM_MOVE_LIMIT then // INLINED!!
            call ForGroup((LoadGroupHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (6))), function RectGenerator___GroupLoop) // INLINED!!
            call SetUnitPosition(GetTriggerUnit(), GetSpellTargetX(), GetSpellTargetY())
            call MoveGUDR(GetTriggerUnit() , 0 , 0 , true)
        else
            call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "Failed to move Rect Generator:\n Attached unit limit exceeded! (" + I2S(RectGenerator___MAXIMUM_MOVE_LIMIT) + ")")
            call SetUnitPosition(GetTriggerUnit(), GetUnitX(GetTriggerUnit()), GetUnitY(GetTriggerUnit()))
            call MoveGUDR(GetTriggerUnit() , 0 , 0 , true)
        endif
        
    elseif abilityId == RectGenerator_LOCK_UNITS then
        call GroupGUDR(GetTriggerUnit() , false)
        
    elseif abilityId == RectGenerator_TOGGLE_VISIBILITY then
        call ToggleGUDRVisibility(GetTriggerUnit() , true , true)
        
    elseif abilityId == RectGenerator_CHANGE_WEATHER_NEXT then
        call ChangeGUDRWeatherNew(GetTriggerUnit() , 1 , 0)
    
    elseif abilityId == RectGenerator_CHANGE_WEATHER_PREV then
        call ChangeGUDRWeatherNew(GetTriggerUnit() , - 1 , 0)
    
    elseif abilityId == RectGenerator_TOGGLE_WEATHER then
        if (HaveSavedInteger(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (5))) then // INLINED!!
            call DestroyWeather(GetTriggerUnit())
        else
            call CreateWeather(GetTriggerUnit())
        endif
    
    elseif abilityId == RectGenerator_CREATE_OR_DESTROY then
        if (HaveSavedHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0))) then // INLINED!!
            call DestroyGUDR(GetTriggerUnit())
        else
            call CreateGUDR(GetTriggerUnit())
        endif
    
    elseif abilityId == RectGenerator_UNLOCK_UNITS then
        call GroupGUDR(GetTriggerUnit() , true)
    else

            if (LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))) == 0 then // INLINED!!
        
            elseif abilityId == RectGenerator_FOG_RED_UP then
                if (LoadReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) <= .96 then // INLINED!!
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( (((LoadReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) + .05)*1.0))*1.0)) // INLINED!!
                else
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( ((0.)*1.0))*1.0)) // INLINED!!
                endif
                call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, ("Fog " + ("|c00ff0000Red|r" ) + " set to: " + I2S(R2I((( (LoadReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))))*1.0) * 100. + .5)) + "%")) // INLINED!!
            
            elseif abilityId == RectGenerator_FOG_RED_DOWN then
                if (LoadReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) >= 0.01 then // INLINED!!
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( (((LoadReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) - .05)*1.0))*1.0)) // INLINED!!
                else
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( ((1.)*1.0))*1.0)) // INLINED!!
                endif
                call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, ("Fog " + ("|c00ff0000Red|r" ) + " set to: " + I2S(R2I((( (LoadReal(ConstTable___ht, (((((s__TerrainFog_red_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))))*1.0) * 100. + .5)) + "%")) // INLINED!!
                
            elseif abilityId == RectGenerator_FOG_BLUE_UP then
                if (LoadReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) <= .96 then // INLINED!!
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( (((LoadReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) + .05)*1.0))*1.0)) // INLINED!!
                else
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( ((0.)*1.0))*1.0)) // INLINED!!
                endif
                call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, ("Fog " + ("|c000000ffBlue|r" ) + " set to: " + I2S(R2I((( (LoadReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))))*1.0) * 100. + .5)) + "%")) // INLINED!!
            
            elseif abilityId == RectGenerator_FOG_BLUE_DOWN then
                if (LoadReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) >= 0.01 then // INLINED!!
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( (((LoadReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) - .05)*1.0))*1.0)) // INLINED!!
                else
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( ((1.)*1.0))*1.0)) // INLINED!!
                endif
                call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, ("Fog " + ("|c000000ffBlue|r" ) + " set to: " + I2S(R2I((( (LoadReal(ConstTable___ht, (((((s__TerrainFog_blue_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))))*1.0) * 100. + .5)) + "%")) // INLINED!!
            
            elseif abilityId == RectGenerator_FOG_GREEN_UP then
                if (LoadReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) <= .96 then // INLINED!!
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( (((LoadReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) + .05)*1.0))*1.0)) // INLINED!!
                else
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( ((0.)*1.0))*1.0)) // INLINED!!
                endif
                call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, ("Fog " + ("|c0000ff00Green|r" ) + " set to: " + I2S(R2I((( (LoadReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))))*1.0) * 100. + .5)) + "%")) // INLINED!!
            
            elseif abilityId == RectGenerator_FOG_GREEN_DOWN then
                if (LoadReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) >= 0.01 then // INLINED!!
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( (((LoadReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) - .05)*1.0))*1.0)) // INLINED!!
                else
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( ((1.)*1.0))*1.0)) // INLINED!!
                endif
                call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, ("Fog " + ("|c0000ff00Green|r" ) + " set to: " + I2S(R2I((( (LoadReal(ConstTable___ht, (((((s__TerrainFog_green_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))))*1.0) * 100. + .5)) + "%")) // INLINED!!
            
            elseif abilityId == RectGenerator_FOG_DENSITY_UP then
                call SaveReal(ConstTable___ht, (((((s__TerrainFog_density_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( (((LoadReal(ConstTable___ht, (((((s__TerrainFog_density_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) + .00005)*1.0))*1.0)) // INLINED!!
                call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "Fog Density set to: " + R2S((LoadReal(ConstTable___ht, (((((s__TerrainFog_density_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) * 100) + "%") // INLINED!!
            
            elseif abilityId == RectGenerator_FOG_DENSITY_DOWN then
                if (LoadReal(ConstTable___ht, (((((s__TerrainFog_density_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) >= 0.00006 then // INLINED!!
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_density_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( (((LoadReal(ConstTable___ht, (((((s__TerrainFog_density_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) - .00005)*1.0))*1.0)) // INLINED!!
                else
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_density_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( ((0.)*1.0))*1.0)) // INLINED!!
                endif
                call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "Fog Density set to: " + R2S((LoadReal(ConstTable___ht, (((((s__TerrainFog_density_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) * 100) + "%") // INLINED!!
            
            elseif abilityId == RectGenerator_FOG_ZSTART_UP then
                call SaveReal(ConstTable___ht, (((((s__TerrainFog_zStart_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( (((LoadReal(ConstTable___ht, (((((s__TerrainFog_zStart_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) + 1000.)*1.0))*1.0)) // INLINED!!
                call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, ( "Fog zStart set to: " + R2S((LoadReal(ConstTable___ht, (((((s__TerrainFog_zStart_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0))))))))))))))) )) // INLINED!!
            
            elseif abilityId == RectGenerator_FOG_ZSTART_DOWN then
                if (LoadReal(ConstTable___ht, (((((s__TerrainFog_zStart_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) >= 1200. then // INLINED!!
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_zStart_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( (((LoadReal(ConstTable___ht, (((((s__TerrainFog_zStart_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) - 1000.)*1.0))*1.0)) // INLINED!!
                else
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_zStart_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( ((0.)*1.0))*1.0)) // INLINED!!
                endif
                call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, ( "Fog zStart set to: " + R2S((LoadReal(ConstTable___ht, (((((s__TerrainFog_zStart_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0))))))))))))))) )) // INLINED!!
            
            elseif abilityId == RectGenerator_FOG_ZEND_UP then
                call SaveReal(ConstTable___ht, (((((s__TerrainFog_zEnd_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( (((LoadReal(ConstTable___ht, (((((s__TerrainFog_zEnd_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) + 500.)*1.0))*1.0)) // INLINED!!
                call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, ( "Fog zEnd set to: " + R2S((LoadReal(ConstTable___ht, (((((s__TerrainFog_zEnd_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0))))))))))))))) )) // INLINED!!
            
            elseif abilityId == RectGenerator_FOG_ZEND_DOWN then
                if (LoadReal(ConstTable___ht, (((((s__TerrainFog_zEnd_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) >= 1200. then // INLINED!!
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_zEnd_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( (((LoadReal(ConstTable___ht, (((((s__TerrainFog_zEnd_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))) - 500.)*1.0))*1.0)) // INLINED!!
                else
                    call SaveReal(ConstTable___ht, (((((s__TerrainFog_zEnd_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), (( ((0.)*1.0))*1.0)) // INLINED!!
                endif
                call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, ( "Fog zEnd set to: " + R2S((LoadReal(ConstTable___ht, (((((s__TerrainFog_zEnd_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0))))))))))))))) )) // INLINED!!
            
            elseif abilityId == RectGenerator_FOG_STYLE_UP then
                call SaveInteger(ConstTable___ht, (((((s__TerrainFog_style_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), ( ((LoadInteger(ConstTable___ht, ((s__RectGenerator___FogStyle_linkedListNext_impl)), ((((LoadInteger(ConstTable___ht, (((((s__TerrainFog_style_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))))))))))) // INLINED!!
                call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "Fog Style set to: " + (LoadStr(ConstTable___ht, ((((s__RectGenerator___FogStyle_strings_impl)))), ((((LoadInteger(ConstTable___ht, (((((s__TerrainFog_style_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))))))))) // INLINED!!
            
            elseif abilityId == RectGenerator_FOG_STYLE_DOWN then
                call SaveInteger(ConstTable___ht, (((((s__TerrainFog_style_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))), ( ((LoadInteger(ConstTable___ht, ((s__RectGenerator___FogStyle_linkedListPrev_impl)), ((((LoadInteger(ConstTable___ht, (((((s__TerrainFog_style_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))))))))))) // INLINED!!
                call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "Fog Style set to: " + (LoadStr(ConstTable___ht, ((((s__RectGenerator___FogStyle_strings_impl)))), ((((LoadInteger(ConstTable___ht, (((((s__TerrainFog_style_impl))))), (((LoadInteger(ConstTable___ht, (((s__RectEnvironment_fog_impl))), (((GetHandleId(((LoadRectHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (0)))))))))))))))))))) // INLINED!!
            endif


            if abilityId == RectGenerator_MOVE_TERRAIN then
                if GetUnitX(GetTriggerUnit()) != GetTileCenterCoordinate(GetUnitX(GetTriggerUnit())) then
                    call SetUnitX(GetTriggerUnit(), GetUnitX(GetTriggerUnit()) - 32)
                endif
                if GetUnitY(GetTriggerUnit()) != GetTileCenterCoordinate(GetUnitY(GetTriggerUnit())) then
                    call SetUnitY(GetTriggerUnit(), GetUnitY(GetTriggerUnit()) - 32)
                endif
            
                if CountUnitsInGroup((LoadGroupHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (6)))) <= RectGenerator___MAXIMUM_MOVE_LIMIT then // INLINED!!
                    call ForGroup((LoadGroupHandle(UserDefinedRects___hashTable, (GetHandleId((GetTriggerUnit()))), (6))), function RectGenerator___GroupLoopTerrain) // INLINED!!
                    call SetUnitPosition(GetTriggerUnit(), GetTileCenterCoordinate(GetSpellTargetX()), GetTileCenterCoordinate(GetSpellTargetY()))
                    call MoveGUDR(GetTriggerUnit() , 0 , 0 , true)
                else
                    call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "Failed to move Rect Generator:\n Attached unit limit exceeded! (" + I2S(RectGenerator___MAXIMUM_MOVE_LIMIT) + ")")
                    call SetUnitPosition(GetTriggerUnit(), GetUnitX(GetTriggerUnit()), GetUnitY(GetTriggerUnit()))
                    call MoveGUDR(GetTriggerUnit() , 0 , 0 , true)
                endif
            endif

    endif
    
    return false
endfunction

function RectGenerator___onSpawn takes nothing returns boolean
    local unit u= GetTriggerUnit()
    
    if u == null then
        set u=GetFilterUnit()
    endif
    
    if (GetUnitTypeId((u)) == RectGenerator_GENERATOR_ID) then // INLINED!!
//textmacro instance: GUDR_FirstPage("Add", "u")

	call UnitAddAbility(u, RectGenerator_CREATE_OR_DESTROY)
	call UnitAddAbility(u, RectGenerator_TOGGLE_VISIBILITY)
	call UnitAddAbility(u, RectGenerator_MOVE)

        call UnitAddAbility(u, RectGenerator_MOVE_TERRAIN)

	
	call UnitAddAbility(u, RectGenerator_RETRACT_X)
	call UnitAddAbility(u, RectGenerator_EXPAND_X)
	call UnitAddAbility(u, RectGenerator_RETRACT_Y)
	call UnitAddAbility(u, RectGenerator_EXPAND_Y)
	
	call UnitAddAbility(u, RectGenerator_LOCK_UNITS)
	call UnitAddAbility(u, RectGenerator_UNLOCK_UNITS)

//end of: GUDR_FirstPage("Add", "u")
    
        call UnitRemoveAbility(u, 'Amov')
        call UnitRemoveAbility(u, 'Aatk')
    endif
    
    set u=null
    return false
endfunction

//===========================================================================
function RectGenerator___onInit takes nothing returns nothing
    local trigger trig= CreateTrigger()
    local boolexpr onSpawnFilter= Condition(function RectGenerator___onSpawn)
    local integer i= 0
    
    call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_SPELL_CAST)
    call TriggerAddCondition(trig, Condition(function RectGenerator___onCast))
    

















    

        call SaveStr(ConstTable___ht, ((((s__RectGenerator___FogStyle_strings_impl)))), (((s__TerrainFog_LINEAR))), ( ("Linear"))) // INLINED!!
        call SaveStr(ConstTable___ht, ((((s__RectGenerator___FogStyle_strings_impl)))), (((s__TerrainFog_EXPONENTIAL))), ( ("Exponential 1"))) // INLINED!!
        call SaveStr(ConstTable___ht, ((((s__RectGenerator___FogStyle_strings_impl)))), (((s__TerrainFog_EXPONENTIAL2))), ( ("Exponential 2"))) // INLINED!!
        
//textmacro instance: udrAddon_LinkStyles("TerrainFog.LINEAR", "TerrainFog.EXPONENTIAL")
        call SaveInteger(ConstTable___ht, ((s__RectGenerator___FogStyle_linkedListNext_impl)), (((s__TerrainFog_LINEAR))), ( (s__TerrainFog_EXPONENTIAL))) // INLINED!!
        call SaveInteger(ConstTable___ht, ((s__RectGenerator___FogStyle_linkedListPrev_impl)), (((s__TerrainFog_EXPONENTIAL))), ( (s__TerrainFog_LINEAR))) // INLINED!!
//end of: udrAddon_LinkStyles("TerrainFog.LINEAR", "TerrainFog.EXPONENTIAL")
//textmacro instance: udrAddon_LinkStyles("TerrainFog.EXPONENTIAL", "TerrainFog.EXPONENTIAL2")
        call SaveInteger(ConstTable___ht, ((s__RectGenerator___FogStyle_linkedListNext_impl)), (((s__TerrainFog_EXPONENTIAL))), ( (s__TerrainFog_EXPONENTIAL2))) // INLINED!!
        call SaveInteger(ConstTable___ht, ((s__RectGenerator___FogStyle_linkedListPrev_impl)), (((s__TerrainFog_EXPONENTIAL2))), ( (s__TerrainFog_EXPONENTIAL))) // INLINED!!
//end of: udrAddon_LinkStyles("TerrainFog.EXPONENTIAL", "TerrainFog.EXPONENTIAL2")
//textmacro instance: udrAddon_LinkStyles("TerrainFog.EXPONENTIAL2", "TerrainFog.LINEAR")
        call SaveInteger(ConstTable___ht, ((s__RectGenerator___FogStyle_linkedListNext_impl)), (((s__TerrainFog_EXPONENTIAL2))), ( (s__TerrainFog_LINEAR))) // INLINED!!
        call SaveInteger(ConstTable___ht, ((s__RectGenerator___FogStyle_linkedListPrev_impl)), (((s__TerrainFog_LINEAR))), ( (s__TerrainFog_EXPONENTIAL2))) // INLINED!!
//end of: udrAddon_LinkStyles("TerrainFog.EXPONENTIAL2", "TerrainFog.LINEAR")

    
    set trig=null
endfunction

//library RectGenerator ends
//library SaveNLoad:
////////////////////////////////////////////////////////////////////////////////////////////////////
//SaveNLoad and required libraries v2.0
////////////////////////////////////////////////////////////////////////////////////////////////////
constant function SaveLoadVersion takes nothing returns integer
    return 2
endfunction

//////////////////////////////////////////////////////
//SaveNLoad by Guhun

// Requires:
// -GUDR
// -GUMS
// -ID2S function (Takes raw obejct ID, returns string)
// -Hexa to Decimal
//////////////////////////////////////////////////////
function Save_GetCenterX takes integer playerId returns real
    return udg_load_center[playerId + 1]
endfunction

function Save_GetCenterY takes integer playerId returns real
    return udg_load_center[playerId + 1 + bj_MAX_PLAYERS]
endfunction

function Save_IsPlayerLoading takes integer playerId returns boolean
    return udg_save_load_boolean[playerId + 1 + bj_MAX_PLAYERS]
endfunction

function Save_SetPlayerLoading takes integer playerId,boolean flag returns nothing
    set udg_save_load_boolean[playerId + 1 + bj_MAX_PLAYERS]=flag
endfunction


function SaveToFile takes string password,integer numbr,string saveStr returns nothing
    local real cur_life= 0
    local real posx
    local real posy

    call PreloadGenStart()
    call PreloadGenClear()
    call Preload(saveStr)
    call PreloadGenEnd("DataManager\\" + password + "\\" + I2S(numbr) + ".txt")

endfunction

function B2S takes boolean bool returns string
    if bool then
        return "True"
    endif
    return "False"
endfunction

function S2B takes string str returns boolean
    if str == "True" then
        return true
    endif
    return false
endfunction
        

    function Save_GetGUDRSaveString takes integer generatorId returns string
        local rect userRect= (LoadRectHandle(UserDefinedRects___hashTable, (generatorId), (0))) // INLINED!!
        
        local real length= GetRectMaxX(userRect) - GetRectCenterX(userRect)
        local real height= GetRectMaxY(userRect) - GetRectCenterY(userRect)
        local integer weatherType= (LoadInteger(UserDefinedRects___hashTable, (generatorId), (8))) // INLINED!!
        local boolean hidden
        
        return R2S(length) + "=" + R2S(height) + "=" + I2S(weatherType) + "="
    endfunction

    function Load_RestoreGUDR takes unit generator,string restoreStr returns nothing
        local integer splitterIndex
        
        local real length
        local real height
        local integer weatherType
        
        //Str = "length=height=weather= (we need an equal at the end in order to make future versions backwards-compatible
        
        set splitterIndex=CutToCharacter(restoreStr , "=")
        set length=S2R(SubString(restoreStr, 0, splitterIndex))
        set restoreStr=SubString(restoreStr, splitterIndex + 1, StringLength(restoreStr))
            
        set splitterIndex=CutToCharacter(restoreStr , "=")
        set height=S2R(SubString(restoreStr, 0, splitterIndex))
        set restoreStr=SubString(restoreStr, splitterIndex + 1, StringLength(restoreStr))
        
        set splitterIndex=CutToCharacter(restoreStr , "=")
        set weatherType=S2I(SubString(restoreStr, 0, splitterIndex))
        //set restoreStr = SubString(restoreStr,splitterIndex+1,StringLength(restoreStr))
        
        call CreateGUDR(generator)
        call MoveGUDR(generator , length , height , true)
        call ChangeGUDRWeatherNew(generator , 0 , weatherType)
    endfunction


function LoadUnit takes string chat_str,player un_owner returns nothing
    local integer str_index
    local integer un_type
    local real un_posx
    local real un_posy
    local real un_flyH
    local real un_fangle
    local integer len_str= StringLength(chat_str)
    local unit resultUnit
    local integer playerId= GetPlayerId(un_owner)
    
    //Values saved by GUMS
    local string size
    local string red
    local string green
    local string blue
    local string alpha
    local string color
    local string aSpeed
    local string animTag
    local string select

    
    set str_index=CutToComma(chat_str)
    set un_type=( S2ID(( SubString(chat_str, 0, str_index) )) )
    set chat_str=SubString(chat_str, str_index + 1, len_str)
    set len_str=StringLength(chat_str)
    set udg_save_LoadUnitType=un_type
    
    //LoadUnit Trigger Conidtions
    if not TriggerEvaluate(gg_trg_LoadUnit) then
        set udg_save_LoadUnitType=0
        return
    endif
    set udg_save_LoadUnitType=0

    //Start translating the chat input
    set str_index=CutToComma(chat_str)
    set un_posx=S2R(SubString(chat_str, 0, str_index)) + (udg_load_center[(playerId) + 1]) // INLINED!!
    set chat_str=SubString(chat_str, str_index + 1, len_str)
    set len_str=StringLength(chat_str)

    set str_index=CutToComma(chat_str)
    set un_posy=S2R(SubString(chat_str, 0, str_index)) + (udg_load_center[(playerId) + 1 + bj_MAX_PLAYERS]) // INLINED!!
    set chat_str=SubString(chat_str, str_index + 1, len_str)
    set len_str=StringLength(chat_str)

    set str_index=CutToComma(chat_str)
    set un_flyH=S2R(SubString(chat_str, 0, str_index))
    set chat_str=SubString(chat_str, str_index + 1, len_str)
    set len_str=StringLength(chat_str)

    set str_index=CutToComma(chat_str)
    set un_fangle=S2R(SubString(chat_str, 0, str_index))
    set chat_str=SubString(chat_str, str_index + 1, len_str)
    set len_str=StringLength(chat_str)
    
    if chat_str != "" then //Version 1 backwards compatibility
        set str_index=CutToComma(chat_str)
        set size=( SubString(chat_str, 0, str_index) )
        set chat_str=SubString(chat_str, str_index + 1, len_str)
        set len_str=StringLength(chat_str)
        
        set str_index=CutToComma(chat_str)
        set red=( SubString(chat_str, 0, str_index) )
        set chat_str=SubString(chat_str, str_index + 1, len_str)
        set len_str=StringLength(chat_str)
        
        set str_index=CutToComma(chat_str)
        set green=( SubString(chat_str, 0, str_index) )
        set chat_str=SubString(chat_str, str_index + 1, len_str)
        set len_str=StringLength(chat_str)
        
        set str_index=CutToComma(chat_str)
        set blue=( SubString(chat_str, 0, str_index) )
        set chat_str=SubString(chat_str, str_index + 1, len_str)
        set len_str=StringLength(chat_str)
        
        set str_index=CutToComma(chat_str)
        set alpha=( SubString(chat_str, 0, str_index) )
        set chat_str=SubString(chat_str, str_index + 1, len_str)
        set len_str=StringLength(chat_str)
        
        set str_index=CutToComma(chat_str)
        set color=( SubString(chat_str, 0, str_index) )
        set chat_str=SubString(chat_str, str_index + 1, len_str)
        set len_str=StringLength(chat_str)
        
        set str_index=CutToComma(chat_str)
        set aSpeed=( SubString(chat_str, 0, str_index) )
        set chat_str=SubString(chat_str, str_index + 1, len_str)
        set len_str=StringLength(chat_str)
        
        if chat_str != "" then
            set str_index=CutToComma(chat_str)
            set animTag=( SubString(chat_str, 0, str_index) )
            set chat_str=SubString(chat_str, str_index + 1, len_str)
            set len_str=StringLength(chat_str)
            if chat_str != "" then
                set str_index=CutToComma(chat_str)
                set select=( SubString(chat_str, 0, str_index) )
                //set chat_str = SubString(chat_str,str_index+1,len_str+1)
                //set len_str = StringLength(chat_str)
            endif
        endif
        
    endif

    //If the desired position is outside of the playable map area, abort the opertaion
    if un_posx > GetRectMaxX(udg_save_WholeMapRect) then
        return
    endif
    if un_posx < GetRectMinX(udg_save_WholeMapRect) then
        return
    endif
    if un_posy > GetRectMaxY(udg_save_WholeMapRect) then
        return
    endif
    if un_posy < GetRectMinY(udg_save_WholeMapRect) then
        return
    endif

    
    //Create the unit and modify it according to the chat input data
    set resultUnit=CreateUnit(un_owner, un_type, un_posx, un_posy, un_fangle)
    
    //Set flying height
    if UnitAddAbility(resultUnit, 'Amrf') then
        call UnitRemoveAbility(resultUnit, 'Amrf')
    endif
    
    call SetUnitFlyHeight(resultUnit, un_flyH, 0)
    
    // Fix flying height for structures
    if GetUnitAbilityLevel(resultUnit, 'Amov') == 0 then
        if un_flyH > 0.5 then
            if IsUnitType(resultUnit, UNIT_TYPE_STRUCTURE) then
                call GUMS_AddStructureFlightAbility(resultUnit)
                call IssueImmediateOrder(resultUnit, "unroot")
            else
                call GroupAddUnit(UnitVisualMods___loopGroup, (resultUnit)) // INLINED!!
            endif
        endif
    endif

    
    //GUMS modifications
    if size != "D" then
        call GUMSSetUnitScale(resultUnit , S2R(size))
    endif
    if red != "D" then
        call GUMSSetUnitVertexColor(resultUnit , S2I(red) / 2.55 , S2I(green) / 2.55 , S2I(blue) / 2.55 , ( 255 - S2I(alpha) ) / 2.55)
    endif
    if color != "D" then
        call GUMSSetUnitColor(resultUnit , S2I(color))
    endif
    if aSpeed != "D" then
        call GUMSSetUnitAnimSpeed(resultUnit , S2R(aSpeed))
    endif
    if animTag != "D" then
        call GUMSAddUnitAnimationTag(resultUnit , GUMSConvertTags(animTag))
    endif
    if select == "1" then
        call GUMSMakeUnitDragSelectable(resultUnit)
    elseif select == "2" then
        call GUMSMakeUnitUnSelectable(resultUnit)
    endif
    
    set udg_save_LastLoadedUnit[playerId]=resultUnit
    set resultUnit=null
endfunction

function LoadDestructable takes string chatStr returns nothing
    local integer destType
    local real destX
    local real destY
    local integer cutToComma
    local integer playerId= GetPlayerId(GetTriggerPlayer())
    
    
    set cutToComma=CutToCharacter(chatStr , "|")
    set destType=S2I(SubString(chatStr, 0, cutToComma))
    set chatStr=SubString(chatStr, cutToComma + 1, StringLength(chatStr))
    
    set cutToComma=CutToCharacter(chatStr , "|")
    set destX=S2R(SubString(chatStr, 0, cutToComma)) + (udg_load_center[(playerId) + 1]) // INLINED!!
    set chatStr=SubString(chatStr, cutToComma + 1, StringLength(chatStr))
    
    set cutToComma=CutToCharacter(chatStr , "|")
    set destY=S2R(SubString(chatStr, 0, cutToComma)) + (udg_load_center[(playerId) + 1 + bj_MAX_PLAYERS]) // INLINED!!
    //set chatStr = SubString(chatStr,cutToComma+1,StringLength(chatStr))
    
    //call BJDebugMsg(I2S(destType) + " " + R2S(destX) + " " + R2S(destY))
    
    set bj_lastCreatedDestructable=CreateDestructable(destType, destX, destY, 270, 1, 0)
    //if not IsDestructableTree(bj_lastCreatedDestructable) then
      //  call RemoveDestructable(bj_lastCreatedDestructable)
    //endif
endfunction

function LoadTerrain takes string chatStr returns nothing

    local integer cutToComma
    local integer playerNumber= GetPlayerId(GetTriggerPlayer())
    local integer i= 1
    local integer strSize
    
    local real offsetX
    local real offsetY
    local real centerY
    local real centerX

    if not ( SubString(chatStr, 0, 1) == "@" ) then
    
    set cutToComma=CutToCharacter(chatStr , "@")
    set udg_save_XYminmaxcur[playerNumber]=S2I(SubString(chatStr, 0, cutToComma))
    set chatStr=SubString(chatStr, cutToComma + 1, StringLength(chatStr))

    set cutToComma=CutToCharacter(chatStr , "@")
    set udg_save_XYminmaxcur[playerNumber + bj_MAX_PLAYERS]=S2I(SubString(chatStr, 0, cutToComma))
    set chatStr=SubString(chatStr, cutToComma + 1, StringLength(chatStr))
    
    set cutToComma=CutToCharacter(chatStr , "@")
    set udg_save_XYminmaxcur[playerNumber + 3 * bj_MAX_PLAYERS]=S2I(SubString(chatStr, 0, cutToComma))
    set chatStr=SubString(chatStr, cutToComma + 1, StringLength(chatStr))
    
    set cutToComma=CutToCharacter(chatStr , "@")
    set udg_save_XYminmaxcur[playerNumber + 4 * bj_MAX_PLAYERS]=S2I(SubString(chatStr, 0, cutToComma))
    
    if (udg_load_center[(playerNumber) + 1]) != 0 or (udg_load_center[(playerNumber) + 1 + bj_MAX_PLAYERS]) != 0 then // INLINED!!
        set centerX=( udg_save_XYminmaxcur[playerNumber] + udg_save_XYminmaxcur[playerNumber + bj_MAX_PLAYERS] ) / 2
        set centerY=( udg_save_XYminmaxcur[playerNumber + 3 * bj_MAX_PLAYERS] + udg_save_XYminmaxcur[playerNumber + 4 * bj_MAX_PLAYERS] ) / 2
        set offsetX=(udg_load_center[(playerNumber) + 1]) - centerX // INLINED!!
        set offsetY=(udg_load_center[(playerNumber) + 1 + bj_MAX_PLAYERS]) - centerY // INLINED!!
        
        set udg_save_XYminmaxcur[playerNumber]=udg_save_XYminmaxcur[playerNumber] + offsetX
        set udg_save_XYminmaxcur[playerNumber + bj_MAX_PLAYERS]=udg_save_XYminmaxcur[playerNumber + bj_MAX_PLAYERS] + offsetX
        set udg_save_XYminmaxcur[playerNumber + 3 * bj_MAX_PLAYERS]=udg_save_XYminmaxcur[playerNumber + 3 * bj_MAX_PLAYERS] + offsetY
        set udg_save_XYminmaxcur[playerNumber + 4 * bj_MAX_PLAYERS]=udg_save_XYminmaxcur[playerNumber + 4 * bj_MAX_PLAYERS] + offsetY
    endif
    
    set udg_save_XYminmaxcur[playerNumber + 2 * bj_MAX_PLAYERS]=udg_save_XYminmaxcur[playerNumber]
    set udg_save_XYminmaxcur[playerNumber + 5 * bj_MAX_PLAYERS]=udg_save_XYminmaxcur[playerNumber + 3 * bj_MAX_PLAYERS]
    
    return
    endif
    
    set strSize=StringLength(chatStr)
    loop
    exitwhen i >= strSize
        call SetTerrainType(udg_save_XYminmaxcur[playerNumber + 2 * bj_MAX_PLAYERS], udg_save_XYminmaxcur[playerNumber + 5 * bj_MAX_PLAYERS], udg_TileSystem_TILES[LoadH2D(SubString(chatStr, i, i + 1))], LoadH2D(SubString(chatStr, i + 1, i + 2)), 1, 0)
        set i=i + 2
        if udg_save_XYminmaxcur[playerNumber + 2 * bj_MAX_PLAYERS] > udg_save_XYminmaxcur[playerNumber + bj_MAX_PLAYERS] then
            set udg_save_XYminmaxcur[playerNumber + 5 * bj_MAX_PLAYERS]=udg_save_XYminmaxcur[playerNumber + 5 * bj_MAX_PLAYERS] + 128
            set udg_save_XYminmaxcur[playerNumber + 2 * bj_MAX_PLAYERS]=udg_save_XYminmaxcur[playerNumber]
        else
            set udg_save_XYminmaxcur[playerNumber + 2 * bj_MAX_PLAYERS]=udg_save_XYminmaxcur[playerNumber + 2 * bj_MAX_PLAYERS] + 128
        endif
    endloop

endfunction

function SaveCenter takes string password,real centerX,real centerY returns nothing
    call PreloadGenStart()
    call PreloadGenClear()
    call Preload(R2S(centerX) + "," + R2S(centerY))
    call PreloadGenEnd("DataManager\\" + password + "\\center.txt")
endfunction

function SaveSize takes string password,integer size returns nothing
    call PreloadGenStart()
    call PreloadGenClear()
    call Preload(I2S(size))
    call PreloadGenEnd("DataManager\\" + password + "\\size.txt")
    
    //Output the major version with which the save has been made (compatibility)
    call PreloadGenStart()
    call PreloadGenClear()
    call Preload(I2S((2))) // INLINED!!
    call PreloadGenEnd("DataManager\\" + password + "\\version.txt")
endfunction

function LoadRequest takes string password returns nothing
    call PreloadGenStart()
    call PreloadGenClear()
    call Preload(password)
    call PreloadGenEnd("DataManager\\load.txt")
endfunction

//library SaveNLoad ends
//library LoPone:
function LoP_onDeath takes unit whichUnit returns nothing
    if ( GetUnitPointValue(whichUnit) == 37 ) then
    
        call FlushChildHashtable((ArrayAgent_hashTable), ((- GetHandleId((whichUnit))))) // INLINED!!
        //call RemoveUnit( whichUnit )
        
    else
        if not (GetUnitAbilityLevel((whichUnit), 'A0C6') > 0) then // INLINED!!
        // DECO BUILDER DECREASE COUNT
            if IsUnitDecoBuilder(whichUnit) then
                call RemoveUnit(whichUnit)
            else
                if ( ((GetOwningPlayer(whichUnit)) != Player(PLAYER_NEUTRAL_PASSIVE)) and (not IsUnitType((whichUnit), UNIT_TYPE_STRUCTURE)) ) then // INLINED!!
                    call Limit_UnregisterUnitEx((whichUnit) , null) // INLINED!!
                endif
            endif
        else
            call DestroyGUDR(whichUnit)
            call GUMSClearUnitData(whichUnit)
            
            // Performance: Instantly remove decorations from the game
            set g_unitHasBeenRemoved=true
            call RemoveUnit(whichUnit)
        endif
    endif
endfunction

//library LoPone ends
//library SaveUnit:


function IsUnitWaygate takes unit whichUnit returns boolean
    return GetUnitAbilityLevel(whichUnit, 'Awrp') > 0
endfunction

function Save_PreloadPatrolPoint takes real x,real y returns nothing
    call Preload("=p " + R2S(x) + "=" + R2S(y))
endfunction

function Save_SaveUnitPatrolPoints takes integer unitHandleId returns nothing
    local integer i= 1
    local integer totalPoints= (LoadInteger(MultiPatrol___data, - (unitHandleId), (9997))) // INLINED!!
    
    loop
    exitwhen i > totalPoints
        call Preload("=p " + R2S((((LoadReal(MultiPatrol___data, (unitHandleId ), ( i))) )*1.0)) + "=" + R2S((( (LoadReal(MultiPatrol___data, (unitHandleId ), - ( i))))*1.0))) // INLINED!!
        set i=i + 1
    endloop
endfunction

function SaveForceLoop takes nothing returns boolean
    local integer playerId= GetPlayerId(GetFilterPlayer())
    local integer playerNumber= playerId + 1
    local unit saveUnit
    local integer saveUnitCount= 0
    local boolean isLocalPlayer= false
    local string saveString
    local integer unitHandleId
    
    if udg_save_load_boolean[playerNumber] == true then
        set stillSaving=true
        if ( GetLocalPlayer() == Player(playerNumber - 1) ) then
            set isLocalPlayer=true
            call PreloadGenStart()
            call PreloadGenClear()
        endif
        loop
        exitwhen saveUnitCount >= 25
            set saveUnit=FirstOfGroup(udg_save_grp[playerNumber])
            set unitHandleId=GetHandleId(saveUnit)
            call GroupRemoveUnit(udg_save_grp[playerNumber], saveUnit)

            //Check if Unit has been removed
            if GetUnitTypeId(saveUnit) != 0 then
                if isLocalPlayer then
                    call Preload(ID2S(( GetUnitTypeId(saveUnit) )) + "," + R2S(GetUnitX(saveUnit) - (udg_load_center[(playerId) + 1])) + "," + R2S(GetUnitY(saveUnit) - (udg_load_center[(playerId) + 1 + bj_MAX_PLAYERS])) + "," + R2S(GetUnitFlyHeight(saveUnit)) + "," + R2S(GetUnitFacing(saveUnit)) + "," + s__UnitVisuals_getScale(unitHandleId) + "," + (s__UnitVisuals_getVertexColor((unitHandleId),UnitVisualMods___RED)) + "," + (s__UnitVisuals_getVertexColor((unitHandleId),UnitVisualMods___GREEN)) + "," + (s__UnitVisuals_getVertexColor((unitHandleId),UnitVisualMods___BLUE)) + "," + (s__UnitVisuals_getVertexColor((unitHandleId),UnitVisualMods___ALPHA)) + "," + s__UnitVisuals_getColor(unitHandleId) + "," + s__UnitVisuals_getAnimSpeed(unitHandleId) + "," + s__UnitVisuals_getAnimTag(unitHandleId) + "," + I2S((LoadInteger(UnitVisualMods___hashTable, GetHandleId((saveUnit)), UnitVisualMods___SELECT)))) // INLINED!!
                    
                    
                    
                    if (HaveSavedString(UnitVisualMods___hashTable, (unitHandleId), UnitVisualMods___NAME)) then // INLINED!!
                        call Preload("=n " + GUMSGetUnitName(saveUnit))
                    endif
                    if (HaveSavedHandle(UserDefinedRects___hashTable, (unitHandleId), (0))) then // INLINED!!
                        call Preload(Save_GetGUDRSaveString(unitHandleId))
                    endif
                    if (GetUnitAbilityLevel((saveUnit), 'Awrp') > 0) then // INLINED!!
                        if WaygateIsActive(saveUnit) then
                            call Preload("=w " + R2S(WaygateGetDestinationX(saveUnit)) + "=" + R2S(WaygateGetDestinationY(saveUnit)) + "=T=")
                        else
                            call Preload("=w " + R2S(WaygateGetDestinationX(saveUnit)) + "=" + R2S(WaygateGetDestinationY(saveUnit)) + "=F=")
                        endif
                    endif
                    if ((LoadInteger(MultiPatrol___data, - ((unitHandleId)), (9996))) != 0) then // INLINED!!
                        call Save_SaveUnitPatrolPoints(unitHandleId)
                    endif
                endif
            else
                if isLocalPlayer then
                    call Preload("Removed Unit")
                endif
                call GroupRefresh(udg_save_grp[playerNumber])
            endif
            //End of Check
                
            //This block should be below the group refresh check in order to always produce correct results
            if IsGroupEmpty(udg_save_grp[playerNumber]) then
                set udg_save_load_boolean[playerNumber]=false
                call DisplayTextToPlayer(Player(playerNumber - 1), 0, 0, "Finished Saving")
                set saveUnitCount=99 //No need to check for more units, get off the loop
            endif
            //End of block that should be below
                
            set saveUnitCount=saveUnitCount + 1
        endloop //saveUnitCount should be set to zero at the start of this loop
        
        //This if statement must remain inside (if udg_save_load_boolean[playerNumber] == true) statement to avoid output for people who aren't saving
        if isLocalPlayer then
            call PreloadGenEnd("DataManager\\" + udg_save_password[playerNumber] + "\\" + I2S(udg_save_unit_nmbr[playerNumber]) + ".txt")
            call DisplayTextToPlayer(GetLocalPlayer(), 0, 0, ( I2S(udg_save_unit_nmbr[playerNumber]) ))
            set udg_save_unit_nmbr[playerNumber]=( udg_save_unit_nmbr[playerNumber] + 1 )
            if udg_save_load_boolean[playerNumber] == false then
                call SaveSize(udg_save_password[playerNumber] , udg_save_unit_nmbr[playerNumber])
            endif
        endif
    endif
    //End of if statement
    
    set saveUnit=null
    return false
endfunction

function SaveLoopActions takes nothing returns nothing

    set stillSaving=false
    call ForceEnumPlayers(ENUM_FORCE, Condition(function SaveForceLoop))
    
    if not stillSaving then
        call PauseTimer(GetExpiredTimer())
    endif

endfunction

function SaveLoopStartTimer takes nothing returns nothing
    
    if not stillSaving then
        call TimerStart(loopTimer, 0.5, true, function SaveLoopActions)
    endif
    
endfunction


//===========================================================================
function InitTrig_SaveLoop takes nothing returns nothing
    set loopTimer=CreateTimer()
    
    call TimerStart(loopTimer, 0.5, true, function SaveLoopActions)
endfunction

//library SaveUnit ends
//library LoPfour:

function DecoCount_SwitchedPlayers_impl takes unit whichUnit,player ownerOld,integer decoCount returns nothing
    local integer playerNumber= GetPlayerId(GetOwningPlayer(whichUnit)) + 1
    local integer playerNumberOld= GetPlayerId(ownerOld) + 1
    local integer unitType=  GetUnitTypeId(whichUnit)
    
    call SaveInteger(udg_Hashtable_2, playerNumberOld, unitType, decoCount - 1)
    call SaveInteger(udg_Hashtable_2, playerNumber, unitType, LoadInteger(udg_Hashtable_2, playerNumber, unitType) + 1)
endfunction

function DecoCount_SwitchedPlayers takes unit whichUnit,player oldOwner returns nothing
    local integer decoCount= LoadInteger(udg_Hashtable_2, GetPlayerId(oldOwner) + 1, GetUnitTypeId(whichUnit))
    
    if decoCount > 0 then
        call DecoCount_SwitchedPlayers_impl(whichUnit , oldOwner , decoCount)
    endif
endfunction

function LoP_onChangeOwner takes unit whichUnit,player ownerOld returns nothing
    local player owner= GetOwningPlayer(whichUnit)
    
    if not (GetUnitAbilityLevel((whichUnit), 'A0C6') > 0) then // INLINED!!
    
        if ( (not IsUnitType((whichUnit), UNIT_TYPE_STRUCTURE)) ) then // INLINED!!
        
            if ((ownerOld) != Player(PLAYER_NEUTRAL_PASSIVE)) then // INLINED!!
                call Limit_UnregisterUnitEx(whichUnit , ownerOld)
            endif
            
            if ((owner) != Player(PLAYER_NEUTRAL_PASSIVE)) then // INLINED!!
                call Limit_RegisterUnit(whichUnit)
            endif
        endif
        
        // DECO BUILDER DECREASE AND INCREASE COUNT
        call DecoCount_SwitchedPlayers(whichUnit , ownerOld)
    endif
    
    // If ownership was changed with -neut command, no need to change colors.
    if ( IsUnitInGroup(whichUnit, udg_System_NeutralUnits[GetPlayerId(ownerOld) + 1]) ) then
        if (s__UnitVisuals_getColor((GetHandleId(((whichUnit)))))) == "D" then // INLINED!!
            call SetUnitColor(whichUnit, (UnitVisualMods___I2PC[(udg_System_PlayerColor[GetPlayerId(GetOwningPlayer(whichUnit)) + 1])])) // INLINED!!
        else
            call GUMSSetUnitColor(whichUnit , S2I((s__UnitVisuals_getColor((GetHandleId(((whichUnit)))))))) // INLINED!!
        endif
    endif
endfunction


//library LoPfour ends
//library LoPtwo:
function LoP_onRemoval takes unit whichUnit returns nothing
    if (HaveSavedHandle((ArrayAgent_hashTable), ((- GetHandleId((whichUnit)))), 0)) then // INLINED!!
    
        //call DummyDmg_FlushKey(DummyDmg_GetKey(whichUnit))
        
    else

        set g_unitHasBeenRemoved=true
        // CLEAR KNOCKBACK DATA FOR SPELLS
        call FlushChildHashtable(udg_Hashtable_2, - GetUnitUserData(whichUnit))
        // CLEAR CUSTOM STAT HASHTABLE
        call FlushChildHashtable(udg_CSS_Hashtable, GetHandleId(whichUnit))
        // DECO BUILDER DECREASE COUNT
        call DecoBuilderReduceCount(whichUnit)

        
        call GUMSClearUnitData(whichUnit)
        call Patrol_ClearUnitIdData(GetHandleId((whichUnit))) // INLINED!!
        call GMSS_ClearData(whichUnit)
        
        if ((GetOwningPlayer(whichUnit)) != Player(PLAYER_NEUTRAL_PASSIVE)) and (not IsUnitType((whichUnit), UNIT_TYPE_STRUCTURE)) then // INLINED!!
            call Limit_UnregisterUnitEx((whichUnit) , null) // INLINED!!
        endif
    endif
endfunction

//library LoPtwo ends
//library LoPthree:

function LoP_RemoveUnit takes unit whichUnit returns nothing
    if not IsUnitInGroup(whichUnit, udg_System_ProtectedGroup) then
        if not (GetUnitAbilityLevel((whichUnit), 'A0C6') > 0) then // INLINED!!
            //call DisableTrigger(gg_trg_System_Cleanup_Removal)
            //call LoP_onRemoval(whichUnit)
            call RemoveUnit(whichUnit) // Removing unit does not fire event immediately.
            //call EnableTrigger(gg_trg_System_Cleanup_Removal)
        else
            call DisableTrigger(gg_trg_System_Cleanup_Death)
            call LoP_onDeath(whichUnit)
            call KillUnit(whichUnit)
            call EnableTrigger(gg_trg_System_Cleanup_Death)
        endif
    endif
endfunction

function LoP_KillUnit takes unit whichUnit returns nothing
     if not IsUnitInGroup(whichUnit, udg_System_ProtectedGroup) then
        call DisableTrigger(gg_trg_System_Cleanup_Death)
        call LoP_onDeath(whichUnit)
        call KillUnit(whichUnit)
        call EnableTrigger(gg_trg_System_Cleanup_Death)
    endif
endfunction

//library LoPthree ends
//===========================================================================
// 
// Titan Land: LoP 1.0.0a
// 
//   Warcraft III map script
//   Generated by the Warcraft III World Editor
//   Date: Sat Apr  6 11:55:02 2019
//   Map Author: Guhun
// 
//===========================================================================

//***************************************************************************
//*
//*  Global Variables
//*
//***************************************************************************


function InitGlobals takes nothing returns nothing
    local integer i= 0
    set udg_ALL_PLAYERS_FORCE=CreateForce()
    set udg_ItemAbilityForInteger=0
    set udg_LegendaryScrollSpellGroup=CreateGroup()
    set udg_LegendaryScrollSpellInteger=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_RealNames[i]=""
        set i=i + 1
    endloop

    set udg_PathWayForInteger=0
    set udg_temp_integer=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_save_password[i]=""
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_save_grp[i]=CreateGroup()
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_save_unit_nmbr[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_save_load_boolean[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_load_number[i]=0
        set i=i + 1
    endloop

    set udg_temp_group=CreateGroup()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_load_center[i]=0
        set i=i + 1
    endloop

    set udg_load_limit=0
    set udg_GAME_MASTER=Player(0)
    set i=0
    loop
        exitwhen ( i > 12 )
        set udg_FORCES_PLAYER[i]=CreateForce()
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_DecoSystem_Value[i]=1
        set i=i + 1
    endloop

    set udg_temp_integer2=0
    set i=0
    loop
        exitwhen ( i > 13 )
        set udg_TreeSystem_Space[i]=128.00
        set i=i + 1
    endloop

    set udg_temp_real=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_ColorSystem_Red[i]=100.00
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_ColorSystem_Green[i]=100.00
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_ColorSystem_Blue[i]=100.00
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_ColorSystem_Alpha[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_DecoSystem_Scale[i]=100.00
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_DecoSystem_Facing[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_DecoSystem_Height[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_DecoSystem_animSpeed[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_DecoSystem_Anims[i]=""
        set i=i + 1
    endloop

    set udg_PowerSystem_Player=Player(0)
    set udg_PowerSystem_allFlag=false
    set udg_GDS_cSTUN=0
    set udg_GDS_cSILENCE=0
    set udg_GDS_cDISARM_R=0
    set udg_GDS_cDISARM_M=0
    set udg_GDS_cDISARM_B=0
    set udg_GDS_cSNARE=0
    set udg_GDS_cSUPERSILENCE=0
    set udg_GDS_cSLEEP=0
    set udg_GDS_cENTANGLE=0
    set udg_GDS_cETHEREAL=0
    set udg_GDS_zMIN=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_GDS_ORDERS[i]=""
        set i=i + 1
    endloop

    set udg_GDS_Duration=0
    set udg_GDS_Remaining=0
    set udg_GDS_Type=0
    set udg_GDS_DurMul=1.00
    set udg_GDS_DurAdd=0
    set udg_udg_GDS_DurMin=0
    set udg_GDS_DurMin=0
    set udg_Spell__Interval=0
    set udg_Spell__Filter_AllowEnemy=false
    set udg_Spell__Filter_AllowLiving=false
    set udg_Spell__Filter_AllowHero=false
    set udg_Spell__Filter_AllowNonHero=false
    set udg_Spell__Filter_AllowAlly=false
    set udg_Spell__Filter_AllowDead=false
    set udg_Spell__Filter_AllowFlying=false
    set udg_Spell__Filter_AllowMechanical=false
    set udg_Spell__Filter_AllowStructure=false
    set udg_Spell__Filter_AllowMagicImmune=false
    set udg_Spell__WakeTargets=false
    set udg_Spell__LevelMultiplier=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Level[i]=0
        set i=i + 1
    endloop

    set udg_Spell__Level=0
    set udg_Spell__Time=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Time[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_TargetY[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_TargetX[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_TargetGroup[i]=CreateGroup()
        set i=i + 1
    endloop

    set udg_Spell__TargetGroup=CreateGroup()
    set udg_Spell__Running=false
    set udg_Spell__UseTargetGroup=false
    set udg_Spell__Completed=false
    set udg_Spell_i_Timer=CreateTimer()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_UseTG[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Completed[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_EventType[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Linked[i]=false
        set i=i + 1
    endloop

    set udg_Spell__Index=0
    set udg_Spell_i_Recycle=0
    set udg_Spell_i_Instances=0
    set udg_Spell_i_StackN=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_StackRef[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Stack[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_RecycleList[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Head[i]=0
        set i=i + 1
    endloop

    set udg_Spell__InRangeGroup=CreateGroup()
    set udg_Spell__InRange=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowAlly[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowDead[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowEnemy[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowFlying[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowHero[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowMagicImmune[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowMechanical[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowNonHero[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowStructure[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowLiving[i]=false
        set i=i + 1
    endloop

    set udg_Spell__Channeling=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Channeling[i]=false
        set i=i + 1
    endloop

    set udg_Spell_i_GroupN=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_GroupStack[i]=CreateGroup()
        set i=i + 1
    endloop

    set udg_Spell__InRangeCount=0
    set udg_Spell__Duration=0
    set udg_Spell__DurationPerLevel=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Duration[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_LastTime[i]=0
        set i=i + 1
    endloop

    set udg_Spell__Expired=false
    set udg_Spell__StartDuration=false
    set udg_Spell__InRangeMax=0
    set udg_WorldMaxX=0
    set udg_WorldMaxY=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_CargoTransportGroup[i]=CreateGroup()
        set i=i + 1
    endloop

    set udg_UDexMax=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_CheckDeathList[i]=0
        set i=i + 1
    endloop

    set udg_UDexLastRecycled=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_UDexPrev[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_UDexNext[i]=0
        set i=i + 1
    endloop

    set udg_UDex=0
    set udg_CheckDeathTimer=CreateTimer()
    set udg_UnitIndexEvent=0
    set udg_CargoEvent=0
    set udg_DeathEvent=0
    set udg_UnitTypeEvent=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitAlive[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitBeingUnloaded[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitNew[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitReincarnating[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitRemoved[i]=false
        set i=i + 1
    endloop

    set udg_UnitIndexerEnabled=false
    set udg_DamageTypeExplosive=0
    set udg_DamageTypeCriticalStrike=0
    set udg_DamageTypeHeal=0
    set udg_DamageTypeReduced=0
    set udg_DamageTypeBlocked=0
    set udg_DAMAGE_FACTOR_BRACERS=0
    set udg_DAMAGE_FACTOR_ELUNES=0
    set udg_DAMAGE_FACTOR_ETHEREAL=0
    set udg_AfterDamageEvent=0
    set udg_DamageEvent=0
    set udg_DamageModifierEvent=0
    set udg_DamageEventAmount=0
    set udg_DamageEventPrevAmt=0
    set udg_DamageEventOverride=false
    set udg_NextDamageOverride=false
    set udg_DamageEventType=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_LastDmgPrevType[i]=0
        set i=i + 1
    endloop

    set udg_NextDamageType=0
    set udg_DamageEventsWasted=0
    set udg_DmgEvRecursionN=0
    set udg_DmgEvRunning=false
    set udg_DmgEvStarted=false
    set udg_IsDamageSpell=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_LastDmgWasSpell[i]=false
        set i=i + 1
    endloop

    set udg_LastDamageHP=0
    set udg_DmgEvTimer=CreateTimer()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_LastDmgPrevAmount[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_LastDmgValue[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_HideDamageFrom[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_UnitDamageRegistered[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_System_PlayerArmy[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_System_PArmyLimit[i]=0
        set i=i + 1
    endloop

    set udg_Commands_Integer=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_System_LimitUnitCategory[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_System_DecoGrid[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_DecoSystem_PlayerColor[i]=0
        set i=i + 1
    endloop

    set udg_save_localPlayerBool=false
    set udg_System_searchStr=""
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_save_XYminmaxcur[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_System_NeutralUnits[i]=CreateGroup()
        set i=i + 1
    endloop

    set udg_Damage_Mod_Multiplier=0
    set udg_Damage_Mod_Add=0
    set udg_Damage_Mod_Minimum=0
    set udg_Damage_Mod_Maximum=0
    set udg_GDS_DebuffEvent=0
    set udg_GDS_Permanent=false
    set udg_GDS_RegisterDisable=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_ControlGroup[i]=CreateGroup()
        set i=i + 1
    endloop

    set udg_System_ProtectedGroup=CreateGroup()
    set udg_System_DecoTotal=0
    set udg_Damage_Mod_Reset=true
    set udg_Damage_Mod_AllowReflect=true
    set udg_CSS_GemBonusBoolean=false
    set udg_CSS_GemLevel=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_CSS_Power[i]=0
        set i=i + 1
    endloop

    set udg_CSS_PreloadBoolean=true
    set udg_CSS_SocketingEnabled=false
    set udg_EVENT_SOCKET_FINISH=0
    set udg_CSS_Counter=0
    set udg_CSS_CustomSwitch=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_CSS_String[i]=""
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_GCOS_InstanceArray[i]=0
        set i=i + 1
    endloop

    set udg_GCOS_Instance=0
    set udg_DamageTypeSpell=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_TimerBonuses[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_TileSystem_Var[i]=0
        set i=i + 1
    endloop

    set udg_K2DTimeout=0
    set udg_Knockback2DRobustPathing=0
    set udg_Knockback2DDefaultFriction=0
    set udg_Knockback2DFriction=0
    set udg_Knockback2DDefaultBounce=false
    set udg_Knockback2DBounces=false
    set udg_Knockback2DDefaultPause=false
    set udg_Knockback2DPause=false
    set udg_Knockback2DDefaultKillTrees=false
    set udg_Knockback2DKillTrees=false
    set udg_Knockback2DDefaultDestRadius=0
    set udg_Knockback2DDestRadius=0
    set udg_Knockback2DTreeOrDebris=""
    set udg_Knockback2DDefaultGravity=0
    set udg_Knockback2DGravity=0
    set udg_Knockback2DDefaultFX=""
    set udg_Knockback2DLoopFX=""
    set udg_Knockback2DDefaultFXRate=0
    set udg_Knockback2DFXRate=0
    set udg_K2DX=0
    set udg_K2DY=0
    set udg_Radians_Turn=0
    set udg_Radians_QuarterTurn=0
    set udg_Radians_QuarterPi=0
    set udg_K2DMaxX=0
    set udg_K2DMaxY=0
    set udg_K2DMinX=0
    set udg_K2DMinY=0
    set udg_K2DMaxDestRadius=0
    set udg_K2DItemsFound=false
    set udg_K2DItemOffset=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitBeingKnockedBack[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DPrev[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DNext[i]=0
        set i=i + 1
    endloop

    set udg_K2DTimer=CreateTimer()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DHeight[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DFreeze[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DOverride[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DAngle[i]=0
        set i=i + 1
    endloop

    set udg_Knockback2DAngle=0
    set udg_Knockback2DDistance=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DDistanceLeft[i]=0
        set i=i + 1
    endloop

    set udg_Knockback2DTime=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DTimeLeft[i]=0
        set i=i + 1
    endloop

    set udg_Knockback2DOverride=false
    set udg_Knockback2DHeight=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DHeightThreshold[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DLastX[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DLastY[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DCos[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DSin[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DFlying[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DRadius[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DCosH[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DSinH[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DCosD1[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DSinD1[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DCosD2[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DSinD2[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DFriction[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DVelocity[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DKillTrees[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DDestRadius[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DAmphibious[i]=false
        set i=i + 1
    endloop

    set udg_Knockback2DAmphibious=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DBounce[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DCollision[i]=0
        set i=i + 1
    endloop

    set udg_Knockback2DCollision=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DFXModel[i]=""
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DFXRate[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DFXTimeLeft[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DPause[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DSimple[i]=false
        set i=i + 1
    endloop

    set udg_Knockback2DSimple=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DUnbiasedCollision[i]=false
        set i=i + 1
    endloop

    set udg_Knockback2DUnbiasedCollision=false
    set udg_LoopInt=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Tauren_WarStomp[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Tauren_Shockwave[i]=false
        set i=i + 1
    endloop

    set udg_LeaklessGroup=CreateGroup()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_System_AutonameBoolean[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Abilities_AoRest_DmgDone[i]=0
        set i=i + 1
    endloop

    set udg_Abilities_AoRest_UnitGroup=CreateGroup()
    set udg_PreventSave_Dialog=DialogCreate()
    set udg_PreventSave_Timer=CreateTimer()
    set udg_Commands_Counter=0
    set udg_Commands_Counter_Max=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitPreplaced[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitTransforming[i]=false
        set i=i + 1
    endloop

    set udg_DamageEventAOE=0
    set udg_DamageEventLevel=0
    set udg_DamageEventAOEGroup=CreateGroup()
    set udg_AOEDamageEvent=0
    set udg_Spell__AutoAddTargets=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AutoAddTargets[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_System_PlayerColor[i]=0
        set i=i + 1
    endloop

endfunction

//***************************************************************************
//*
//*  Sounds
//*
//***************************************************************************

function InitSounds takes nothing returns nothing
    set gg_snd_StopTimeTicTac=CreateSound("Sound\\Interface\\BattleNetTick.wav", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundParamsFromLabel(gg_snd_StopTimeTicTac, "ChatroomTimerTick")
    call SetSoundDuration(gg_snd_StopTimeTicTac, 476)
    set gg_snd_RiflemanAttack1=CreateSound("Units\\Human\\Rifleman\\RiflemanAttack1.wav", false, true, true, 10, 10, "MissilesEAX")
    call SetSoundParamsFromLabel(gg_snd_RiflemanAttack1, "RiflemanAttack1")
    call SetSoundDuration(gg_snd_RiflemanAttack1, 702)
endfunction

//***************************************************************************
//*
//*  Destructable Objects
//*
//***************************************************************************

function CreateAllDestructables takes nothing returns nothing
    local destructable d
    local trigger t
    local real life
    set gg_dest_ATg1_0003=CreateDestructable('ATg1', - 26752.0, 26240.0, 270.000, 0.900, 0)
    set gg_dest_ATg3_0004=CreateDestructable('ATg3', - 26112.0, 26880.0, 0.000, 0.900, 0)
    set gg_dest_DTg5_0007=CreateDestructable('DTg5', - 25472.0, 27136.0, 270.000, 0.900, 0)
    set gg_dest_DTg5_0008=CreateDestructable('DTg5', - 25472.0, 26624.0, 270.000, 0.900, 0)
    set gg_dest_LTe3_0005=CreateDestructable('LTe3', - 24064.0, 26880.0, 0.000, 0.900, 0)
endfunction

//***************************************************************************
//*
//*  Unit Creation
//*
//***************************************************************************

//===========================================================================
function CreateBuildingsForPlayer0 takes nothing returns nothing
    local player p= Player(0)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'nct2', - 27424.0, 24544.0, 270.000)
    set u=CreateUnit(p, 'nfr2', - 25472.0, 24576.0, 270.000)
    set u=CreateUnit(p, 'nwgt', - 22784.0, 22912.0, 270.000)
    call WaygateSetDestination(u, GetRectCenterX(gg_rct_WaygateRed), GetRectCenterY(gg_rct_WaygateRed))
    call WaygateActivate(u, true)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'nct1', - 27616.0, 24608.0, 270.000)
    set u=CreateUnit(p, 'nth1', - 24544.0, 27360.0, 270.000)
    set u=CreateUnit(p, 'nfr1', - 24448.0, 25920.0, 270.000)
    set u=CreateUnit(p, 'nth0', - 28160.0, 24576.0, 270.000)
    set u=CreateUnit(p, 'ngt2', - 27232.0, 24608.0, 270.000)
    set u=CreateUnit(p, 'nfh1', - 24480.0, 27680.0, 270.000)
    set u=CreateUnit(p, 'ndh0', - 24448.0, 25664.0, 270.000)
    set u=CreateUnit(p, 'nmh0', - 24672.0, 24608.0, 270.000)
    set u=CreateUnit(p, 'nmh1', - 27808.0, 24544.0, 270.000)
    set u=CreateUnit(p, 'nnzg', - 24544.0, 26144.0, 270.000)
    set u=CreateUnit(p, 'ndch', - 26048.0, 24576.0, 270.000)
    set u=CreateUnit(p, 'nhns', - 24448.0, 27968.0, 270.000)
    set u=CreateUnit(p, 'ndh1', - 24960.0, 24576.0, 270.000)
    set u=CreateUnit(p, 'ngnh', - 24480.0, 26592.0, 270.000)
    set u=CreateUnit(p, 'ncnt', - 24480.0, 26336.0, 270.000)
    set u=CreateUnit(p, 'nfh0', - 25216.0, 24576.0, 270.000)
    set u=CreateUnit(p, 'nwgt', - 23552.0, 22912.0, 270.000)
    call WaygateSetDestination(u, GetRectCenterX(gg_rct_WaygateBlue), GetRectCenterY(gg_rct_WaygateBlue))
    call WaygateActivate(u, true)
    call SetUnitColor(u, ConvertPlayerColor(1))
endfunction

//===========================================================================
function CreateUnitsForPlayer0 takes nothing returns nothing
    local player p= Player(0)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'ngnw', - 23106.7, 26998.5, 265.330)
    set u=CreateUnit(p, 'h04K', - 22679.9, 26620.4, 276.611)
    set u=CreateUnit(p, 'h04I', - 22832.2, 26608.1, 184.345)
    set u=CreateUnit(p, 'ngns', - 23376.6, 26887.8, 279.039)
    set u=CreateUnit(p, 'ngna', - 23269.8, 26930.3, 295.131)
    set u=CreateUnit(p, 'ngnb', - 23215.6, 26720.9, 263.813)
    set u=CreateUnit(p, 'ngnv', - 23082.5, 26753.6, 270.943)
    set u=CreateUnit(p, 'ngno', - 23293.7, 26724.7, 268.734)
    set gg_unit_H00V_0359=CreateUnit(p, 'H00V', - 26815.8, 26960.7, 301.444)
    call SetUnitColor(gg_unit_H00V_0359, ConvertPlayerColor(3))
    set gg_unit_e00B_0405=CreateUnit(p, 'e00B', - 27924.4, 28020.3, 182.390)
    call SetUnitColor(gg_unit_e00B_0405, ConvertPlayerColor(3))
    set gg_unit_e008_0406=CreateUnit(p, 'e008', - 27614.2, 28022.1, 288.477)
    call SetUnitColor(gg_unit_e008_0406, ConvertPlayerColor(2))
    set gg_unit_e009_0407=CreateUnit(p, 'e009', - 27777.5, 28016.9, 238.202)
    set gg_unit_e00C_0408=CreateUnit(p, 'e00C', - 27782.4, 27745.5, 211.933)
    set gg_unit_e00D_0409=CreateUnit(p, 'e00D', - 27782.1, 27878.2, 139.399)
    set gg_unit_e007_0410=CreateUnit(p, 'e007', - 27622.4, 27760.2, 219.481)
    call SetUnitColor(gg_unit_e007_0410, ConvertPlayerColor(2))
    set gg_unit_e00A_0411=CreateUnit(p, 'e00A', - 27934.5, 27746.3, 54.703)
    call SetUnitColor(gg_unit_e00A_0411, ConvertPlayerColor(7))
    set u=CreateUnit(p, 'u00I', - 27373.8, 25385.8, 52.846)
endfunction

//===========================================================================
function CreateBuildingsForPlayer1 takes nothing returns nothing
    local player p= Player(1)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 24000.0, 24064.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer2 takes nothing returns nothing
    local player p= Player(2)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 24384.0, 24064.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer3 takes nothing returns nothing
    local player p= Player(3)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 24768.0, 24064.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer4 takes nothing returns nothing
    local player p= Player(4)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 25152.0, 24064.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer5 takes nothing returns nothing
    local player p= Player(5)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 25536.0, 24064.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer6 takes nothing returns nothing
    local player p= Player(6)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 25920.0, 24064.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer7 takes nothing returns nothing
    local player p= Player(7)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 26304.0, 24064.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer8 takes nothing returns nothing
    local player p= Player(8)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 26688.0, 24064.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer9 takes nothing returns nothing
    local player p= Player(9)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 27072.0, 24064.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer10 takes nothing returns nothing
    local player p= Player(10)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 27456.0, 24064.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer11 takes nothing returns nothing
    local player p= Player(11)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 27840.0, 24064.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer12 takes nothing returns nothing
    local player p= Player(12)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 24000.0, 22848.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer13 takes nothing returns nothing
    local player p= Player(13)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 24384.0, 22848.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer14 takes nothing returns nothing
    local player p= Player(14)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 24768.0, 22848.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer15 takes nothing returns nothing
    local player p= Player(15)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 25152.0, 22848.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer16 takes nothing returns nothing
    local player p= Player(16)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 25536.0, 22848.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer17 takes nothing returns nothing
    local player p= Player(17)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 25920.0, 22848.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer18 takes nothing returns nothing
    local player p= Player(18)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 26304.0, 22848.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer19 takes nothing returns nothing
    local player p= Player(19)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 26688.0, 22848.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer20 takes nothing returns nothing
    local player p= Player(20)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 27072.0, 22848.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer21 takes nothing returns nothing
    local player p= Player(21)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 27456.0, 22848.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer22 takes nothing returns nothing
    local player p= Player(22)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 27840.0, 22848.0, 270.000)
endfunction

//===========================================================================
function CreateBuildingsForPlayer23 takes nothing returns nothing
    local player p= Player(23)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n000', - 28288.0, 23488.0, 270.000)
endfunction

//===========================================================================
function CreateNeutralPassiveBuildings takes nothing returns nothing
    local player p= Player(PLAYER_NEUTRAL_PASSIVE)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'n02W', - 27968.0, 25536.0, 270.000)
    set u=CreateUnit(p, 'n02Z', - 23360.0, 25024.0, 270.000)
    set u=CreateUnit(p, 'n02V', - 27968.0, 25216.0, 270.000)
    set u=CreateUnit(p, 'n02X', - 27968.0, 24896.0, 270.000)
    set u=CreateUnit(p, 'n02J', - 22720.0, 25088.0, 270.000)
    set u=CreateUnit(p, 'u00K', - 768.0, - 13888.0, 270.000)
    set u=CreateUnit(p, 'nshp', 8576.0, 6528.0, 270.000)
    set u=CreateUnit(p, 'nshp', - 3328.0, 5376.0, 270.000)
    set u=CreateUnit(p, 'nshp', - 3712.0, - 1664.0, 270.000)
    set u=CreateUnit(p, 'nshp', 4096.0, - 256.0, 270.000)
    set u=CreateUnit(p, 'n03A', - 22720.0, 24576.0, 270.000)
    set u=CreateUnit(p, 'n02R', - 23424.0, 24704.0, 270.000)
    set u=CreateUnit(p, 'n015', - 23360.0, 25280.0, 270.000)
    set u=CreateUnit(p, 'n00R', - 23360.0, 25152.0, 270.000)
    set u=CreateUnit(p, 'n02P', - 23488.0, 26048.0, 270.000)
    set u=CreateUnit(p, 'n00S', - 23680.0, 25344.0, 270.000)
    set u=CreateUnit(p, 'n00X', - 23616.0, 26048.0, 270.000)
    set u=CreateUnit(p, 'n00O', - 24000.0, 25792.0, 270.000)
    set u=CreateUnit(p, 'n014', - 23104.0, 26048.0, 270.000)
    set u=CreateUnit(p, 'ndrk', - 23808.0, 27520.0, 270.000)
    set u=CreateUnit(p, 'n03D', - 23296.0, 24768.0, 270.000)
    set u=CreateUnit(p, 'ngme', - 24320.0, 24384.0, 270.000)
    set u=CreateUnit(p, 'n02I', - 22976.0, 26048.0, 270.000)
    set u=CreateUnit(p, 'n02U', - 22848.0, 26048.0, 270.000)
    set u=CreateUnit(p, 'n00P', - 24000.0, 25408.0, 270.000)
    set u=CreateUnit(p, 'n02C', - 23936.0, 25984.0, 270.000)
    set u=CreateUnit(p, 'n02L', - 23488.0, 25280.0, 270.000)
    set u=CreateUnit(p, 'n00D', - 23872.0, 25344.0, 270.000)
    set u=CreateUnit(p, 'n00W', - 23232.0, 26048.0, 270.000)
    set u=CreateUnit(p, 'n02K', - 22720.0, 25472.0, 270.000)
    set u=CreateUnit(p, 'n006', - 22720.0, 25728.0, 270.000)
    set u=CreateUnit(p, 'n010', - 22720.0, 25984.0, 270.000)
    set u=CreateUnit(p, 'n005', - 23744.0, 26048.0, 270.000)
    set u=CreateUnit(p, 'n00H', - 23360.0, 26048.0, 270.000)
    set u=CreateUnit(p, 'ndrg', - 22784.0, 28032.0, 270.000)
    set u=CreateUnit(p, 'n00C', - 22720.0, 24960.0, 270.000)
    set u=CreateUnit(p, 'n00E', - 22720.0, 25856.0, 270.000)
    set u=CreateUnit(p, 'ndru', - 23296.0, 27520.0, 270.000)
    set u=CreateUnit(p, 'ndrz', - 22784.0, 27520.0, 270.000)
    set u=CreateUnit(p, 'ndro', - 23808.0, 28032.0, 270.000)
    set u=CreateUnit(p, 'ndrr', - 23296.0, 28032.0, 270.000)
    set u=CreateUnit(p, 'n00N', - 22720.0, 25344.0, 270.000)
    set u=CreateUnit(p, 'n00Q', - 24000.0, 25600.0, 270.000)
    set u=CreateUnit(p, 'n00G', - 22720.0, 24832.0, 270.000)
    set u=CreateUnit(p, 'n030', - 22720.0, 25600.0, 270.000)
    set u=CreateUnit(p, 'n033', - 23360.0, 24896.0, 270.000)
    set u=CreateUnit(p, 'n034', - 22720.0, 25216.0, 270.000)
    set u=CreateUnit(p, 'n038', - 22720.0, 24704.0, 270.000)
    set u=CreateUnit(p, 'n02Q', - 23296.0, 24192.0, 270.000)
    set u=CreateUnit(p, 'n03K', - 23680.0, 24192.0, 270.000)
    set u=CreateUnit(p, 'nmgv', - 27968.0, 25856.0, 270.000)
    set u=CreateUnit(p, 'ntav', - 23296.0, 23808.0, 270.000)
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=CreateUnit(p, 'u00K', - 768.0, - 13568.0, 270.000)
    set u=CreateUnit(p, 'u00K', - 640.0, - 13696.0, 270.000)
    set u=CreateUnit(p, 'u00K', - 768.0, - 13760.0, 270.000)
    set u=CreateUnit(p, 'u00K', - 768.0, - 14144.0, 270.000)
    set u=CreateUnit(p, 'u00K', - 768.0, - 14016.0, 270.000)
    set u=CreateUnit(p, 'u00K', - 704.0, - 14272.0, 270.000)
endfunction

//===========================================================================
function CreateNeutralPassive takes nothing returns nothing
    local player p= Player(PLAYER_NEUTRAL_PASSIVE)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=CreateUnit(p, 'nbot', - 3945.6, - 1662.5, 97.441)
    set u=CreateUnit(p, 'nbot', 8797.4, 6187.7, 247.584)
    set u=CreateUnit(p, 'nbot', 4105.3, - 803.5, 208.955)
    set u=CreateUnit(p, 'nbot', - 3240.9, 4887.3, 29.763)
    set u=CreateUnit(p, 'Ekgg', - 25163.5, 27943.6, 294.712)
    set u=CreateUnit(p, 'Hgam', - 25306.9, 27929.4, 273.447)
    set u=CreateUnit(p, 'H060', - 25446.9, 27952.7, 272.054)
    set u=CreateUnit(p, 'H00T', - 24936.2, 26472.6, 274.040)
    set u=CreateUnit(p, 'h0K8', - 19290.2, 27008.7, 320.382)
    set u=CreateUnit(p, 'h0K6', - 20239.0, 26842.0, 355.627)
    set u=CreateUnit(p, 'h0K6', - 20831.5, 26509.4, 98.902)
    set u=CreateUnit(p, 'h0K9', - 19605.7, 26537.6, 347.292)
    set u=CreateUnit(p, 'h0KA', - 19766.6, 27490.3, 66.623)
    set u=CreateUnit(p, 'h0K6', - 20202.2, 26208.5, 59.811)
    set u=CreateUnit(p, 'h0K6', - 20639.9, 27449.5, 88.750)
    set u=CreateUnit(p, 'h0K6', - 18585.2, 27185.6, 346.256)
    set u=CreateUnit(p, 'h0K6', - 18743.7, 27921.9, 211.702)
    set u=CreateUnit(p, 'h0K6', - 18094.8, 26898.0, 125.523)
    set u=CreateUnit(p, 'h0K6', - 20023.4, 28238.1, 260.681)
    set u=CreateUnit(p, 'h0KR', - 18581.9, 27188.0, 265.888)
    set u=CreateUnit(p, 'h0KR', - 20240.4, 26845.8, 280.127)
    set u=CreateUnit(p, 'h0KQ', - 19835.7, 27320.2, 345.542)
    set u=CreateUnit(p, 'h0KQ', - 19623.3, 27446.5, 335.829)
    set u=CreateUnit(p, 'h0KS', - 20586.0, 26549.8, 60.317)
    set u=CreateUnit(p, 'h0KS', - 20417.3, 27841.2, 352.551)
    set u=CreateUnit(p, 'h02H', - 18664.9, 27524.4, 353.913)
    set u=CreateUnit(p, 'h051', - 19614.2, 26549.8, 129.478)
    set u=CreateUnit(p, 'h051', - 19296.0, 26977.2, 295.948)
    set u=CreateUnit(p, 'h056', - 18104.0, 26875.2, 98.550)
    set u=CreateUnit(p, 'h056', - 18748.8, 27953.7, 317.295)
    set u=CreateUnit(p, 'h056', - 20599.0, 26581.5, 270.206)
    set u=CreateUnit(p, 'h0KK', - 8855.8, 23264.7, 287.246)
    set u=CreateUnit(p, 'h0KK', - 5688.8, 26716.4, 289.356)
    set u=CreateUnit(p, 'h0KM', - 7551.5, 23346.5, 328.655)
    set gg_unit_H00S_0141=CreateUnit(p, 'H00S', - 26963.1, 27112.3, 308.790)
    call SetUnitColor(gg_unit_H00S_0141, ConvertPlayerColor(4))
    set u=CreateUnit(p, 'h0NZ', - 4887.4, 26321.8, 261.329)
    set u=CreateUnit(p, 'h0NZ', - 6469.3, 23255.4, 254.067)
    set u=CreateUnit(p, 'h0O1', - 8531.4, 22517.0, 198.046)
    set u=CreateUnit(p, 'h0OK', - 9428.0, 21791.4, 61.229)
    set u=CreateUnit(p, 'h0OK', - 5431.5, 22942.9, 145.826)
    set u=CreateUnit(p, 'h0OL', - 5679.3, 25569.4, 98.539)
    set u=CreateUnit(p, 'h0OB', - 5837.1, 25405.1, 186.795)
    set u=CreateUnit(p, 'h0OC', - 5652.0, 25412.9, 272.964)
    set u=CreateUnit(p, 'h0OE', - 5918.3, 25574.9, 302.507)
    set u=CreateUnit(p, 'h06R', - 5001.8, - 8971.9, 91.930)
    set u=CreateUnit(p, 'h03H', - 4955.2, - 9230.8, 119.722)
    set u=CreateUnit(p, 'h089', - 5090.6, - 9168.8, 67.656)
    set u=CreateUnit(p, 'h0BV', - 27275.5, 25677.9, 105.428)
    set u=CreateUnit(p, 'h0BW', - 27157.7, 25704.5, 239.169)
    set u=CreateUnit(p, 'h0BX', - 27425.3, 25697.5, 267.316)
    set u=CreateUnit(p, 'h0BY', - 27039.4, 25724.2, 182.774)
    set u=CreateUnit(p, 'h0BD', - 27167.7, 25255.6, 0.000)
    set u=CreateUnit(p, 'h0BB', - 27170.5, 25441.5, 270.000)
    set u=CreateUnit(p, 'h0BA', - 27383.1, 25448.4, 270.000)
    set u=CreateUnit(p, 'h0BC', - 27402.0, 25247.8, 90.000)
endfunction

//===========================================================================
function CreatePlayerBuildings takes nothing returns nothing
    call CreateBuildingsForPlayer0()
    call CreateBuildingsForPlayer1()
    call CreateBuildingsForPlayer2()
    call CreateBuildingsForPlayer3()
    call CreateBuildingsForPlayer4()
    call CreateBuildingsForPlayer5()
    call CreateBuildingsForPlayer6()
    call CreateBuildingsForPlayer7()
    call CreateBuildingsForPlayer8()
    call CreateBuildingsForPlayer9()
    call CreateBuildingsForPlayer10()
    call CreateBuildingsForPlayer11()
    call CreateBuildingsForPlayer12()
    call CreateBuildingsForPlayer13()
    call CreateBuildingsForPlayer14()
    call CreateBuildingsForPlayer15()
    call CreateBuildingsForPlayer16()
    call CreateBuildingsForPlayer17()
    call CreateBuildingsForPlayer18()
    call CreateBuildingsForPlayer19()
    call CreateBuildingsForPlayer20()
    call CreateBuildingsForPlayer21()
    call CreateBuildingsForPlayer22()
    call CreateBuildingsForPlayer23()
endfunction

//===========================================================================
function CreatePlayerUnits takes nothing returns nothing
    call CreateUnitsForPlayer0()
endfunction

//===========================================================================
function CreateAllUnits takes nothing returns nothing
    call CreateNeutralPassiveBuildings()
    call CreatePlayerBuildings()
    call CreateNeutralPassive()
    call CreateUnitsForPlayer0() // INLINED!!
endfunction

//***************************************************************************
//*
//*  Regions
//*
//***************************************************************************

function CreateRegions takes nothing returns nothing
    local weathereffect we

    set gg_rct_GiveTo_Blue=Rect(- 24096.0, 23968.0, - 23904.0, 24160.0)
    set gg_rct_GiveTo_Teal=Rect(- 24480.0, 23968.0, - 24288.0, 24160.0)
    set gg_rct_GiveTo_Brown=Rect(- 27936.0, 23968.0, - 27744.0, 24160.0)
    set gg_rct_GiveTo_Purple=Rect(- 24864.0, 23968.0, - 24672.0, 24160.0)
    set gg_rct_GiveTo_Yellow=Rect(- 25248.0, 23968.0, - 25056.0, 24160.0)
    set gg_rct_GiveTo_Orange=Rect(- 25632.0, 23968.0, - 25440.0, 24160.0)
    set gg_rct_GiveTo_Green=Rect(- 26016.0, 23968.0, - 25824.0, 24160.0)
    set gg_rct_GiveTo_Pink=Rect(- 26400.0, 23968.0, - 26208.0, 24160.0)
    set gg_rct_GiveTo_Gray=Rect(- 26784.0, 23968.0, - 26592.0, 24160.0)
    set gg_rct_GiveTo_Light_Blue=Rect(- 27168.0, 23968.0, - 26976.0, 24160.0)
    set gg_rct_GiveTo_Dark_Green=Rect(- 27552.0, 23968.0, - 27360.0, 24160.0)
    set gg_rct_WarpIn=Rect(- 23296.0, 22912.0, - 23168.0, 23040.0)
    set gg_rct_DoorTreasureA=Rect(- 25728.0, 26944.0, - 25216.0, 27328.0)
    set gg_rct_DoorTreasureB=Rect(- 25728.0, 26432.0, - 25216.0, 26816.0)
    set gg_rct_DoorTitanB=Rect(- 27008.0, 26048.0, - 26496.0, 26432.0)
    set gg_rct_DoorTitanA=Rect(- 26304.0, 26624.0, - 25920.0, 27136.0)
    set gg_rct_DoorIceTitan=Rect(- 24256.0, 26624.0, - 23872.0, 27136.0)
    set gg_rct_ThiefRecallA=Rect(- 26112.0, 27136.0, - 24832.0, 28288.0)
    set gg_rct_ThiefRecallB=Rect(- 26112.0, 25600.0, - 25216.0, 26624.0)
    set gg_rct_WaygateRed=Rect(7328.0, - 2784.0, 7840.0, - 2272.0)
    set gg_rct_WaygateBlue=Rect(- 8416.0, - 7328.0, - 7904.0, - 6816.0)
    set gg_rct_Archaeologist=Rect(3808.0, - 8800.0, 4032.0, - 8608.0)
    set gg_rct_Water_Dragon=Rect(3520.0, - 8256.0, 3776.0, - 8000.0)
    set gg_rct_AltarofDeath=Rect(12736.0, - 8064.0, 12992.0, - 7904.0)
    set gg_rct_SolarisSpawn=Rect(- 10496.0, - 4480.0, - 10240.0, - 4224.0)
    set gg_rct_Titan_Palace=Rect(- 29152.0, 22240.0, - 22368.0, 28384.0)
    set gg_rct_Region_019=Rect(- 1024.0, - 14336.0, - 736.0, - 13184.0)
    set gg_rct_Titan_Palace_Inner=Rect(- 29152.0, 24800.0, - 24672.0, 28320.0)
    set gg_rct_Titan_Palace_Inner_Entrance=Rect(- 24160.0, 24832.0, - 24032.0, 25088.0)
    set gg_rct_Patrol_System_Range=Rect(- 5728.0, 1920.0, - 5696.0, 1952.0)
    set gg_rct_Deco_Tents_Rect=Rect(- 22848.0, 22976.0, - 22656.0, 24352.0)
    set gg_rct_GiveTo_Maroon=Rect(- 24096.0, 22752.0, - 23904.0, 22944.0)
    set gg_rct_GiveTo_Navy=Rect(- 24480.0, 22752.0, - 24288.0, 22944.0)
    set gg_rct_GiveTo_Emerald=Rect(- 27936.0, 22752.0, - 27744.0, 22944.0)
    set gg_rct_GiveTo_Turquoise=Rect(- 24864.0, 22752.0, - 24672.0, 22944.0)
    set gg_rct_GiveTo_Violet=Rect(- 25248.0, 22752.0, - 25056.0, 22944.0)
    set gg_rct_GiveTo_Peach=Rect(- 26016.0, 22752.0, - 25824.0, 22944.0)
    set gg_rct_GiveTo_Mint=Rect(- 26400.0, 22752.0, - 26208.0, 22944.0)
    set gg_rct_GiveTo_Lavender=Rect(- 26784.0, 22752.0, - 26592.0, 22944.0)
    set gg_rct_GiveTo_Coal=Rect(- 27168.0, 22752.0, - 26976.0, 22944.0)
    set gg_rct_GiveTo_Snow=Rect(- 27552.0, 22752.0, - 27360.0, 22944.0)
    set gg_rct_GiveTo_Wheat=Rect(- 25632.0, 22752.0, - 25440.0, 22944.0)
    set gg_rct_GiveTo_Peanut=Rect(- 28384.0, 23392.0, - 28192.0, 23584.0)
endfunction

//***************************************************************************
//*
//*  Cameras
//*
//***************************************************************************

function CreateCameras takes nothing returns nothing

    set gg_cam_Camera_001=CreateCameraSetup()
    call CameraSetupSetField(gg_cam_Camera_001, CAMERA_FIELD_ZOFFSET, 0.0, 0.0)
    call CameraSetupSetField(gg_cam_Camera_001, CAMERA_FIELD_ROTATION, 100.0, 0.0)
    call CameraSetupSetField(gg_cam_Camera_001, CAMERA_FIELD_ANGLE_OF_ATTACK, 1.7, 0.0)
    call CameraSetupSetField(gg_cam_Camera_001, CAMERA_FIELD_TARGET_DISTANCE, 1650.0, 0.0)
    call CameraSetupSetField(gg_cam_Camera_001, CAMERA_FIELD_ROLL, 0.0, 0.0)
    call CameraSetupSetField(gg_cam_Camera_001, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0)
    call CameraSetupSetField(gg_cam_Camera_001, CAMERA_FIELD_FARZ, 5000.0, 0.0)
    call CameraSetupSetDestPosition(gg_cam_Camera_001, - 27345.3, 28095.2, 0.0)

endfunction

//***************************************************************************
//*
//*  Custom Script Code
//*
//***************************************************************************
//                      DummyRecycler v1.25
//                          by Flux
//  
//  A system that recycles dummy units while considering their facing angle.
//  It can be used as attachment dummies for visual effects or as dummy caster.
//
//  Why is recycling a unit important?
//      Because creating a unit is is one of the slowest function in the game
//      and there are reports that will always leave a permanent tiny bit of 
//      memory (0.04 KB).
//      On average, retrieving a pending Dummy is approximately 4x faster compared
//      to creating a new one and recycling a Dummy compared to removing it is
//      approximately 1.3x faster.
//      Furthermore, if you're using a lot of "Unit has entered map" events,
//      using this system will even result to even more better performance
//      because retrieving Dummy units does not cause that event to run.
//
//
//  Features:
//
//    -- Dummy Sharing
//        When a Dummy List gets low on unit count, it will borrow Dummy Units 
//        from the Dummy List with the highest unit count. The transfer is not
//        instant because the shared Dummy Unit has to turn to the appropriate 
//        angle of its new Dummy List before it can be recycled. 
//        See BORROW_REQUEST.
//
//    -- Self-balancing recycling algorithm
//        Recycled Dummy Units will be thrown to the List having the least number
//        of Dummy Units.
//
//    -- Recycling least used
//        Allows recycling a Dummy from the Dummy List with the highest
//        unit count. It is useful when the facing angle of the Dummy Unit
//        does not matter. 
//        See GetRecycledDummyAnyAngle.
//
//    -- Self-adaptation
//        When there are no free Dummy Units from a Dummy List, it will end up creating
//        a new unit instead but that unit will be permanently added as a Dummy
//        Unit to be recycled increasing the overall total Dummy Unit count.
//
//    -- Count control
//        Allows limiting the overall number of Dummy Units. 
//        See MAX_DUMMY_COUNT.
//
//    -- Delayed Recycle
//        Allows recycling Dummy Units after some delay to allocate time for the 
//        death animation of Special Effects to be seen. 
//        See DummyAddRecycleTimer.
//
// ******************************************************************
// ***************************** API: *******************************
// ******************************************************************
//
//  function GetRecycledDummy takes real x, real y, real z, real facing returns unit
//      - Retrieve an unused Dummy Unit from the List.
//      - The equivalent of CreateUnit.
//      - To use as a Dummy Caster, follow it with PauseUnit(dummy, false).
//
//  function GetRecycledDummyAnyAngle takes real x, real y, real z returns unit
//      - Use this function if the facing angle of the Dummy doesn't matter to you.
//      - It will return a unit from the list having the highest number of unused Dummy Units.
//      - To use as a Dummy Caster, follow it with PauseUnit(dummy, false).
//
//  function RecycleDummy takes unit u returns nothing
//      - Recycle the Dummy unit for it to be used again later.
//      - The equivalent of RemoveUnit.
//
//  function DummyAddRecycleTimer takes unit u, real time returns nothing
//      - Recycle the Dummy unit after a certain time. 
//      - Use this to allocate time for the the death animation of an effect attached to the 
//        Dummy Unit to finish..
//      - The equivalent of UnitApplyTimedLife.
//
//  function ShowDummy takes unit u, boolean flag returns nothing
//      - Shows/hides Dummy Unit without conflicting with the Locust ability.
//
//--------------------
//      CREDITS
//--------------------
//  Bribe - for the MissileRecycler (vJASS) where I got this concept from
//       http://www.hiveworkshop.com/forums/jass-resources-412/system-missilerecycler-206086/
//        - for the optional Table
//       http://www.hiveworkshop.com/forums/jass-resources-412/snippet-new-table-188084/
//  Vexorian - for the Attachable and Pitch Animation Model (dummy.mdx)
//       http://www.wc3c.net/showthread.php?t=101150
//  Maker and IcemanBo - for the unit permanent 0.04 KB memory leak of units.
//       http://www.hiveworkshop.com/forums/trigger-gui-editor-tutorials-279/memory-leaks-263410/
//  Nestharus - for the data structure
//       http://www.hiveworkshop.com/forums/2809461-post7.html
//            - for the optional WorldBounds
//       http://githubusercontent.com/nestharus/JASS/master/jass/Systems/WorldBounds/script.j

// =============================================================== //
// ====================== CONFIGURATION ========================== //
// =============================================================== //

////The rawcode of the Dummy Unit
//constant function Dummy_Rawcode takes nothing returns integer
//    return 'h07Q'
//endfunction
//
////The owner of the Dummy Unit
//constant function Dummy_Owner takes nothing returns player
//    return Player(14)
//endfunction
//
////The number of indexed angle. The higher the value the:
//// - Lesser the turning time for the Dummy Units.
//// - Higher the total number of Dummy Units created at Map Initialization.
////          Recommended Value: 10 (Max difference of 18 degrees)
//constant function Dummy_Angles takes nothing returns integer
//    return 10
//endfunction
//
////The number of Dummy units per Dummy_Angle. The higher the value the:
//// - Higher the number of units that can be recycled per angle, when 
////   no more units are in queue, the system will resort to use CreateUnit.
//// - Higher the total number of Dummy Units created at Map Initialization.
////    Recommended Value: 3 to 5 (for less overhead in Map Loading Screen)
//constant function Dummy_StoredUnits takes nothing returns integer
//    return 3
//endfunction
//
////The maximum number of Dummy units that can exist. When the system resort
////to using CreateUnit, the unit will be permanently added to the Dummy
////List. To avoid spamming Dummy Units and having too much free Dummy
////Units to allocate, the maximum number of Dummy Units is capped.
////               Recommended Value: 80 to 120
//constant function Dummy_MaxCount takes nothing returns integer
//    return 100
//endfunction
//
////When a certain angle have less than BORROW_REQUEST units in its list,
////it will start to borrow Dummy Units from the list with the highest
////Dummy Unit count.
////      Recommended Value: Half of maximum Dummy_StoredUnits
//constant function Dummy_BorrowRequest takes nothing returns integer
//    return 5
//endfunction
//
////It will only return a Dummy if the current dummy is close
////to it's appropriate facing angle. This is to avoid returning
////a Dummy which is still turning to face it's list angle.
//constant function Dummy_AngleTolerance takes nothing returns real
//    return 10.0
//endfunction
//
////An additional option to automatically hide recycled dummy units in the
////corner of the map camera bounds
//constant function Dummy_HideOnMapCorner takes nothing returns boolean
//    return true
//endfunction
//
//// =============================================================== //
//// ==================== END CONFIGURATION ======================== //
//// =============================================================== //
//
//function Dummy_GetHead takes integer facing returns integer
//    if facing < 0 or facing >= 360 then
//        set facing = facing - (facing/360)*360
//        if facing < 0 then
//            set facing = facing + 360
//        endif
//    endif
//    return R2I((facing*Dummy_Angles()/360.0))
//endfunction
//
//function ShowDummy takes unit u, boolean flag returns nothing
//    if IsUnitHidden(u) == flag then
//        call ShowUnit(u, flag)
//        if flag and GetUnitTypeId(u) == Dummy_Rawcode() then
//            call UnitRemoveAbility(u, 'Aloc')
//            call UnitAddAbility(u, 'Aloc')
//        endif
//    endif
//endfunction
//
//function GetRecycledDummy takes real x, real y, real z, real facing returns unit
//    local integer head = Dummy_GetHead(R2I(facing + 180.0/Dummy_Angles()))
//    local integer this = udg_Dummy_Next[head]
//    local integer countHead
//    
//    
//    //If there are Dummy Units in the Queue List already facing the appropriate angle
//    if this != head and RAbsBJ(GetUnitFacing(udg_Dummy_Unit[this]) - udg_Dummy_Angle[head]) <= Dummy_AngleTolerance() then
//        //Remove from the Queue List
//        set udg_Dummy_Next[udg_Dummy_Prev[this]] = udg_Dummy_Next[this]
//        set udg_Dummy_Prev[udg_Dummy_Next[this]] = udg_Dummy_Prev[this]
//        //For double free protection
//        set udg_Dummy_Next[this] = -1
//        //Unit Properties
//        set bj_lastCreatedUnit = udg_Dummy_Unit[this]
//        call SetUnitX(bj_lastCreatedUnit, x)
//        call SetUnitY(bj_lastCreatedUnit, y)
//        call SetUnitFacing(bj_lastCreatedUnit, facing)
//        call SetUnitVertexColor(bj_lastCreatedUnit, 255, 255, 255, 255)
//        call SetUnitFlyHeight(bj_lastCreatedUnit, z, 0)
//        call ShowDummy(bj_lastCreatedUnit, true)
//        //------------------------------------------------
//        //       Comment out resets you don't need
//        //------------------------------------------------
//        call SetUnitScale(bj_lastCreatedUnit, 1, 0, 0)
//        call SetUnitAnimationByIndex(bj_lastCreatedUnit, 90)
//        //Update Count and Bounds
//        set udg_Dummy_Count[head] = udg_Dummy_Count[head] - 1
//        
//        //------------------------------------------------
//        //                 Unit Sharing
//        //------------------------------------------------
//        if udg_Dummy_Count[head] < Dummy_BorrowRequest() and udg_Dummy_Count[udg_Dummy_CountNext[udg_Dummy_CountHead[udg_Dummy_Upper]]] > udg_Dummy_Count[head] then
//            set udg_Dummy_Count[head] = udg_Dummy_Count[head] + 1
//            //Take an instance from the UpperBound list
//            set this = udg_Dummy_Next[udg_Dummy_CountNext[udg_Dummy_CountHead[udg_Dummy_Upper]]]
//            call SetUnitFacing(udg_Dummy_Unit[this], udg_Dummy_Angle[head])
//            //Remove
//            set udg_Dummy_Next[udg_Dummy_Prev[this]] = udg_Dummy_Next[this]
//            set udg_Dummy_Prev[udg_Dummy_Next[this]] = udg_Dummy_Prev[this]
//            //Add to the Current List
//            set udg_Dummy_Next[this] = head
//            set udg_Dummy_Prev[this] = udg_Dummy_Prev[head]
//            set udg_Dummy_Next[udg_Dummy_Prev[this]] = this
//            set udg_Dummy_Prev[udg_Dummy_Next[this]] = this
//            set head = udg_Dummy_CountNext[udg_Dummy_CountHead[udg_Dummy_Upper]]
//            set udg_Dummy_Count[head] = udg_Dummy_Count[head] - 1
//        endif
//        //---------------------------
//        //Update Count Lists
//        //---------------------------
//        //Remove from the current Count List
//        set udg_Dummy_CountNext[udg_Dummy_CountPrev[head]] = udg_Dummy_CountNext[head]
//        set udg_Dummy_CountPrev[udg_Dummy_CountNext[head]] = udg_Dummy_CountPrev[head]
//        //Add to the new Count List
//        set countHead = udg_Dummy_CountHead[udg_Dummy_Count[head]]
//        set udg_Dummy_CountNext[head] = countHead
//        set udg_Dummy_CountPrev[head] = udg_Dummy_CountPrev[countHead]
//        set udg_Dummy_CountNext[udg_Dummy_CountPrev[head]] = head
//        set udg_Dummy_CountPrev[udg_Dummy_CountNext[head]] = head
//        
//        //---------------------------
//        //  Update Bounds
//        //---------------------------
//        set countHead = udg_Dummy_CountHead[udg_Dummy_Upper]
//        if udg_Dummy_CountNext[countHead] == countHead then
//            set udg_Dummy_Upper = udg_Dummy_Upper - 1
//        endif
//        if udg_Dummy_Count[head] < udg_Dummy_Lower  then
//            set udg_Dummy_Lower = udg_Dummy_Count[head]
//        endif
//    else
//        set bj_lastCreatedUnit = CreateUnit(Dummy_Owner(), Dummy_Rawcode(), x, y, facing)
//        call PauseUnit(bj_lastCreatedUnit, true)
//        call SetUnitFlyHeight(bj_lastCreatedUnit, z, 0)
//        if udg_Dummy_UnitCount < Dummy_MaxCount() then
//            set this = udg_Dummy_LastInstance
//            set udg_Dummy_Next[this] = -1
//            set udg_Dummy_Unit[this] = bj_lastCreatedUnit
//            call SaveInteger(udg_Dummy_Hashtable, GetHandleId(bj_lastCreatedUnit), 0, this)
//            set udg_Dummy_LastInstance = udg_Dummy_LastInstance + 1
//        endif
//        set udg_Dummy_UnitCount = udg_Dummy_UnitCount + 1
//    endif
//
//    return bj_lastCreatedUnit
//endfunction
//
//function GetRecycledDummyAnyAngle takes real x, real y, real z returns unit
//    return GetRecycledDummy(x, y, z, udg_Dummy_Angle[udg_Dummy_CountNext[udg_Dummy_CountHead[udg_Dummy_Upper]]])
//endfunction
//
//
//function RecycleDummy takes unit u returns nothing
//    local integer this = LoadInteger(udg_Dummy_Hashtable, GetHandleId(u), 0)
//    local integer head
//    local integer countHead
//    
//    //If the unit is a legit Dummy Unit
//    if this > 0 and udg_Dummy_Next[this] == -1 then
//        //Find where to insert based on the list having the least number of units
//        set head = udg_Dummy_CountNext[udg_Dummy_CountHead[udg_Dummy_Lower]]
//        set udg_Dummy_Next[this] = head
//        set udg_Dummy_Prev[this] = udg_Dummy_Prev[head]
//        set udg_Dummy_Next[udg_Dummy_Prev[this]] = this
//        set udg_Dummy_Prev[udg_Dummy_Next[this]] = this
//        //Update Status
//        call SetUnitFacing(u, udg_Dummy_Angle[head])
//        call PauseUnit(u, true)
//        call SetUnitOwner(u, Dummy_Owner(), false)
//        if Dummy_HideOnMapCorner() then
//            call SetUnitX(u, udg_Dummy_X)
//            call SetUnitY(u, udg_Dummy_Y)
//        else
//            call SetUnitVertexColor(u, 0, 0, 0, 0)
//        endif
//        set udg_Dummy_Count[head] = udg_Dummy_Count[head] + 1
//        
//        //---------------------------
//        //    Update Count Lists
//        //---------------------------
//        //Remove
//        set udg_Dummy_CountNext[udg_Dummy_CountPrev[head]] = udg_Dummy_CountNext[head]
//        set udg_Dummy_CountPrev[udg_Dummy_CountNext[head]] = udg_Dummy_CountPrev[head]
//        //Add to the new Count List
//        set countHead = udg_Dummy_CountHead[udg_Dummy_Count[head]]
//        set udg_Dummy_CountNext[head] = countHead
//        set udg_Dummy_CountPrev[head] = udg_Dummy_CountPrev[countHead]
//        set udg_Dummy_CountNext[udg_Dummy_CountPrev[head]] = head
//        set udg_Dummy_CountPrev[udg_Dummy_CountNext[head]] = head
//        
//        //---------------------------
//        //  Update Bounds
//        //---------------------------
//        set countHead = udg_Dummy_CountHead[udg_Dummy_Lower]
//        if udg_Dummy_CountNext[countHead] == countHead then
//            set udg_Dummy_Lower = udg_Dummy_Lower + 1
//        endif
//        if udg_Dummy_Count[head] > udg_Dummy_Upper then
//            set udg_Dummy_Upper = udg_Dummy_Count[head]
//        endif
//    elseif this == 0 then
//        //User tries to recycle an invalid unit, remove the unit instead
//        call RemoveUnit(u)
//    endif
//    
//endfunction
//
//function Dummy_TimerExpires takes nothing returns nothing
//    local timer t = GetExpiredTimer()
//    local integer id = GetHandleId(t)
//    call RecycleDummy(LoadUnitHandle(udg_Dummy_Hashtable, id, 0))
//    call FlushChildHashtable(udg_Dummy_Hashtable, id)
//    call DestroyTimer(t)
//    set t = null
//endfunction
//
//function DummyAddRecycleTimer takes unit u, real time returns nothing
//    local timer t = CreateTimer()
//    call SaveUnitHandle(udg_Dummy_Hashtable, GetHandleId(t), 0, u)
//    call TimerStart(t, time, false, function Dummy_TimerExpires)
//    set t = null
//endfunction
//
//////////////////////////////////////////////////////
//END OF DUMMY RECYCLER
//////////////////////////////////////////////////////




//***************************************************************************
//*
//*  Triggers
//*
//***************************************************************************

//===========================================================================
// Trigger: Init
//===========================================================================
// Trigger: Init Deco Builders
//===========================================================================

// Trigger: Init Quests
//===========================================================================
// Trigger: Init Main
//===========================================================================
function Trig_Init_Main_Func032A takes nothing returns nothing
    local integer l__udg_temp_integer= GetPlayerId(GetEnumPlayer()) + 1
    local player l__udg_temp_player
    set l__udg_temp_player=ConvertedPlayer(l__udg_temp_integer)
    call CreateFogModifierRectBJ(true, l__udg_temp_player, FOG_OF_WAR_VISIBLE, GetPlayableMapRect())
    // Possession causes crashes because of unit ownership change detection
    call SetPlayerAbilityAvailableBJ(false, 'Apos', l__udg_temp_player)
    call SetPlayerAbilityAvailableBJ(false, 'Aps2', l__udg_temp_player)
    call SetPlayerAbilityAvailableBJ(false, 'ACps', l__udg_temp_player)
    call SetPlayerHandicapXPBJ(l__udg_temp_player, 0.00)
    call AdjustPlayerStateBJ(1000000000, l__udg_temp_player, PLAYER_STATE_RESOURCE_GOLD)
    call AdjustPlayerStateBJ(1000000000, l__udg_temp_player, PLAYER_STATE_RESOURCE_LUMBER)
    call SetPlayerMaxHeroesAllowed(- 1, l__udg_temp_player)
    // --
    set udg_RealNames[l__udg_temp_integer]=GetPlayerName(l__udg_temp_player)
    set udg_System_DecoGrid[l__udg_temp_integer]=16.00
    set udg_TreeSystem_TREES[l__udg_temp_integer]='LTlt'
    set udg_PLAYER_LOCATIONS[l__udg_temp_integer]=GetPlayerStartLocationLoc(l__udg_temp_player)
    set udg_System_NeutralUnits[l__udg_temp_integer - 1]=CreateGroup()
    set udg_Player_ControlGroup[l__udg_temp_integer]=CreateGroup()
    set udg_DecoSystem_Scale[l__udg_temp_integer]=100.00
    set udg_DecoSystem_Value[l__udg_temp_integer]=1
    set udg_TreeSystem_Space[l__udg_temp_integer]=128.00
    set udg_ColorSystem_Blue[l__udg_temp_integer]=100.00
    set udg_ColorSystem_Green[l__udg_temp_integer]=100.00
    set udg_ColorSystem_Red[l__udg_temp_integer]=100.00
    // --
endfunction

function Trig_Init_Main_Func070001002001 takes nothing returns boolean
    return ( IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == true )
endfunction

function Trig_Init_Main_Func070001002002 takes nothing returns boolean
    return ( RectContainsUnit(gg_rct_Titan_Palace, GetFilterUnit()) == false )
endfunction

function Trig_Init_Main_Func070001002 takes nothing returns boolean
    return GetBooleanAnd((IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == true), (RectContainsUnit(gg_rct_Titan_Palace, GetFilterUnit()) == false)) // INLINED!!
endfunction

function Trig_Init_Main_Func070A takes nothing returns nothing
    call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_PASSIVE), true)
endfunction

function Trig_Init_Main_Actions takes nothing returns nothing
    local integer l__udg_temp_integer
    local integer l__udg_temp_integer2
    local integer l__udg_Commands_Integer
    local player l__udg_temp_player
    set udg_WholeMapRegion=GetEntireMapRect()
    set udg_System_PArmyLimit[1]=150
    set udg_System_PArmyLimit[2]=24
    set udg_System_PArmyLimit[3]=150
    call InitDecoUnitTypeArray()
    // Create Hashtables
    if udg_Hashtable_1 == null then
    set udg_Hashtable_1=InitHashtable()
    endif
    if udg_Hashtable_2 == null then
    set udg_Hashtable_2=InitHashtable()
    endif
    // Make destructibles invulnerable
    call SetDestructableInvulnerableBJ(gg_dest_ATg1_0003, true)
    call SetDestructableInvulnerableBJ(gg_dest_ATg3_0004, true)
    call SetDestructableInvulnerableBJ(gg_dest_DTg5_0008, true)
    call SetDestructableInvulnerableBJ(gg_dest_DTg5_0007, true)
    call SetDestructableInvulnerableBJ(gg_dest_LTe3_0005, true)
    // ---------------
    // Ally Players and Create Spawns
    // ---------------
    call CreateFogModifierRectBJ(true, Player(PLAYER_NEUTRAL_PASSIVE), FOG_OF_WAR_VISIBLE, GetPlayableMapRect())
    set l__udg_Commands_Integer=bj_MAX_PLAYERS
    set l__udg_temp_integer=1
    loop
        exitwhen l__udg_temp_integer > l__udg_Commands_Integer
        set l__udg_temp_player=ConvertedPlayer(l__udg_temp_integer)
        set udg_FORCES_PLAYER[( l__udg_temp_integer - 1 )]=GetForceOfPlayer(l__udg_temp_player)
        set udg_System_PlayerColor[l__udg_temp_integer]=l__udg_temp_integer
        call ForceAddPlayerSimple(l__udg_temp_player, udg_ALL_PLAYERS_FORCE)
        set l__udg_temp_integer2=1
        loop
            exitwhen l__udg_temp_integer2 > l__udg_Commands_Integer
            if l__udg_temp_integer != l__udg_temp_integer2 then
            call SetPlayerAllianceStateBJ(l__udg_temp_player, ConvertedPlayer(l__udg_temp_integer2), bj_ALLIANCE_ALLIED_VISION)
            endif
            set l__udg_temp_integer2=l__udg_temp_integer2 + 1
        endloop
        set l__udg_temp_integer=l__udg_temp_integer + 1
    endloop
    set l__udg_Commands_Integer=( l__udg_Commands_Integer + 1 )
    set l__udg_temp_integer=l__udg_Commands_Integer
    loop
        exitwhen l__udg_temp_integer > ( l__udg_Commands_Integer + 3 )
        set udg_System_PlayerColor[l__udg_temp_integer]=l__udg_Commands_Integer
        set l__udg_temp_integer=l__udg_temp_integer + 1
    endloop
    call ForForce(GetPlayersAll(), function Trig_Init_Main_Func032A)
    // Terrain Settings
    set udg_TileSystem_ABILITIES[0]='A0BH'
    set udg_TileSystem_TILES[0]='Ygsb'
    set udg_TileSystem_ABILITIES[1]='A0BK'
    set udg_TileSystem_TILES[1]='Ngrs'
    set udg_TileSystem_ABILITIES[2]='A0BE'
    set udg_TileSystem_TILES[2]='cIc2'
    set udg_TileSystem_ABILITIES[3]='A0BI'
    set udg_TileSystem_TILES[3]='Yhdg'
    set udg_TileSystem_ABILITIES[4]='A0BF'
    set udg_TileSystem_TILES[4]='Ydrt'
    set udg_TileSystem_ABILITIES[5]='A0BM'
    set udg_TileSystem_TILES[5]='Frok'
    set udg_TileSystem_ABILITIES[6]='A0BO'
    set udg_TileSystem_TILES[6]='cWc1'
    set udg_TileSystem_ABILITIES[7]='A0BN'
    set udg_TileSystem_TILES[7]='Nrck'
    set udg_TileSystem_ABILITIES[8]='A0BJ'
    set udg_TileSystem_TILES[8]='Nice'
    set udg_TileSystem_ABILITIES[9]='A0BL'
    set udg_TileSystem_TILES[9]='Cvin'
    set udg_TileSystem_ABILITIES[10]='A0BP'
    set udg_TileSystem_TILES[10]='Adrd'
    set udg_TileSystem_ABILITIES[11]='A0BQ'
    set udg_TileSystem_TILES[11]='Olgb'
    set udg_TileSystem_ABILITIES[12]='A0BT'
    set udg_TileSystem_TILES[12]='Zsan'
    set udg_TileSystem_ABILITIES[13]='A0BS'
    set udg_TileSystem_TILES[13]='Ywmb'
    set udg_TileSystem_ABILITIES[14]='A0BU'
    set udg_TileSystem_TILES[14]='Yrtl'
    set udg_TileSystem_ABILITIES[15]='A0BG'
    set udg_TileSystem_TILES[15]='Ysqd'
    // Setup Starting Units
    call SetHeroLevelBJ(gg_unit_H00V_0359, 100, false)
    call UnitAddItemByIdSwapped('I00D', gg_unit_H00V_0359)
    set bj_wantDestroyGroup=true
    call ForGroupBJ(GetUnitsOfPlayerMatching(Player(0), Condition(function Trig_Init_Main_Func070001002)), function Trig_Init_Main_Func070A)
    call DisplayTextToForce(GetPlayersAll(), "Map Initialization was Successful! Welcome to the Land of Plenty!
Check out F9 for new commands or if you never played Titan Land before.")
endfunction

//===========================================================================
function InitTrig_Init_Main takes nothing returns nothing
    set gg_trg_Init_Main=CreateTrigger()
    call TriggerAddAction(gg_trg_Init_Main, function Trig_Init_Main_Actions)
endfunction

//===========================================================================
// Trigger: Init 0 seconds
//===========================================================================
function Trig_Init_0_seconds_Func029A takes nothing returns nothing
    call SaveBooleanBJ(true, 0, GetHandleIdBJ(GetEnumDestructable()), udg_Hashtable_1)
endfunction

function Trig_Init_0_seconds_Func076001002 takes nothing returns boolean
    return ( GetUnitAbilityLevelSwapped('A0C6', GetFilterUnit()) != 0 )
endfunction

function Trig_Init_0_seconds_Func076A takes nothing returns nothing
    call UnitRemoveAbility(GetEnumUnit(), 'Amov')
    call UnitRemoveAbility(GetEnumUnit(), 'Aatk')
endfunction

function Trig_Init_0_seconds_Func080Func001Func001Func001C takes nothing returns boolean
    if ( not ( IsUnitType(GetEnumUnit(), UNIT_TYPE_STRUCTURE) == true ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    return true
endfunction

function Trig_Init_0_seconds_Func080Func001Func001C takes nothing returns boolean
    if ( Trig_Init_0_seconds_Func080Func001Func001Func001C() ) then
        return true
    endif
    if ( ( GetEnumUnit() == gg_unit_H00V_0359 ) ) then
        return true
    endif
    if ( ( GetEnumUnit() == gg_unit_H00S_0141 ) ) then
        return true
    endif
    if ( ( GetEnumUnit() == gg_unit_e00B_0405 ) ) then
        return true
    endif
    if ( ( GetEnumUnit() == gg_unit_e009_0407 ) ) then
        return true
    endif
    if ( ( GetEnumUnit() == gg_unit_e008_0406 ) ) then
        return true
    endif
    if ( ( GetEnumUnit() == gg_unit_e00D_0409 ) ) then
        return true
    endif
    if ( ( GetEnumUnit() == gg_unit_e00A_0411 ) ) then
        return true
    endif
    if ( ( GetEnumUnit() == gg_unit_e00C_0408 ) ) then
        return true
    endif
    if ( ( GetEnumUnit() == gg_unit_e007_0410 ) ) then
        return true
    endif
    return false
endfunction

function Trig_Init_0_seconds_Func080Func001C takes nothing returns boolean
    if ( not Trig_Init_0_seconds_Func080Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Init_0_seconds_Func080A takes nothing returns nothing
    if ( Trig_Init_0_seconds_Func080Func001C() ) then
    else
        call GroupRemoveUnitSimple(GetEnumUnit(), udg_System_ProtectedGroup)
    endif
endfunction

function Trig_Init_0_seconds_Actions takes nothing returns nothing
    local integer temp_integer
    // CREATE REGIONS AND EVENTS FOR THE "GIVE CIRCLES" IN THE TITAN PALACE
    call InitPlayerCircles()
    // ---------------
    // Create Quests
    // ---------------
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "First Person Camera", "This map employs Guhun's First Person Camera system, for a more immersive experience!

To enter first person perspective, select a unit and then double-click the |c00ffff00Esc|r key. You will see a help message when you do this the first time.

Commands:
|c00ffff00-first person|r and |c00ffff00-third person|r: Alternatives to double-clicking |c00ffff00Esc.|r
|c00ffff00-fixed camera|r and |c00ffff00-free camera|r: Alternatives to clicking |c00ffff00Esc|r while in first person.
|c00ffff00-help camera|r: Displays help text for the system.", "ReplaceableTextures\\CommandButtons\\BTNAmbush.blp")
    call InitQuests()
    call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "Changelog
", "Version 1.0.0 Features:
-Custom Races:
Humans,Orcs,Undead,Fleshless,Night Elves, Elves, Ogres, Bandits, Pirates, Murlocs, Naga
-Save/Load System
-Expanded terrain and a few tweaks to original
-New decos", "ReplaceableTextures\\CommandButtons\\BTNSpellBookBLS.blp")
    call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "Contact Me", "I'm mostly working on this project alone, so I would appreciate any help you can give me, any suggestions or any bug reports (please don't report buggy tooltips/icons yet)

songuhun@hotmail.com
You can find me on The Hive Wokrshop: _Guhun_
And discord: SonGuhun#4510", "ReplaceableTextures\\CommandButtons\\BTNSnazzyScroll.blp")
    // ---------------
    // ---------------
    // SCROLL SYSTEM SET ARRAYS
    set udg_ScrollSystem_learnAbilities[0]='A063'
    set udg_ScrollSystem_learnAbilities[1]='A04V'
    set udg_ScrollSystem_learnAbilities[2]='A04K'
    set udg_ScrollSystem_learnAbilities[3]='A061'
    set udg_ScrollSystem_learnAbilities[4]='A060'
    set udg_ScrollSystem_learnAbilities[5]='A069'
    set udg_ScrollSystem_learnAbilities[6]='A04R'
    set udg_ScrollSystem_realAbilities[0]='A062'
    set udg_ScrollSystem_realAbilities[1]='A04U'
    set udg_ScrollSystem_realAbilities[2]='A04J'
    set udg_ScrollSystem_realAbilities[3]='A05Y'
    set udg_ScrollSystem_realAbilities[5]='A06A'
    set udg_ScrollSystem_realAbilities[6]='A04S'
    call EnumDestructablesInRectAll(gg_rct_Titan_Palace, function Trig_Init_0_seconds_Func029A)
    // ---------------------
    // ---------------------
    call SetTimeOfDay(7.00)
    call UseTimeOfDayBJ(false)
    // ---------------------
    // ---------------------
    // ---------------------
    // Gates
    call SaveInteger(udg_Hashtable_1, 'h0AQ', 0, 'h00C')
    call SaveInteger(udg_Hashtable_1, 'h009', 0, 'h00B')
    // -
    call SaveInteger(udg_Hashtable_1, 'h00C', 0, 'h0AQ')
    call SaveInteger(udg_Hashtable_1, 'h00B', 0, 'h009')
    // Demonic Gates
    call SaveInteger(udg_Hashtable_1, 'h0AP', 0, 'h0AR')
    call SaveInteger(udg_Hashtable_1, 'h00A', 0, 'h0AS')
    // -
    call SaveInteger(udg_Hashtable_1, 'h0AR', 0, 'h0AP')
    call SaveInteger(udg_Hashtable_1, 'h0AS', 0, 'h00A')
    // Dungeon Gates
    call SaveInteger(udg_Hashtable_1, '1Dgt', 0, '0Dgt')
    call SaveInteger(udg_Hashtable_1, '3Dgt', 0, '2Dgt')
    // -
    call SaveInteger(udg_Hashtable_1, '0Dgt', 0, '1Dgt')
    call SaveInteger(udg_Hashtable_1, '2Dgt', 0, '3Dgt')
    // Mansion Gates
    call SaveInteger(udg_Hashtable_1, 'h0AZ', 0, 'h0B0')
    call SaveInteger(udg_Hashtable_1, 'h0B0', 0, 'h0AZ')
    // ---------------------
    call SaveInteger(udg_Hashtable_1, 'h0JA', 0, 'h0JB')
    call SaveInteger(udg_Hashtable_1, 'h0JB', 0, 'h0JA')
    // Arabian Gates
    call SaveInteger(udg_Hashtable_1, 'h0IB', 0, 'h0IC')
    call SaveInteger(udg_Hashtable_1, 'h0IC', 0, 'h0IB')
    // Icecrown Gates
    call SaveInteger(udg_Hashtable_1, 'h0NR', 0, 'h0NS')
    call SaveInteger(udg_Hashtable_1, 'h0NS', 0, 'h0NR')
    // Ice Rock Gates
    call SaveInteger(udg_Hashtable_1, 'h0NT', 0, 'h0NU')
    call SaveInteger(udg_Hashtable_1, 'h0NU', 0, 'h0NT')
    // ---------------------
    // ---------------------
    // ---------------------
    // ---------------------
    // ---------------------
    set bj_wantDestroyGroup=true
    call ForGroupBJ(GetUnitsInRectMatching(GetPlayableMapRect(), Condition(function Trig_Init_0_seconds_Func076001002)), function Trig_Init_0_seconds_Func076A)
    // CREATE PROTECTION GROUP
    call InitDecoTents()
    set udg_System_ProtectedGroup=GetUnitsInRectAll(gg_rct_Titan_Palace)
    call ForGroupBJ(udg_System_ProtectedGroup, function Trig_Init_0_seconds_Func080A)
    call ShowUnitHide(gg_unit_H00S_0141)
    // CREATE STRING HASHES FOR PLAYER COLOR STRINGS
    call SaveIntegerBJ(1, StringHashBJ("RED"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(2, StringHashBJ("BLUE"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(3, StringHashBJ("teal"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(4, StringHashBJ("purple"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(5, StringHashBJ("yellow"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(6, StringHashBJ("orange"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(6, StringHashBJ("oj"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(7, StringHashBJ("GREEN"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(8, StringHashBJ("pink"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(9, StringHashBJ("gray"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(9, StringHashBJ("grey"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(10, StringHashBJ("light blue"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(10, StringHashBJ("lightblue"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(10, StringHashBJ("lb"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(11, StringHashBJ("dark green"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(11, StringHashBJ("darkgreen"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(11, StringHashBJ("dg"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(12, StringHashBJ("brown"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(13, StringHashBJ("maroon"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(14, StringHashBJ("navy"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(15, StringHashBJ("turquoise"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(15, StringHashBJ("tq"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(16, StringHashBJ("violet"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(17, StringHashBJ("wheat"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(18, StringHashBJ("peach"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(19, StringHashBJ("mint"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(20, StringHashBJ("lavender"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(21, StringHashBJ("coal"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(22, StringHashBJ("snow"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(23, StringHashBJ("emerald"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(24, StringHashBJ("peanut"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(GetConvertedPlayerId(Player(PLAYER_NEUTRAL_AGGRESSIVE)), StringHashBJ("hostile"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(GetConvertedPlayerId(Player(bj_PLAYER_NEUTRAL_VICTIM)), StringHashBJ("victim"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(GetConvertedPlayerId(Player(bj_PLAYER_NEUTRAL_EXTRA)), StringHashBJ("extra"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(GetConvertedPlayerId(Player(PLAYER_NEUTRAL_PASSIVE)), StringHashBJ("neutral"), 0, udg_Hashtable_1)
    call SaveIntegerBJ(GetConvertedPlayerId(Player(PLAYER_NEUTRAL_PASSIVE)), StringHashBJ("passive"), 0, udg_Hashtable_1)
endfunction

//===========================================================================
function InitTrig_Init_0_seconds takes nothing returns nothing
    set gg_trg_Init_0_seconds=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_Init_0_seconds, 0.00)
    call TriggerAddAction(gg_trg_Init_0_seconds, function Trig_Init_0_seconds_Actions)
endfunction

//===========================================================================
// Trigger: Init Create Events
//
// This trigger creates events after map initialization.
// Main usage is creating events for player chat commands, without having to add a shitton of events to each trigger in the world editor. This also helps in avoiding the OP limit.
//===========================================================================
function Trig_Init_Create_Events_Func004A takes nothing returns nothing
    local integer l__udg_temp_integer
    local player l__udg_temp_player
    set l__udg_temp_player=GetEnumPlayer()
    set l__udg_temp_integer=GetConvertedPlayerId(l__udg_temp_player)
    if GetPlayerSlotState(Player(l__udg_temp_integer - 1)) == PLAYER_SLOT_STATE_PLAYING then
    // CREATING EVENTS FOR UNEMPTY PLAYER SLOTS
    call TriggerRegisterPlayerSelectionEventBJ(gg_trg_System_Autoname, l__udg_temp_player, true)
    set udg_System_AutonameBoolean[l__udg_temp_integer]=true
    // a
    // Player Commands
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Toggle_Autoname, l__udg_temp_player, "-autoname", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Name_Unit, l__udg_temp_player, "-nameunit ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Give, l__udg_temp_player, "-give ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Deleteme, l__udg_temp_player, "-deleteme", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Deco_Spawn, l__udg_temp_player, "-decos", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Hide_Decos, l__udg_temp_player, "-hide all", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Hide_Decos, l__udg_temp_player, "-hide", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Select_Search, l__udg_temp_player, "-sele ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Select_Search, l__udg_temp_player, "-seln ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Neutral, l__udg_temp_player, "-neut decos", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Neutral, l__udg_temp_player, "-neut", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Take, l__udg_temp_player, "-take", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Take, l__udg_temp_player, "-take all", true)
    // Titan Commands
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsR_Make_Titan, l__udg_temp_player, "-titan ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsR_Toggle_Prot, l__udg_temp_player, "-palace protection", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsR_Delete, l__udg_temp_player, "-delneu ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsR_Delete, l__udg_temp_player, "-delete ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsR_Kick, l__udg_temp_player, "-kick ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsR_Mind, l__udg_temp_player, "-mind", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsR_Mind, l__udg_temp_player, "'mind", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsR_The_Creator, l__udg_temp_player, "-Summon the Creator", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsR_Water_Color, l__udg_temp_player, "-water ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsR_Fog, l__udg_temp_player, "-fog ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsR_Set_Limits_for_Units, l__udg_temp_player, "-limit ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsR_Toggle_Dmg_Tags, l__udg_temp_player, "-combat tags", true)
    // Deco Commands
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Control, l__udg_temp_player, "-control", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Control, l__udg_temp_player, "-uncontrol", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Locust, l__udg_temp_player, "-select no", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Set_Parameters, l__udg_temp_player, "-size ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Set_Parameters, l__udg_temp_player, "-fly ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Set_Parameters, l__udg_temp_player, "-face ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Set_Parameters, l__udg_temp_player, "-anim ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Set_Parameters, l__udg_temp_player, "-speed ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Set_Parameters, l__udg_temp_player, "-grid ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Set_Parameters, l__udg_temp_player, "-color ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Unit_Mods, l__udg_temp_player, "'size", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Unit_Mods, l__udg_temp_player, "'fly", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Unit_Mods, l__udg_temp_player, "'rgb", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Unit_Mods, l__udg_temp_player, "'face", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Unit_Mods, l__udg_temp_player, "'anim", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Unit_Mods, l__udg_temp_player, "'speed", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Unit_Mods, l__udg_temp_player, "'color", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Add_Tag, l__udg_temp_player, "-tag ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Set_Tree_Space, l__udg_temp_player, "-space ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Variation, l__udg_temp_player, "-var ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Set_AoE, l__udg_temp_player, "-val ", false)
    set udg_TileSystem_Var[l__udg_temp_integer]=- 1
    // Ally/Unally
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Set_Alliance, l__udg_temp_player, "-ally ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Set_Alliance, l__udg_temp_player, "-unally ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Set_Alliance, l__udg_temp_player, "-share ", false)
    // Set Commands
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Set_Color, l__udg_temp_player, "-setcolor ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Set_Name, l__udg_temp_player, "-name ", false)
    // Camera Commands
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_StartRectCamera, l__udg_temp_player, "-zoom ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_StartRectCamera, l__udg_temp_player, "-roll ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_StartRectCamera, l__udg_temp_player, "-rotate ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_StartRectCamera, l__udg_temp_player, "-pitch ", false)
    // Other Commands
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Copy, l__udg_temp_player, "-copy", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Real_Name, l__udg_temp_player, "-real ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_StartRectCamera, l__udg_temp_player, "-start", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_StartRectCamera, l__udg_temp_player, "-rect", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Remove_Kill, l__udg_temp_player, "-kill", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Commands_Remove_Kill, l__udg_temp_player, "-remove", true)
    // Systems
    call TriggerRegisterPlayerEventLeave(gg_trg_System_Detect_Leaver, l__udg_temp_player)
    call DisplayTextToForce(udg_FORCES_PLAYER[( GetConvertedPlayerId(l__udg_temp_player) - 1 )], "Events Created Successfully.
------
To get a race selector: |cffffff00-start|r
To get deco builders: |cffffff00-decos|r
To select unit/terrain/tree modification deco: |cffffff00-seln special|r")
    endif
endfunction

function Trig_Init_Create_Events_Actions takes nothing returns nothing
    // EVENTS FOR TRIGGERS THAT SHULD ONLY ACTIVATE AFTER MAP INITIALIZATION
    // EVENTS FOR COMMAND TRIGGERS
    call ForForce(GetPlayersAll(), function Trig_Init_Create_Events_Func004A)
endfunction

//===========================================================================
function InitTrig_Init_Create_Events takes nothing returns nothing
    set gg_trg_Init_Create_Events=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_Init_Create_Events, 0.50)
    call TriggerAddAction(gg_trg_Init_Create_Events, function Trig_Init_Create_Events_Actions)
endfunction

//===========================================================================
// Trigger: System Set Unit Color
//===========================================================================
function Trig_System_Set_Unit_Color_Actions takes nothing returns nothing
    if (s__UnitVisuals_getColor((GetHandleId(((GetTriggerUnit())))))) == "D" then // INLINED!!
    call SetUnitColor(GetTriggerUnit(), (UnitVisualMods___I2PC[(udg_System_PlayerColor[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))])])) // INLINED!!
    endif
endfunction

//===========================================================================
function InitTrig_System_Set_Unit_Color takes nothing returns nothing
    set gg_trg_System_Set_Unit_Color=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_System_Set_Unit_Color, GetEntireMapRect())
    call TriggerAddAction(gg_trg_System_Set_Unit_Color, function Trig_System_Set_Unit_Color_Actions)
endfunction

//===========================================================================
// Trigger: System Level Up Heroes
//===========================================================================
function Trig_System_Level_Up_Heroes_Func002C takes nothing returns boolean
    if ( not ( IsUnitType(udg_UDexUnits[udg_UDex], UNIT_TYPE_HERO) == true ) ) then
        return false
    endif
    if ( not ( GetHeroLevel(udg_UDexUnits[udg_UDex]) <= 10 ) ) then
        return false
    endif
    return true
endfunction

function Trig_System_Level_Up_Heroes_Actions takes nothing returns nothing
    if ( Trig_System_Level_Up_Heroes_Func002C() ) then
        call SetHeroLevelBJ(udg_UDexUnits[udg_UDex], 10, false)
    else
    endif
endfunction

//===========================================================================
function InitTrig_System_Level_Up_Heroes takes nothing returns nothing
    set gg_trg_System_Level_Up_Heroes=CreateTrigger()
    call TriggerRegisterVariableEvent(gg_trg_System_Level_Up_Heroes, "udg_UnitIndexEvent", EQUAL, 1.00)
    call TriggerAddAction(gg_trg_System_Level_Up_Heroes, function Trig_System_Level_Up_Heroes_Actions)
endfunction

//===========================================================================
// Trigger: System Autoname
//===========================================================================
function Trig_System_Autoname_Actions takes nothing returns boolean
    local player trigPlayer= GetTriggerPlayer()
    local unit trigUnit= GetTriggerUnit()

    if (HaveSavedString(UnitVisualMods___hashTable, (GetHandleId(trigUnit)), UnitVisualMods___NAME)) and GetOwningPlayer(trigUnit) == trigPlayer and udg_System_AutonameBoolean[GetPlayerId(trigPlayer) + 1] then // INLINED!!
        call SetPlayerName(trigPlayer, GUMSGetUnitName(trigUnit))
    endif

    set trigUnit=null
    return false
endfunction

//===========================================================================
function InitTrig_System_Autoname takes nothing returns nothing
    set gg_trg_System_Autoname=CreateTrigger()
    call TriggerAddCondition(gg_trg_System_Autoname, Condition(function Trig_System_Autoname_Actions))
endfunction

//===========================================================================
// Trigger: System TPalace Doors
//===========================================================================
function Trig_System_TPalace_Doors_Actions takes nothing returns nothing
    local group rectGroup= CreateGroup()
    
    call GroupEnumUnitsInRect(rectGroup, gg_rct_DoorIceTitan, null)
    if IsGroupEmpty(rectGroup) then
        call ModifyGateBJ(bj_GATEOPERATION_CLOSE, gg_dest_LTe3_0005)
    else
        call ModifyGateBJ(bj_GATEOPERATION_OPEN, gg_dest_LTe3_0005)
    endif
    call GroupClear(rectGroup)
    
    call GroupEnumUnitsInRect(rectGroup, gg_rct_DoorTitanA, null)
    if IsGroupEmpty(rectGroup) then
        call ModifyGateBJ(bj_GATEOPERATION_CLOSE, gg_dest_ATg3_0004)
    else
        call ModifyGateBJ(bj_GATEOPERATION_OPEN, gg_dest_ATg3_0004)
    endif
    call GroupClear(rectGroup)
    
    call GroupEnumUnitsInRect(rectGroup, gg_rct_DoorTitanB, null)
    if IsGroupEmpty(rectGroup) then
        call ModifyGateBJ(bj_GATEOPERATION_CLOSE, gg_dest_ATg1_0003)
    else
        call ModifyGateBJ(bj_GATEOPERATION_OPEN, gg_dest_ATg1_0003)
    endif
    call GroupClear(rectGroup)
    
    call GroupEnumUnitsInRect(rectGroup, gg_rct_DoorTreasureA, null)
    if IsGroupEmpty(rectGroup) then
        call ModifyGateBJ(bj_GATEOPERATION_CLOSE, gg_dest_DTg5_0007)
    else
        call ModifyGateBJ(bj_GATEOPERATION_OPEN, gg_dest_DTg5_0007)
    endif
    call GroupClear(rectGroup)
    
    call GroupEnumUnitsInRect(rectGroup, gg_rct_DoorTreasureB, null)
    if IsGroupEmpty(rectGroup) then
        call ModifyGateBJ(bj_GATEOPERATION_CLOSE, gg_dest_DTg5_0008)
    else
        call ModifyGateBJ(bj_GATEOPERATION_OPEN, gg_dest_DTg5_0008)
    endif
    
    call DestroyGroup(rectGroup)
    set rectGroup=null
endfunction

//===========================================================================
function InitTrig_System_TPalace_Doors takes nothing returns nothing
    set gg_trg_System_TPalace_Doors=CreateTrigger()
    call TriggerRegisterTimerEvent(gg_trg_System_TPalace_Doors, 0.50, true)
    call TriggerAddAction(gg_trg_System_TPalace_Doors, function Trig_System_TPalace_Doors_Actions)
endfunction

//===========================================================================
// Trigger: System Detect Leaver
//
// Events are set by the "System Create Events" Trigger
//===========================================================================
function Trig_System_Detect_Leaver_Func003Func005Func001C takes nothing returns boolean
    if ( not ( GetPlayerSlotState(GetEnumPlayer()) != PLAYER_SLOT_STATE_LEFT ) ) then
        return false
    endif
    if ( not ( GetEnumPlayer() != udg_GAME_MASTER ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(gg_unit_H00V_0359) == udg_GAME_MASTER ) ) then
        return false
    endif
    return true
endfunction

function Trig_System_Detect_Leaver_Func003Func005A takes nothing returns nothing
    if ( Trig_System_Detect_Leaver_Func003Func005Func001C() ) then
        call SetUnitOwner(gg_unit_H00V_0359, GetEnumPlayer(), false)
        // Since Cosmosis is no longer owned by GAME_MASTER, the conditions above will not be true again
    else
    endif
endfunction

function Trig_System_Detect_Leaver_Func003Func017C takes nothing returns boolean
    if ( not ( GetOwningPlayer(gg_unit_H00S_0141) != Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    return true
endfunction

function Trig_System_Detect_Leaver_Func003C takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_GAME_MASTER ) ) then
        return false
    endif
    return true
endfunction

function Trig_System_Detect_Leaver_Actions takes nothing returns nothing
    call DisplayTextToForce(GetPlayersAll(), ( GetPlayerName(GetTriggerPlayer()) + " has left the game. His units are now free to conquer." ))
    if ( Trig_System_Detect_Leaver_Func003C() ) then
        // Return Cosmosis to Titan in case he had been given to someone else
        call SetUnitOwner(gg_unit_H00V_0359, udg_GAME_MASTER, false)
        // Give Cosmosis to the first player that has not left the game yet
        call ForForce(GetPlayersAll(), function Trig_System_Detect_Leaver_Func003Func005A)
        // ------------------------
        // Make owner of Cosmosis the Game Master
        set udg_GAME_MASTER=GetOwningPlayer(gg_unit_H00V_0359)
        call DisplayTextToForce(GetPlayersAll(), ( "The Titan has left. " + ( GetPlayerName(udg_GAME_MASTER) + " is the new Titan." ) ))
        call SetUnitOwner(gg_unit_e00B_0405, udg_GAME_MASTER, false)
        call SetUnitOwner(gg_unit_e009_0407, udg_GAME_MASTER, false)
        call SetUnitOwner(gg_unit_e008_0406, udg_GAME_MASTER, false)
        call SetUnitOwner(gg_unit_e00D_0409, udg_GAME_MASTER, false)
        call SetUnitOwner(gg_unit_e00A_0411, udg_GAME_MASTER, false)
        call SetUnitOwner(gg_unit_e00C_0408, udg_GAME_MASTER, false)
        call SetUnitOwner(gg_unit_e007_0410, udg_GAME_MASTER, false)
        if ( Trig_System_Detect_Leaver_Func003Func017C() ) then
            call SetUnitOwner(gg_unit_H00S_0141, udg_GAME_MASTER, false)
        else
        endif
    else
    endif
endfunction

//===========================================================================
function InitTrig_System_Detect_Leaver takes nothing returns nothing
    set gg_trg_System_Detect_Leaver=CreateTrigger()
    call TriggerAddAction(gg_trg_System_Detect_Leaver, function Trig_System_Detect_Leaver_Actions)
endfunction

//===========================================================================
// Trigger: System Player Locations
//===========================================================================
function Trig_System_Player_Locations_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'e001' ) ) then
        return false
    endif
    return true
endfunction

function Trig_System_Player_Locations_Actions takes nothing returns nothing
    local integer l__udg_temp_integer
    set l__udg_temp_integer=GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))
    call RemoveLocation(udg_PLAYER_LOCATIONS[l__udg_temp_integer])
    set udg_PLAYER_LOCATIONS[l__udg_temp_integer]=GetUnitLoc(GetTriggerUnit())
endfunction

//===========================================================================
function InitTrig_System_Player_Locations takes nothing returns nothing
    set gg_trg_System_Player_Locations=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_System_Player_Locations, EVENT_PLAYER_UNIT_CONSTRUCT_START)
    call TriggerAddCondition(gg_trg_System_Player_Locations, Condition(function Trig_System_Player_Locations_Conditions))
    call TriggerAddAction(gg_trg_System_Player_Locations, function Trig_System_Player_Locations_Actions)
endfunction

//===========================================================================
// Trigger: System Give Potion to Hero
//===========================================================================
function Trig_System_Give_Potion_to_Hero_Conditions takes nothing returns boolean
    if ( not ( RectContainsUnit(gg_rct_Titan_Palace, GetSoldUnit()) == true ) ) then
        return false
    endif
    if ( not ( IsUnitType(GetSoldUnit(), UNIT_TYPE_HERO) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_System_Give_Potion_to_Hero_Actions takes nothing returns nothing
    call CreateItemLoc('I004', udg_PLAYER_LOCATIONS[1])
    call UnitAddItemSwapped(GetLastCreatedItem(), GetSoldUnit())
endfunction

//===========================================================================
function InitTrig_System_Give_Potion_to_Hero takes nothing returns nothing
    set gg_trg_System_Give_Potion_to_Hero=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_System_Give_Potion_to_Hero, EVENT_PLAYER_UNIT_SELL)
    call TriggerAddCondition(gg_trg_System_Give_Potion_to_Hero, Condition(function Trig_System_Give_Potion_to_Hero_Conditions))
    call TriggerAddAction(gg_trg_System_Give_Potion_to_Hero, function Trig_System_Give_Potion_to_Hero_Actions)
endfunction

//===========================================================================
// Trigger: System Cleanup Death
//
// Instant removal upon death + cleanup:
// -Decorations
// -Dummies
// -Deco Builders
// System_UnitHasBeenRemovedBool -> this variable is used by the System Cleanup UnitGroups trigger
//===========================================================================

function Trig_System_Cleanup_Death_Actions takes nothing returns boolean
    call LoP_onDeath(GetTriggerUnit())
    return false
endfunction

//===========================================================================
function InitTrig_System_Cleanup_Death takes nothing returns nothing
    set gg_trg_System_Cleanup_Death=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_System_Cleanup_Death, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_System_Cleanup_Death, Condition(function Trig_System_Cleanup_Death_Actions))
endfunction

//===========================================================================
// Trigger: System Cleanup Removal
//
// System_UnitHasBeenRemovedBool -> this variable is used by the System Cleanup UnitGroups trigger
//===========================================================================


function Trig_System_Cleanup_Removal_Conditions takes nothing returns boolean
    call LoP_onRemoval(udg_UDexUnits[udg_UDex])
    return false
endfunction


//===========================================================================
function InitTrig_System_Cleanup_Removal takes nothing returns nothing
    set gg_trg_System_Cleanup_Removal=CreateTrigger()
    call TriggerRegisterVariableEvent(gg_trg_System_Cleanup_Removal, "udg_UnitIndexEvent", EQUAL, 2.00)
    call TriggerAddCondition(gg_trg_System_Cleanup_Removal, Condition(function Trig_System_Cleanup_Removal_Conditions))
endfunction

//===========================================================================
// Trigger: System Cleanup Owner Change
//===========================================================================

function Trig_System_Cleanup_Owner_Change_Actions takes nothing returns nothing
    call LoP_onChangeOwner(GetTriggerUnit() , GetChangingUnitPrevOwner())
endfunction

//===========================================================================
function InitTrig_System_Cleanup_Owner_Change takes nothing returns nothing
    set gg_trg_System_Cleanup_Owner_Change=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_System_Cleanup_Owner_Change, EVENT_PLAYER_UNIT_CHANGE_OWNER)
    call TriggerAddAction(gg_trg_System_Cleanup_Owner_Change, function Trig_System_Cleanup_Owner_Change_Actions)
endfunction

//===========================================================================
// Trigger: System Cleanup UnitGroups
//
// Every 10 seconds, if a unit has been removed from the game (Detected by Cleanup Death and Cleanup Removal triggers), then this trigger will refresh all the player-specific Global groups, removing any units that have been removed from the game from those groups.
//===========================================================================

function Trig_System_Cleanup_UnitGroups_Actions takes nothing returns nothing
    local integer playerNumber

    if g_unitHasBeenRemoved then
        set playerNumber=1
        loop
        exitwhen playerNumber > bj_MAX_PLAYERS
            call GroupRefresh(udg_System_NeutralUnits[playerNumber - 1])
            call GroupRefresh(udg_Player_ControlGroup[playerNumber])
            set playerNumber=playerNumber + 1
        endloop
        
        // call GroupRefresh(udg_GUMS_LoopGroup) // Refreshing GUMS_LoopGroup should be unnecessary, since clearing unit data removes unit from GUMS_LoopGroup
        call GroupRefresh(udg_Abilities_AoRest_UnitGroup)
        set g_unitHasBeenRemoved=false
    endif
endfunction

//===========================================================================
function InitTrig_System_Cleanup_UnitGroups takes nothing returns nothing
    set gg_trg_System_Cleanup_UnitGroups=CreateTrigger()
    call TriggerRegisterTimerEventPeriodic(gg_trg_System_Cleanup_UnitGroups, 10.00)
    call TriggerAddAction(gg_trg_System_Cleanup_UnitGroups, function Trig_System_Cleanup_UnitGroups_Actions)
endfunction

//===========================================================================
// Trigger: System Cleanup Items
//===========================================================================

// scope LoPItemCleanup begins

// The timer will remove dead items from the game every few seconds. Set the value below to determine that period.
constant function LoPItemCleanup___CleaningPeriod takes nothing returns real
    return 15.00
endfunction

function LoPItemCleanup___DestroyDeadItems takes nothing returns nothing
    local timer t= GetExpiredTimer()
    local integer tKey= (GetHandleId((t))) // INLINED!!
    local integer aKey= (GetHandleId(((LoadTriggerHandle(ArrayAgent_hashTable, (tKey ), ( 0)))))) // INLINED!!
    local item my_Item
    local integer size= (LoadInteger(ArrayAgent_hashTable, (aKey ), ( 0))) // INLINED!!
    local integer i= 1
    
    loop
    exitwhen i > size
        set my_Item=(LoadItemHandle(ArrayAgent_hashTable, (aKey ), ( i))) // INLINED!!
        call SetWidgetLife(my_Item, 1)
        call RemoveItem(my_Item)
        set i=i + 1
    endloop
    
    call FlushChildHashtable(ArrayAgent_hashTable, (tKey)) // INLINED!!
    call FlushChildHashtable(ArrayAgent_hashTable, (aKey)) // INLINED!!
    call PauseTimer(t)
    call DestroyTimer(t)
    
    set t=null
    set my_Item=null
endfunction

function LoPItemCleanup___ForItem takes nothing returns nothing
    local integer aKey
    local integer size
    if GetWidgetLife(GetEnumItem()) == 0 then
        set aKey=(GetHandleId((GetTriggeringTrigger()))) // INLINED!!
        set size=(LoadInteger(ArrayAgent_hashTable, (aKey ), ( 0))) // INLINED!!
        call SaveAgentHandle(ArrayAgent_hashTable, (aKey ), ( size ), ( GetEnumItem())) // INLINED!!
        call SaveInteger(ArrayAgent_hashTable, (aKey ), ( 0 ), ( size + 1)) // INLINED!!
    endif
endfunction

function LoPItemCleanup___TrigActions takes nothing returns nothing
    local timer t
    local integer aKey= (GetHandleId((GetTriggeringTrigger()))) // INLINED!!
    
    call SaveInteger(ArrayAgent_hashTable, (aKey ), ( 0 ), ( 1)) // INLINED!!
    call EnumItemsInRect(udg_WholeMapRegion, null, function LoPItemCleanup___ForItem)
    
    if (LoadInteger(ArrayAgent_hashTable, (aKey ), ( 0))) > 1 then // INLINED!!
        set t=CreateTimer()
        call TimerStart(t, 1.5, false, function LoPItemCleanup___DestroyDeadItems)
        call SaveAgentHandle(ArrayAgent_hashTable, ((GetHandleId((t))) ), ( 0 ), ( GetTriggeringTrigger())) // INLINED!!
        set t=null
    else
        call FlushChildHashtable(ArrayAgent_hashTable, (aKey)) // INLINED!!
    endif
endfunction

function LoPItemCleanup___onInit takes nothing returns nothing
    local trigger trig= CreateTrigger()
    
    call TriggerRegisterTimerEvent(trig, (15.00), true) // INLINED!!
    call TriggerAddAction(trig, function LoPItemCleanup___TrigActions)
endfunction

// scope LoPItemCleanup ends


//===========================================================================
// Trigger: System Limit Register
//
// Removes created units from the game if they exceed the unit limits imposed by the Titan.
//===========================================================================
function Trig_System_Limit_Register_Conditions takes nothing returns boolean

    // A unit being dead here is unlikely, so it's better for performance to initialize the local
    local unit triggerUnit= udg_UDexUnits[udg_UDex]
    
    if udg_IsUnitAlive[udg_UDex] and not udg_IsUnitReincarnating[udg_UDex] then
        if ((GetOwningPlayer(triggerUnit)) != Player(PLAYER_NEUTRAL_PASSIVE)) and (not IsUnitType((triggerUnit), UNIT_TYPE_STRUCTURE)) then // INLINED!!
            call Limit_RegisterUnit(triggerUnit)
        endif
    endif

    set triggerUnit=null
    return false
endfunction

//===========================================================================
function InitTrig_System_Limit_Register takes nothing returns nothing
    set gg_trg_System_Limit_Register=CreateTrigger()
    call TriggerRegisterVariableEvent(gg_trg_System_Limit_Register, "udg_UnitIndexEvent", EQUAL, 1.00)
    call TriggerRegisterVariableEvent(gg_trg_System_Limit_Register, "udg_DeathEvent", EQUAL, 2.00)
    call TriggerAddCondition(gg_trg_System_Limit_Register, Condition(function Trig_System_Limit_Register_Conditions))
endfunction

//===========================================================================
// Trigger: System Limit Type Change
//
// This trigger is used when a unit changes from a unit type to another, changing its limit category (from a ground to a flying unit, for example)
//===========================================================================
function Trig_System_Limit_Type_Change_Conditions takes nothing returns boolean
    
    // A unit being dead here is unlikely, so it's better for performance to initialize the local
    local unit triggerUnit= udg_UDexUnits[udg_UDex]
    
    if udg_IsUnitAlive[udg_UDex] then
    
        if ((GetOwningPlayer(triggerUnit)) != Player(PLAYER_NEUTRAL_PASSIVE)) then // INLINED!!
        
            call Limit_UnregisterUnitEx((triggerUnit) , null) // INLINED!!
            
            if (not IsUnitType((triggerUnit), UNIT_TYPE_STRUCTURE)) then // INLINED!!
                call Limit_RegisterUnit(triggerUnit)
            endif
        endif
    endif

    set triggerUnit=null
    return false
endfunction

//===========================================================================
function InitTrig_System_Limit_Type_Change takes nothing returns nothing
    set gg_trg_System_Limit_Type_Change=CreateTrigger()
    call TriggerRegisterVariableEvent(gg_trg_System_Limit_Type_Change, "udg_UnitTypeEvent", EQUAL, 1.00)
    call TriggerAddCondition(gg_trg_System_Limit_Type_Change, Condition(function Trig_System_Limit_Type_Change_Conditions))
endfunction

//===========================================================================
// Trigger: System Titan Palace Item Prot
//
// 
//===========================================================================
//===========================================================================
// Configuration
//====================

// This is the Rect (GUI Region) which is protected by this trigger.
constant function System_ProtectedRect takes nothing returns rect
    return gg_rct_Titan_Palace_Inner
endfunction

// This is the rawcode of the item which allows units to bypass the protection and buy items.
constant function System_RUBY_KEY takes nothing returns integer
    return 'I008'
endfunction

//===========================================================================
// Code
//====================

// This code is supposed to impede units without a Ruby Key and who are not owned by the Titan
// to buy items from a shop inside of the protected rect.

// This system assumes that the shops in the Titan Palace are owned by Neutral Passive.

// The protection system is NOT supposed to be fired off very often. So, in order to optimize the
// code execution during the map, we will separate the condition from the action and optimize the
// conditions as much as possible.
function Trig_System_Titan_Palace_Item_Prot_Conditions takes nothing returns boolean
    local real x= GetUnitX(GetTriggerUnit())
    local real y= GetUnitY(GetTriggerUnit())

    // Since the Titan Palace is on the top-left of the map, these conditions are more likely true
    if ( x >= GetRectMaxX((gg_rct_Titan_Palace_Inner)) ) then // INLINED!!
        return false
    endif
    if ( y <= GetRectMinY((gg_rct_Titan_Palace_Inner)) ) then // INLINED!!
        return false
    endif
    // ------
    if ( x <= GetRectMinX((gg_rct_Titan_Palace_Inner)) ) then // INLINED!!
        return false
    endif

    if ( y >= GetRectMaxY((gg_rct_Titan_Palace_Inner)) ) then // INLINED!!
        return false
    endif
    // ------
    
    if GetOwningPlayer(GetBuyingUnit()) == udg_GAME_MASTER then
        return false
    endif
    
    if UnitHasItemOfTypeBJ(GetBuyingUnit(), ('I008')) then // INLINED!!
        return false
    endif
    
    return true
endfunction

function System_TPalaceProtection_Timer takes nothing returns nothing
    local timer t= GetExpiredTimer()
    local integer tId= (GetHandleId((t))) // INLINED!!
    local unit u= (LoadUnitHandle(ArrayAgent_hashTable, (tId ), ( 0))) // INLINED!!
    local item i= (LoadItemHandle(ArrayAgent_hashTable, (tId ), ( 1))) // INLINED!!
    
    call UnitRemoveItem(u, i)
    call RemoveItem(i)
    
    call PauseTimer(t)
    call DestroyTimer(t)
    call FlushChildHashtable(ArrayAgent_hashTable, (tId)) // INLINED!!
    
    set t=null
    set u=null
    set i=null
endfunction

function Trig_System_Titan_Palace_Item_Prot_Actions takes nothing returns nothing
    local timer t
    local integer tId
    local item i= GetSoldItem()

    if IsItemPowerup(i) then
        call RemoveItem(i)
    else
        set t=CreateTimer()
        call TimerStart(t, 0, false, function System_TPalaceProtection_Timer)
        set tId=(GetHandleId((t))) // INLINED!!
        call SaveAgentHandle(ArrayAgent_hashTable, (tId ), ( 0 ), ( GetBuyingUnit())) // INLINED!!
        call SaveAgentHandle(ArrayAgent_hashTable, (tId ), ( 1 ), ( i)) // INLINED!!
        
        set t=null
    endif
    
    call DisplayTextToPlayer(GetOwningPlayer(GetBuyingUnit()), 0., 0., "You cannot buy items while the Titan Palace is protected!")
    set i=null
endfunction

//===========================================================================
function InitTrig_System_Titan_Palace_Item_Prot takes nothing returns nothing
    set gg_trg_System_Titan_Palace_Item_Prot=CreateTrigger()
    call TriggerRegisterPlayerUnitEvent(gg_trg_System_Titan_Palace_Item_Prot, Player(PLAYER_NEUTRAL_PASSIVE), EVENT_PLAYER_UNIT_SELL_ITEM, null)
    call TriggerAddCondition(gg_trg_System_Titan_Palace_Item_Prot, Condition(function Trig_System_Titan_Palace_Item_Prot_Conditions))
    call TriggerAddAction(gg_trg_System_Titan_Palace_Item_Prot, function Trig_System_Titan_Palace_Item_Prot_Actions)
endfunction

//===========================================================================
// Trigger: System Titan Palace Prot
//===========================================================================
function Trig_System_Titan_Palace_Prot_Func002C takes nothing returns boolean
    if ( not ( UnitHasItemOfTypeBJ(GetEnteringUnit(), 'I008') == false ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetEnteringUnit()) != udg_GAME_MASTER ) ) then
        return false
    endif
    return true
endfunction

function Trig_System_Titan_Palace_Prot_Conditions takes nothing returns boolean
    if ( not Trig_System_Titan_Palace_Prot_Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_System_Titan_Palace_Prot_Actions takes nothing returns nothing
    local location l__udg_temp_point
    set l__udg_temp_point=GetRectCenter(gg_rct_Titan_Palace_Inner_Entrance)
    call SetUnitPositionLoc(GetTriggerUnit(), l__udg_temp_point)
    call RemoveLocation(l__udg_temp_point)
    set l__udg_temp_point=null
endfunction

//===========================================================================
function InitTrig_System_Titan_Palace_Prot takes nothing returns nothing
    set gg_trg_System_Titan_Palace_Prot=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_System_Titan_Palace_Prot, gg_rct_Titan_Palace_Inner)
    call TriggerAddCondition(gg_trg_System_Titan_Palace_Prot, Condition(function Trig_System_Titan_Palace_Prot_Conditions))
    call TriggerAddAction(gg_trg_System_Titan_Palace_Prot, function Trig_System_Titan_Palace_Prot_Actions)
endfunction

//===========================================================================
// Trigger: System Titan GiveUnit
//===========================================================================
function Trig_System_Titan_GiveUnit_Conditions takes nothing returns boolean
    if ( not ( GetTriggerUnit() != gg_unit_H00V_0359 ) ) then
        return false
    endif
    if ( not ( GetTriggerUnit() != gg_unit_H00S_0141 ) ) then
        return false
    endif
    return true
endfunction

function Trig_System_Titan_GiveUnit_Actions takes nothing returns nothing
    local player l__udg_temp_player= (LoadPlayerHandle(ConstTable___ht, ((((s__LoPInit_Globals_regionTable_impl)))), (GetHandleId(GetTriggeringRegion())))) // INLINED!!
    call SetUnitPositionLoc(GetTriggerUnit(), udg_PLAYER_LOCATIONS[GetConvertedPlayerId(l__udg_temp_player)])
    call SetUnitOwner(GetTriggerUnit(), l__udg_temp_player, true)
endfunction

//===========================================================================
function InitTrig_System_Titan_GiveUnit takes nothing returns nothing
    set gg_trg_System_Titan_GiveUnit=CreateTrigger()
    call TriggerAddCondition(gg_trg_System_Titan_GiveUnit, Condition(function Trig_System_Titan_GiveUnit_Conditions))
    call TriggerAddAction(gg_trg_System_Titan_GiveUnit, function Trig_System_Titan_GiveUnit_Actions)
endfunction

//===========================================================================
// Trigger: System Titan Powers
//===========================================================================
// scope POWER begins
    function POWER_INVULNERABILITY takes nothing returns unit
        return gg_unit_e00B_0405
    endfunction
    
    function POWER_VULNERABILITY takes nothing returns unit
        return gg_unit_e00A_0411
    endfunction
    
    function POWER_KILL takes nothing returns unit
        return gg_unit_e008_0406
    endfunction
    
    function POWER_LEVEL takes nothing returns unit
        return gg_unit_e009_0407
    endfunction
    
    function POWER_DELEVEL takes nothing returns unit
        return gg_unit_e00C_0408
    endfunction
    
    function POWER_MIND takes nothing returns unit
        return gg_unit_e00D_0409
    endfunction
    
    function POWER_REMOVE takes nothing returns unit
        return gg_unit_e007_0410
    endfunction
// scope POWER ends


// scope TitanPowers begins

function TitanPowers___GroupFilter takes nothing returns boolean
    if not RectContainsUnit(gg_rct_Titan_Palace, GetFilterUnit()) then
        call SetUnitOwner(GetFilterUnit(), udg_PowerSystem_Player, true)
    endif
    return false
endfunction

function TitanPowers___onOrder takes nothing returns boolean
    
    if GetIssuedOrderIdBJ() != String2OrderIdBJ("smart") then
        return false
    endif
    
    call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
    if GetTriggerUnit() == (gg_unit_e00D_0409) then // INLINED!!
        if udg_PowerSystem_allFlag then
            call GroupEnumUnitsOfPlayer(ENUM_GROUP, GetOwningPlayer(GetOrderTargetUnit()), Condition(function TitanPowers___GroupFilter))
            set udg_PowerSystem_allFlag=false
        else
            call SetUnitOwner(GetOrderTargetUnit(), udg_PowerSystem_Player, true)
        endif
    elseif GetTriggerUnit() == (gg_unit_e00B_0405) then // INLINED!!
            call SetUnitInvulnerable(GetOrderTargetUnit(), true)
    elseif GetTriggerUnit() == (gg_unit_e00A_0411) then // INLINED!!
            if not IsUnitInGroup(GetOrderTargetUnit(), udg_System_ProtectedGroup) then
                call SetUnitInvulnerable(GetOrderTargetUnit(), false)
            endif
    elseif GetTriggerUnit() == (gg_unit_e00C_0408) then // INLINED!!
            call UnitStripHeroLevel(GetOrderTargetUnit(), 1)
    elseif GetTriggerUnit() == (gg_unit_e009_0407) then // INLINED!!
            call SetHeroLevel(GetOrderTargetUnit(), GetHeroLevel(GetOrderTargetUnit()) + 1, false)
    elseif GetTriggerUnit() == (gg_unit_e008_0406) then // INLINED!!
        call LoP_KillUnit(GetOrderTargetUnit())
    elseif GetTriggerUnit() == (gg_unit_e007_0410) then // INLINED!!
        call LoP_RemoveUnit(GetOrderTargetUnit())
    endif
    
    return false
endfunction

//===========================================================================
function TitanPowers___onInit takes nothing returns nothing
    local trigger trig= CreateTrigger()
    call TriggerRegisterUnitEvent(trig, (gg_unit_e007_0410), EVENT_UNIT_ISSUED_TARGET_ORDER) // INLINED!!
    call TriggerRegisterUnitEvent(trig, (gg_unit_e008_0406), EVENT_UNIT_ISSUED_TARGET_ORDER) // INLINED!!
    call TriggerRegisterUnitEvent(trig, (gg_unit_e00C_0408), EVENT_UNIT_ISSUED_TARGET_ORDER) // INLINED!!
    call TriggerRegisterUnitEvent(trig, (gg_unit_e009_0407), EVENT_UNIT_ISSUED_TARGET_ORDER) // INLINED!!
    call TriggerRegisterUnitEvent(trig, (gg_unit_e00B_0405), EVENT_UNIT_ISSUED_TARGET_ORDER) // INLINED!!
    call TriggerRegisterUnitEvent(trig, (gg_unit_e00A_0411), EVENT_UNIT_ISSUED_TARGET_ORDER) // INLINED!!
    call TriggerRegisterUnitEvent(trig, (gg_unit_e00D_0409), EVENT_UNIT_ISSUED_TARGET_ORDER) // INLINED!!
    call TriggerAddCondition(trig, Condition(function TitanPowers___onOrder))
endfunction

// scope TitanPowers ends

//===========================================================================
// Trigger: System PreventSave Catch
//
// Thanks to TriggerHappy for this code
//===========================================================================
function Trig_System_PreventSave_Catch_Actions takes nothing returns nothing
    local integer l__udg_temp_integer
    local integer l__udg_temp_integer2= bj_MAX_PLAYERS
    call DisplayTextToForce(GetPlayersAll(), "Someone has attempted to save the game! Do NOT do this, for it can cause crashes!
Save aborted.")
    set l__udg_temp_integer=1
    loop
        exitwhen l__udg_temp_integer > l__udg_temp_integer2
        call DialogDisplayBJ(true, udg_PreventSave_Dialog, ConvertedPlayer(l__udg_temp_integer))
        set l__udg_temp_integer=l__udg_temp_integer + 1
    endloop
    call StartTimerBJ(udg_PreventSave_Timer, false, 0.00)
endfunction

//===========================================================================
function InitTrig_System_PreventSave_Catch takes nothing returns nothing
    set gg_trg_System_PreventSave_Catch=CreateTrigger()
    call TriggerRegisterGameSavedEventBJ(gg_trg_System_PreventSave_Catch)
    call TriggerAddAction(gg_trg_System_PreventSave_Catch, function Trig_System_PreventSave_Catch_Actions)
endfunction

//===========================================================================
// Trigger: System PreventSave Clear
//
// Thanks to TriggerHappy for this code
//===========================================================================
function Trig_System_PreventSave_Clear_Actions takes nothing returns nothing
    local integer l__udg_temp_integer
    local integer l__udg_temp_integer2= bj_MAX_PLAYERS
    set l__udg_temp_integer=1
    loop
        exitwhen l__udg_temp_integer > l__udg_temp_integer2
        call DialogDisplayBJ(false, udg_PreventSave_Dialog, ConvertedPlayer(l__udg_temp_integer))
        set l__udg_temp_integer=l__udg_temp_integer + 1
    endloop
endfunction

//===========================================================================
function InitTrig_System_PreventSave_Clear takes nothing returns nothing
    set gg_trg_System_PreventSave_Clear=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_System_PreventSave_Clear, udg_PreventSave_Timer)
    call TriggerAddAction(gg_trg_System_PreventSave_Clear, function Trig_System_PreventSave_Clear_Actions)
endfunction

//===========================================================================
// Trigger: Commands Set Color
//===========================================================================
function ForGroup_ChangeColor takes nothing returns nothing
    if (s__UnitVisuals_getColor((GetHandleId(((GetEnumUnit())))))) == "D" then // INLINED!!
        call SetUnitColor(GetEnumUnit(), (UnitVisualMods___I2PC[(udg_System_PlayerColor[GetPlayerId(GetTriggerPlayer()) + 1])])) // INLINED!!
    endif
endfunction

function Trig_Commands_Toggle_Autoname_Copy_Actions takes nothing returns nothing
    local integer color= Commands_GetChatMessagePlayerNumber((SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
    local group g= CreateGroup()
    local player p= GetTriggerPlayer()
    
    set udg_System_PlayerColor[GetPlayerId(p) + 1]=color
    
    call GroupEnumUnitsOfPlayer(g, p, null)
    call ForGroup(g, function ForGroup_ChangeColor)
    call DestroyGroup(g)
    set g=null
endfunction

//===========================================================================
function InitTrig_Commands_Set_Color takes nothing returns nothing
    set gg_trg_Commands_Set_Color=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Set_Color, function Trig_Commands_Toggle_Autoname_Copy_Actions)
endfunction

//===========================================================================
// Trigger: Commands Toggle Autoname
//===========================================================================
function Trig_Commands_Toggle_Autoname_Func001C takes nothing returns boolean
    if ( not ( udg_System_AutonameBoolean[GetConvertedPlayerId(GetTriggerPlayer())] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commands_Toggle_Autoname_Actions takes nothing returns nothing
    if ( Trig_Commands_Toggle_Autoname_Func001C() ) then
        set udg_System_AutonameBoolean[GetConvertedPlayerId(GetTriggerPlayer())]=false
        call DisplayTextToForce(udg_FORCES_PLAYER[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )], "Autoname has been disabled.")
    else
        set udg_System_AutonameBoolean[GetConvertedPlayerId(GetTriggerPlayer())]=true
        call DisplayTextToForce(udg_FORCES_PLAYER[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )], "Autoname has been enabled.")
    endif
endfunction

//===========================================================================
function InitTrig_Commands_Toggle_Autoname takes nothing returns nothing
    set gg_trg_Commands_Toggle_Autoname=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Toggle_Autoname, function Trig_Commands_Toggle_Autoname_Actions)
endfunction

//===========================================================================
// Trigger: Commands Name Unit
//===========================================================================
function Trig_Commands_Name_Unit_Func006A takes nothing returns nothing
    if ( GetOwningPlayer(GetEnumUnit()) == GetTriggerPlayer() ) then
        call GUMSSetUnitName(GetEnumUnit() , (SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
    else
        call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "This is not your unit!")
    endif
endfunction

function Trig_Commands_Name_Unit_Actions takes nothing returns nothing
    local group g= CreateGroup()
    call Commands_EnumSelectedCheckForGenerator(g , GetTriggerPlayer() , null)
    
    call ForGroup(g, function Trig_Commands_Name_Unit_Func006A)
    call DestroyGroup(g)
    set g=null
endfunction

//===========================================================================
function InitTrig_Commands_Name_Unit takes nothing returns nothing
    set gg_trg_Commands_Name_Unit=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Name_Unit, function Trig_Commands_Name_Unit_Actions)
endfunction

//===========================================================================
// Trigger: Commands Give
//===========================================================================
function Trig_Commands_Give_Func020A takes nothing returns nothing
    if GetOwningPlayer(GetEnumUnit()) == GetTriggerPlayer() or GetOwningPlayer(GetEnumUnit()) == udg_GAME_MASTER then
        if CheckCommandOverflow() then
            call IssueTargetOrder(gg_unit_e00D_0409, "smart", GetEnumUnit())
        endif
    else
        call DisplayTextToForce(udg_FORCES_PLAYER[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )], "This is not your unit.")
    endif
endfunction

function Trig_Commands_Give_Actions takes nothing returns nothing
    local group g= CreateGroup()
    local boolean storeAllFlag
    local integer playerNumber= Commands_GetChatMessagePlayerNumber((SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
    local player oldPlayer
    
    if PlayerNumberIsNotExtraOrVictim(playerNumber) and (SubString(GetEventPlayerChatString(), 0, StringLength(GetEventPlayerChatStringMatched())) == GetEventPlayerChatStringMatched()) then // INLINED!!
        if playerNumber != PLAYER_NEUTRAL_PASSIVE + 1 then
            set oldPlayer=udg_PowerSystem_Player
            set udg_PowerSystem_Player=ConvertedPlayer(playerNumber)
            // ---------------------------------------------
            // PICK SELECTED UNITS AND CHECK FOR RECT GENERATOR
            call Commands_EnumSelectedCheckForGenerator(g , GetTriggerPlayer() , null)
            // ---------------------------------------------
            set storeAllFlag=udg_PowerSystem_allFlag
            set udg_PowerSystem_allFlag=false
            // ---------------------------------------------
            set udg_Commands_Counter=0
            set udg_Commands_Counter_Max=1000
            call ForGroup(g, function Trig_Commands_Give_Func020A)
            set udg_PowerSystem_Player=oldPlayer
            // ---------------------------------------------
            set udg_PowerSystem_allFlag=storeAllFlag
            // ---------------------------------------------
        else
            call DisplayTextToForce(udg_FORCES_PLAYER[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )], "DO NOT use |c00ffff00-give|r command to give units to neutral passive. Please use the |c00ffff00-neut|r command! You will be able to take your units back with |c00ffff00-take|r or |c00ffff00-take all|r.")
        endif
    endif
    call DestroyGroup(g)
    set g=null
endfunction

//===========================================================================
function InitTrig_Commands_Give takes nothing returns nothing
    set gg_trg_Commands_Give=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Give, function Trig_Commands_Give_Actions)
endfunction//===========================================================================
// Trigger: Commands Deleteme
//===========================================================================
function GroupEnum_RemoveOutsidePalace takes nothing returns boolean
    if not RectContainsUnit(gg_rct_Titan_Palace, GetFilterUnit()) and (CheckCommandOverflow()) then // INLINED!!
        call LoP_RemoveUnit(GetFilterUnit())
    endif
    return false
endfunction

function Trig_Commands_Deleteme_Actions takes nothing returns nothing
    set udg_Commands_Counter=0
    set udg_Commands_Counter_Max=500
    call GroupEnumUnitsOfPlayer(ENUM_GROUP, GetTriggerPlayer(), Filter(function GroupEnum_RemoveOutsidePalace))
endfunction

//===========================================================================
function InitTrig_Commands_Deleteme takes nothing returns nothing
    set gg_trg_Commands_Deleteme=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Deleteme, function Trig_Commands_Deleteme_Actions)
endfunction

//===========================================================================
// Trigger: Commands Deco Spawn
//===========================================================================
//Checks the deco counter for the player. If any counter is 0, create the missing deco.
function Commands_CreateMissingDecos takes player whichPlayer returns nothing
    local integer playerNumber= GetPlayerId(whichPlayer) + 1
    local integer i= 0
    loop
    exitwhen i > udg_System_DecoTotal
        if LoadInteger(udg_Hashtable_2, playerNumber, udg_DecoUnitTypes[i]) == 0 then
            call CreateUnitAtLoc(whichPlayer, udg_DecoUnitTypes[i], udg_PLAYER_LOCATIONS[playerNumber], bj_UNIT_FACING)
        endif
        set i=i + 1
    endloop
endfunction

function Trig_Commands_Deco_Spawn_Actions takes nothing returns nothing
    call Commands_CreateMissingDecos(GetTriggerPlayer())
endfunction

//===========================================================================
function InitTrig_Commands_Deco_Spawn takes nothing returns nothing
    set gg_trg_Commands_Deco_Spawn=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Deco_Spawn, function Trig_Commands_Deco_Spawn_Actions)
endfunction

//===========================================================================
// Trigger: Commands Hide Decos
//===========================================================================
function Trig_Commands_Hide_Decos_Func005C takes nothing returns boolean
    if ( not ( GetEventPlayerChatString() == "-hide all" ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commands_Hide_Decos_Func006Func001Func002Func004C takes nothing returns boolean
    if ( ( GetUnitAbilityLevelSwapped('A0CA', GetEnumUnit()) != 0 ) ) then
        return true
    endif
    if ( ( GetUnitAbilityLevelSwapped('A0C9', GetEnumUnit()) != 0 ) ) then
        return true
    endif
    return false
endfunction

function Trig_Commands_Hide_Decos_Func006Func001Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetEnumUnit()) != 'e000' ) ) then
        return false
    endif
    if ( not ( GetUnitAbilityLevelSwapped('A0C7', GetEnumUnit()) == 0 ) ) then
        return false
    endif
    if ( not ( GetUnitAbilityLevelSwapped('A0C8', GetEnumUnit()) == 0 ) ) then
        return false
    endif
    if ( not Trig_Commands_Hide_Decos_Func006Func001Func002Func004C() ) then
        return false
    endif
    return true
endfunction

function Trig_Commands_Hide_Decos_Func006Func001C takes nothing returns boolean
    if ( not ( IsUnitType(GetEnumUnit(), UNIT_TYPE_PEON) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commands_Hide_Decos_Func006A takes nothing returns nothing
    if ( Trig_Commands_Hide_Decos_Func006Func001C() ) then
        if ( Trig_Commands_Hide_Decos_Func006Func001Func002C() ) then
            call ShowUnitHide(GetEnumUnit())
        else
        endif
    else
    endif
endfunction

function Trig_Commands_Hide_Decos_Actions takes nothing returns nothing
    local group l__udg_temp_group
    local integer genId
    local unit l__udg_temp_unit
    set l__udg_temp_group=CreateGroup()
    if ( Trig_Commands_Hide_Decos_Func005C() ) then
        // ------------
        // Don't use GUI Unit Group functions because they have handle reference leaks
        set l__udg_temp_group=CreateGroup()
        call GroupEnumUnitsOfPlayer(l__udg_temp_group, GetTriggerPlayer(), null)
        // ------------
    else
        // ---------------------------------------------
        // PICK SELECTED UNITS AND CHECK FOR RECT GENERATOR
        call Commands_EnumSelectedCheckForGenerator(l__udg_temp_group , GetTriggerPlayer() , null)
        // ---------------------------------------------
    endif
    call ForGroupBJ(l__udg_temp_group, function Trig_Commands_Hide_Decos_Func006A)
    call DestroyGroup(l__udg_temp_group)
    set l__udg_temp_group=null
    set l__udg_temp_unit=null
endfunction

//===========================================================================
function InitTrig_Commands_Hide_Decos takes nothing returns nothing
    set gg_trg_Commands_Hide_Decos=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Hide_Decos, function Trig_Commands_Hide_Decos_Actions)
endfunction

//===========================================================================
// Trigger: Commands Select Search
//===========================================================================
function StartsString takes string str,string subStr returns boolean
    local integer strSize= StringLength(str)
    local integer subStrSize= StringLength(subStr)
    local integer i= 0
    
    //If it's an empty string, return false as a convention
    if strSize == 0 or subStrSize == 0 then
        return false
    endif
    
    //Compare letter by letter until mismatch or end of string
    loop
    exitwhen i >= strSize or i >= subStrSize
        if SubString(str, i, i + 1) != SubString(subStr, i, i + 1) then
            return false //return false for mismatch
        else
        endif
        set i=i + 1
    endloop
    
    //No mismatches found, so return true
    return true
endfunction

function HasString takes string str,string subStr returns boolean
    local integer strSize= StringLength(str)
    local integer subStrSize= StringLength(subStr)
    local integer i= 0
    local integer j= 0
    
    // If it's an empty string, return false as a convention
    if strSize == 0 or subStrSize == 0 then
        return false
    endif
    
    // Compare letter by letter until we iterate over either string
    loop
    exitwhen i >= strSize or j >= subStrSize
        if SubString(str, i, i + 1) != SubString(subStr, j, j + 1) then
            set j=0 // Reset substring comparison
        else
            set j=j + 1
        endif
        set i=i + 1
    endloop
    
    // If we itared over the whole subStr, there is a match inside of str
    return j >= subStrSize
endfunction

function SearchSelectFilter takes nothing returns boolean
    local string str
    
    if IsUnitType(GetFilterUnit(), UNIT_TYPE_PEON) then
        //Get full unit name (Deco Builder/Modifier [Proper Name])
        set str=GetUnitName(GetFilterUnit())
        //Skip first word (Deco)
        set str=SubString(str, CutToCharacter(str , " ") + 1, StringLength(str))
        //Skip second word (Builder or Modifier)
        set str=SubString(str, CutToCharacter(str , " ") + 1, StringLength(str))
        //Use third word (the proper name that we want)
        set str=SubString(str, 0, CutToCharacter(str , " "))
        
        //Compare strings and Select Unit for local player only
        if StartsString(udg_System_searchStr , str) then //str == udg_System_searchStr then
            call ShowUnit(GetFilterUnit(), true)
            if GetLocalPlayer() == GetTriggerPlayer() then
                call SelectUnit(GetFilterUnit(), true)
            endif
        endif
    endif
    
    //Return false because this is a condition
    return false
endfunction

function SearchSelectMain takes nothing returns nothing
    local string str
    local string args= (SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString()))) // INLINED!!
    local integer argsLength= StringLength(args)
    
    //Check for (clear selection) tag
    if GetEventPlayerChatStringMatched() == "-seln " then
        if GetLocalPlayer() == GetTriggerPlayer() then
            call ClearSelection()
        endif
    endif
    
    if argsLength > 0 then
        //Make first letter capitalized
        set str=StringCase(SubString(args, 0, 1), true)
        
        //Make rest of the word uncapitalized and save to global variable
        set udg_System_searchStr=str + StringCase(SubString(args, 1, argsLength), false)
        call GroupEnumUnitsOfPlayer(ENUM_GROUP, GetTriggerPlayer(), Condition(function SearchSelectFilter))
    endif
endfunction

//===========================================================================
function InitTrig_Commands_Select_Search takes nothing returns nothing
    set gg_trg_Commands_Select_Search=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Select_Search, function SearchSelectMain)
endfunction

//===========================================================================
// Trigger: Commands Neutral
//===========================================================================

function LoP_GetPlayerNeutralUnits takes player whichPlayer returns group
    return udg_System_NeutralUnits[GetPlayerId(whichPlayer)]
endfunction

function LoP_IsUnitInPlayerNeutralUnits takes unit whichUnit,player whichPlayer returns boolean
    return false
endfunction

function LoP_GiveToNeutral takes unit whichUnit returns nothing
    call GroupAddUnit((udg_System_NeutralUnits[GetPlayerId((GetOwningPlayer(whichUnit)))]), whichUnit) // INLINED!!
    call SetUnitOwner(whichUnit, Player(PLAYER_NEUTRAL_PASSIVE), false)
endfunction

function LoP_TakeFromNeutral takes unit whichUnit returns nothing

endfunction

function Trig_Commands_Neutral_Func010Func002A takes nothing returns nothing
    if GetOwningPlayer(GetEnumUnit()) == GetTriggerPlayer() then
        if (GetUnitAbilityLevel((GetEnumUnit()), 'A0C6') > 0) then // INLINED!!
            if CheckCommandOverflow() then
                call LoP_GiveToNeutral(GetEnumUnit())
            endif
        endif
    // Elseif not in neutral units
    endif
endfunction

function Trig_Commands_Neutral_Func010Func003A takes nothing returns nothing
    if ( GetOwningPlayer(GetEnumUnit()) == GetTriggerPlayer() ) then
        if CheckCommandOverflow() then
            call LoP_GiveToNeutral(GetEnumUnit())
        endif
    else
        call DisplayTextToForce(udg_FORCES_PLAYER[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )], "This is not your unit.")
    endif
endfunction

function Trig_Commands_Neutral_Actions takes nothing returns nothing
    local group l__udg_temp_group= CreateGroup()
    local integer genId
    local unit l__udg_temp_unit
    // ---------------------------------------------
    // PICK SELECTED UNITS AND CHECK FOR RECT GENERATOR
    call Commands_EnumSelectedCheckForGenerator(l__udg_temp_group , GetTriggerPlayer() , null)
    // ---------------------------------------------
    set udg_Commands_Counter=0
    set udg_Commands_Counter_Max=2000
    if ( GetEventPlayerChatString() == "-neut decos" ) then
        call ForGroup(l__udg_temp_group, function Trig_Commands_Neutral_Func010Func002A)
    else
        call ForGroup(l__udg_temp_group, function Trig_Commands_Neutral_Func010Func003A)
    endif
    call DestroyGroup(l__udg_temp_group)
    set l__udg_temp_group=null
    set l__udg_temp_unit=null
endfunction

//===========================================================================
function InitTrig_Commands_Neutral takes nothing returns nothing
    set gg_trg_Commands_Neutral=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Neutral, function Trig_Commands_Neutral_Actions)
endfunction

//===========================================================================
// Trigger: Commands Take
//===========================================================================
function Trig_Commands_Take_Func004Func009Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    if ( not ( IsUnitInGroup(GetEnumUnit(), udg_System_NeutralUnits[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )]) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commands_Take_Func004Func009A takes nothing returns nothing
    if ( Trig_Commands_Take_Func004Func009Func001C() ) then
        if CheckCommandOverflow() then
        call SetUnitOwner(GetEnumUnit(), GetTriggerPlayer(), false)
        call GroupRemoveUnitSimple(GetEnumUnit(), udg_System_NeutralUnits[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )])
        endif
    else
        call DisplayTextToForce(udg_FORCES_PLAYER[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )], "Error occured while retrieving unit.")
    endif
endfunction

function Trig_Commands_Take_Func004Func013Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commands_Take_Func004Func013A takes nothing returns nothing
    if ( Trig_Commands_Take_Func004Func013Func001C() ) then
        call SetUnitOwner(GetEnumUnit(), GetTriggerPlayer(), false)
        call GroupRemoveUnitSimple(GetEnumUnit(), udg_System_NeutralUnits[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )])
    else
        call DisplayTextToForce(udg_FORCES_PLAYER[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )], "Error occured while retrieving unit.")
    endif
endfunction

function Trig_Commands_Take_Func004C takes nothing returns boolean
    if ( not ( GetEventPlayerChatString() == "-take" ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commands_Take_Actions takes nothing returns nothing
    local group l__udg_temp_group
    local integer genId
    local unit l__udg_temp_unit
    if ( Trig_Commands_Take_Func004C() ) then
        set l__udg_temp_group=CreateGroup()
        // ---------------------------------------------
        // PICK SELECTED UNITS AND CHECK FOR RECT GENERATOR
        call Commands_EnumSelectedCheckForGenerator(l__udg_temp_group , GetTriggerPlayer() , null)
        // ---------------------------------------------
        set udg_Commands_Counter=0
        set udg_Commands_Counter_Max=2000
        call ForGroupBJ(l__udg_temp_group, function Trig_Commands_Take_Func004Func009A)
        call DestroyGroup(l__udg_temp_group)
        set l__udg_temp_group=null
        set l__udg_temp_unit=null
    else
        call ForGroupBJ(udg_System_NeutralUnits[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )], function Trig_Commands_Take_Func004Func013A)
    endif
endfunction

//===========================================================================
function InitTrig_Commands_Take takes nothing returns nothing
    set gg_trg_Commands_Take=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Take, function Trig_Commands_Take_Actions)
endfunction

//===========================================================================
// Trigger: Commands Copy
//
// You are attempting to copy too many units.
// Max: 500
//===========================================================================
function Trig_Commands_Copy_Func016A takes nothing returns nothing
    call GUMSCopyUnit(GetEnumUnit() , GetTriggerPlayer() , 0)
endfunction

function Trig_Commands_Copy_Actions takes nothing returns nothing
    local group g= CreateGroup()
    local boolean destroyGrp= true

    call GroupEnumUnitsSelected(g, GetTriggerPlayer(), null)

    if (HaveSavedHandle(UserDefinedRects___hashTable, (GetHandleId((FirstOfGroup(g)))), (6))) then // INLINED!!
        set destroyGrp=false
        call DestroyGroup(g)
        set g=(LoadGroupHandle(UserDefinedRects___hashTable, (GetHandleId((FirstOfGroup(g)))), (6))) // INLINED!!
    endif

    call GroupRemoveGroup(udg_System_ProtectedGroup, g)
    if CountUnitsInGroup(g) < 500 then
        call ForGroupBJ(g, function Trig_Commands_Copy_Func016A)
    else
        call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "You are attempting to copy too many units.\nMax: 500")
    endif
    
    if destroyGrp then
        call DestroyGroup(g)
    endif
    set g=null
endfunction

//===========================================================================
function InitTrig_Commands_Copy takes nothing returns nothing
    set gg_trg_Commands_Copy=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Copy, function Trig_Commands_Copy_Actions)
endfunction

//===========================================================================
// Trigger: Commands Remove Kill
//===========================================================================
function FilterUnitsKill takes nothing returns boolean
    if GetTriggerPlayer() == udg_GAME_MASTER or GetOwningPlayer(GetFilterUnit()) == GetTriggerPlayer() then
        call LoP_KillUnit(GetFilterUnit())
    endif
    return false
endfunction

function FilterUnitsRemove takes nothing returns boolean
    if GetTriggerPlayer() == udg_GAME_MASTER or GetOwningPlayer(GetFilterUnit()) == GetTriggerPlayer() then
        call LoP_RemoveUnit(GetFilterUnit())
    endif
    return false
endfunction

function Trig_Commands_Remove_Kill_Actions takes nothing returns nothing
    if ( GetEventPlayerChatString() == "-kill" ) then
        call GroupEnumUnitsSelected(ENUM_GROUP, GetTriggerPlayer(), Condition(function FilterUnitsKill))
    else
        call GroupEnumUnitsSelected(ENUM_GROUP, GetTriggerPlayer(), Condition(function FilterUnitsRemove))
    endif
endfunction

//===========================================================================
function InitTrig_Commands_Remove_Kill takes nothing returns nothing
    set gg_trg_Commands_Remove_Kill=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Remove_Kill, function Trig_Commands_Remove_Kill_Actions)
endfunction

//===========================================================================
// Trigger: Commands StartRectCamera
//
// This trigger contains commands for:
// -Spawning a Wandering Soul
// -Spawning a Rect Generator
// -Camera adjustments
//===========================================================================
function Trig_Commands_StartRectCamera_Func005Func003Func003Func003Func003Func003C takes nothing returns boolean
    if ( not ( GetEventPlayerChatStringMatched() == "-pitch " ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commands_StartRectCamera_Func005Func003Func003Func003Func003C takes nothing returns boolean
    if ( not ( GetEventPlayerChatStringMatched() == "-roll " ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commands_StartRectCamera_Func005Func003Func003Func003C takes nothing returns boolean
    if ( not ( GetEventPlayerChatStringMatched() == "-rotate " ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commands_StartRectCamera_Func005Func003Func003C takes nothing returns boolean
    if ( not ( GetEventPlayerChatStringMatched() == "-zoom " ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commands_StartRectCamera_Func005Func003C takes nothing returns boolean
    if ( not ( GetEventPlayerChatString() == "-start" ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commands_StartRectCamera_Func005C takes nothing returns boolean
    if ( not ( GetEventPlayerChatString() == "-rect" ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commands_StartRectCamera_Actions takes nothing returns nothing
    local real l__udg_temp_real= S2R((SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
    if not (SubString(GetEventPlayerChatString(), 0, StringLength(GetEventPlayerChatStringMatched())) == GetEventPlayerChatStringMatched()) then // INLINED!!
    return
    endif
    if ( Trig_Commands_StartRectCamera_Func005C() ) then
        call CreateNUnitsAtLoc(1, 'udr0', GetTriggerPlayer(), udg_PLAYER_LOCATIONS[GetConvertedPlayerId(GetTriggerPlayer())], bj_UNIT_FACING)
    else
        if ( Trig_Commands_StartRectCamera_Func005Func003C() ) then
            call CreateNUnitsAtLoc(1, 'e000', GetTriggerPlayer(), udg_PLAYER_LOCATIONS[GetConvertedPlayerId(GetTriggerPlayer())], bj_UNIT_FACING)
        else
            if ( Trig_Commands_StartRectCamera_Func005Func003Func003C() ) then
                call SetCameraFieldForPlayer(GetTriggerPlayer(), CAMERA_FIELD_TARGET_DISTANCE, l__udg_temp_real, 0)
            else
                if ( Trig_Commands_StartRectCamera_Func005Func003Func003Func003C() ) then
                    call SetCameraFieldForPlayer(GetTriggerPlayer(), CAMERA_FIELD_ROTATION, l__udg_temp_real, 0)
                else
                    if ( Trig_Commands_StartRectCamera_Func005Func003Func003Func003Func003C() ) then
                        call SetCameraFieldForPlayer(GetTriggerPlayer(), CAMERA_FIELD_ROLL, l__udg_temp_real, 0)
                    else
                        if ( Trig_Commands_StartRectCamera_Func005Func003Func003Func003Func003Func003C() ) then
                            call SetCameraFieldForPlayer(GetTriggerPlayer(), CAMERA_FIELD_ANGLE_OF_ATTACK, l__udg_temp_real, 0)
                        else
                        endif
                    endif
                endif
            endif
        endif
    endif
endfunction

//===========================================================================
function InitTrig_Commands_StartRectCamera takes nothing returns nothing
    set gg_trg_Commands_StartRectCamera=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_StartRectCamera, function Trig_Commands_StartRectCamera_Actions)
endfunction

//===========================================================================
// Trigger: Commands Set Alliance
//===========================================================================
function Trig_Commands_Share_Actions takes nothing returns nothing
    local integer i
    local integer allianceState
    
    if not (SubString(GetEventPlayerChatString(), 0, StringLength(GetEventPlayerChatStringMatched())) == GetEventPlayerChatStringMatched()) then // INLINED!!
        return
    endif
    
    if GetEventPlayerChatStringMatched() == "-ally " then
        set allianceState=bj_ALLIANCE_ALLIED_VISION
    elseif GetEventPlayerChatStringMatched() == "-unally " then
        set allianceState=bj_ALLIANCE_UNALLIED
    else
        set allianceState=bj_ALLIANCE_ALLIED_ADVUNITS
    endif
    
    if ( (SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString()))) == "all" ) then // INLINED!!
        set i=0
        loop
        exitwhen i >= bj_MAX_PLAYERS
            call SetPlayerAllianceStateBJ(GetTriggerPlayer(), Player(i), allianceState)
            set i=i + 1
        endloop
    else
        set i=Commands_GetChatMessagePlayerNumber((SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
        if PlayerNumberIsNotNeutral(i) then
            call SetPlayerAllianceStateBJ(GetTriggerPlayer(), ConvertedPlayer(i), allianceState)
        endif
    endif
endfunction

//===========================================================================
function InitTrig_Commands_Set_Alliance takes nothing returns nothing
    set gg_trg_Commands_Set_Alliance=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Set_Alliance, function Trig_Commands_Share_Actions)
endfunction

//===========================================================================
// Trigger: Commands Set Name
//===========================================================================
function Trig_Commands_Set_Name_Actions takes nothing returns nothing
    if (SubString(GetEventPlayerChatString(), 0, StringLength(GetEventPlayerChatStringMatched())) == GetEventPlayerChatStringMatched()) then // INLINED!!
        call SetPlayerName(GetTriggerPlayer(), (SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
    endif
endfunction

//===========================================================================
function InitTrig_Commands_Set_Name takes nothing returns nothing
    set gg_trg_Commands_Set_Name=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Set_Name, function Trig_Commands_Set_Name_Actions)
endfunction

//===========================================================================
// Trigger: Commands Real Name
//===========================================================================
function Trig_Commands_Real_Name_Actions takes nothing returns nothing
    local integer playerId
    if (SubString(GetEventPlayerChatString(), 0, StringLength(GetEventPlayerChatStringMatched())) == GetEventPlayerChatStringMatched()) then // INLINED!!
        set playerId=Commands_GetChatMessagePlayerNumber((SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
        if PlayerNumberIsNotNeutral(playerId) then
            call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "This player's real name is : " + udg_RealNames[playerId])
        endif
    endif
endfunction

//===========================================================================
function InitTrig_Commands_Real_Name takes nothing returns nothing
    set gg_trg_Commands_Real_Name=CreateTrigger()
    call TriggerAddAction(gg_trg_Commands_Real_Name, function Trig_Commands_Real_Name_Actions)
endfunction

//===========================================================================
// Trigger: CommandsR Toggle Prot
//===========================================================================
function Trig_CommandsR_Toggle_Prot_Conditions takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_GAME_MASTER ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsR_Toggle_Prot_Func002C takes nothing returns boolean
    if ( not ( IsTriggerEnabled(gg_trg_System_Titan_Palace_Prot) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsR_Toggle_Prot_Actions takes nothing returns nothing
    if ( Trig_CommandsR_Toggle_Prot_Func002C() ) then
        call DisplayTextToForce(GetPlayersAll(), "Titan Palace Protection has been disabled.")
        call DisableTrigger(gg_trg_System_Titan_Palace_Prot)
        call DisableTrigger(gg_trg_System_Titan_Palace_Item_Prot)
    else
        call DisplayTextToForce(GetPlayersAll(), "Titan Palace Protection has been enabled.")
        call EnableTrigger(gg_trg_System_Titan_Palace_Prot)
        call EnableTrigger(gg_trg_System_Titan_Palace_Item_Prot)
    endif
endfunction

//===========================================================================
function InitTrig_CommandsR_Toggle_Prot takes nothing returns nothing
    set gg_trg_CommandsR_Toggle_Prot=CreateTrigger()
    call TriggerAddCondition(gg_trg_CommandsR_Toggle_Prot, Condition(function Trig_CommandsR_Toggle_Prot_Conditions))
    call TriggerAddAction(gg_trg_CommandsR_Toggle_Prot, function Trig_CommandsR_Toggle_Prot_Actions)
endfunction

//===========================================================================
// Trigger: CommandsR Make Titan
//===========================================================================
function Trig_CommandsR_Make_Titan_Func001C takes nothing returns boolean
    if ( ( GetTriggerPlayer() == udg_GAME_MASTER ) ) then
        return true
    endif
    if ( ( GetTriggerPlayer() == Player(0) ) ) then
        return true
    endif
    return false
endfunction

function Trig_CommandsR_Make_Titan_Conditions takes nothing returns boolean
    if ( not Trig_CommandsR_Make_Titan_Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsR_Make_Titan_Func008Func003C takes nothing returns boolean
    if ( not ( GetOwningPlayer(gg_unit_H00S_0141) != Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsR_Make_Titan_Func008C takes nothing returns boolean
    if ( not ( GetPlayerSlotState(udg_GAME_MASTER) == PLAYER_SLOT_STATE_PLAYING ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsR_Make_Titan_Actions takes nothing returns nothing
    local integer l__udg_temp_integer
    set l__udg_temp_integer=Commands_GetChatMessagePlayerNumber((SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
    if not PlayerNumberIsNotNeutral(l__udg_temp_integer) then
    return
    endif
    set udg_GAME_MASTER=ConvertedPlayer(l__udg_temp_integer)
    if ( Trig_CommandsR_Make_Titan_Func008C() ) then
        call SetUnitOwner(gg_unit_H00V_0359, udg_GAME_MASTER, false)
        if ( Trig_CommandsR_Make_Titan_Func008Func003C() ) then
            call SetUnitOwner(gg_unit_H00S_0141, udg_GAME_MASTER, false)
        else
        endif
        call SetUnitOwner(gg_unit_e00B_0405, udg_GAME_MASTER, false)
        call SetUnitOwner(gg_unit_e009_0407, udg_GAME_MASTER, false)
        call SetUnitOwner(gg_unit_e008_0406, udg_GAME_MASTER, false)
        call SetUnitOwner(gg_unit_e00D_0409, udg_GAME_MASTER, false)
        call SetUnitOwner(gg_unit_e00A_0411, udg_GAME_MASTER, false)
        call SetUnitOwner(gg_unit_e00C_0408, udg_GAME_MASTER, false)
        call SetUnitOwner(gg_unit_e007_0410, udg_GAME_MASTER, false)
    else
        set udg_GAME_MASTER=GetTriggerPlayer()
        call DisplayTextToForce(udg_FORCES_PLAYER[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )], "There is no player currently playing in this slot!")
    endif
endfunction

//===========================================================================
function InitTrig_CommandsR_Make_Titan takes nothing returns nothing
    set gg_trg_CommandsR_Make_Titan=CreateTrigger()
    call TriggerAddCondition(gg_trg_CommandsR_Make_Titan, Condition(function Trig_CommandsR_Make_Titan_Conditions))
    call TriggerAddAction(gg_trg_CommandsR_Make_Titan, function Trig_CommandsR_Make_Titan_Actions)
endfunction

//===========================================================================
// Trigger: CommandsR Set Limits for Units
//===========================================================================
function Trig_CommandsR_Set_Limits_for_Units_Conditions takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_GAME_MASTER ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsR_Set_Limits_for_Units_Func002Func004Func004C takes nothing returns boolean
    if ( not ( SubStringBJ(GetEventPlayerChatString(), 1, 9) == "-limit g " ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsR_Set_Limits_for_Units_Func002Func004C takes nothing returns boolean
    if ( not ( SubStringBJ(GetEventPlayerChatString(), 1, 9) == "-limit a " ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsR_Set_Limits_for_Units_Func002C takes nothing returns boolean
    if ( not ( SubStringBJ(GetEventPlayerChatString(), 1, 9) == "-limit p " ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsR_Set_Limits_for_Units_Actions takes nothing returns nothing
    if ( Trig_CommandsR_Set_Limits_for_Units_Func002C() ) then
        set udg_System_PArmyLimit[3]=S2I(SubStringBJ(GetEventPlayerChatString(), 10, 13))
        call DisplayTextToForce(GetPlayersAll(), "Passive Limit changed")
    else
        if ( Trig_CommandsR_Set_Limits_for_Units_Func002Func004C() ) then
            set udg_System_PArmyLimit[2]=S2I(SubStringBJ(GetEventPlayerChatString(), 10, 13))
            call DisplayTextToForce(GetPlayersAll(), "Air Limit changed")
        else
            if ( Trig_CommandsR_Set_Limits_for_Units_Func002Func004Func004C() ) then
                set udg_System_PArmyLimit[1]=S2I(SubStringBJ(GetEventPlayerChatString(), 10, 13))
                call DisplayTextToForce(GetPlayersAll(), "Ground Limit changed")
            else
            endif
        endif
    endif
endfunction

//===========================================================================
function InitTrig_CommandsR_Set_Limits_for_Units takes nothing returns nothing
    set gg_trg_CommandsR_Set_Limits_for_Units=CreateTrigger()
    call TriggerAddCondition(gg_trg_CommandsR_Set_Limits_for_Units, Condition(function Trig_CommandsR_Set_Limits_for_Units_Conditions))
    call TriggerAddAction(gg_trg_CommandsR_Set_Limits_for_Units, function Trig_CommandsR_Set_Limits_for_Units_Actions)
endfunction

//===========================================================================
// Trigger: CommandsR Delete
//===========================================================================
function Trig_CommandsR_Delete_Func018A takes nothing returns nothing
    if not RectContainsUnit(gg_rct_Titan_Palace, GetEnumUnit()) and (CheckCommandOverflow()) then // INLINED!!
        call LoP_RemoveUnit(GetEnumUnit())
    endif
endfunction

function Trig_CommandsR_Delete_Conditions takes nothing returns boolean
    local integer playerNumber= Commands_GetChatMessagePlayerNumber((SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
    // --------------
    // DON'T ALLOW DELETION OF THE OWNER OF THE GDS DUMMIES
    if not PlayerNumberIsNotExtraOrVictim(playerNumber) or GetTriggerPlayer() != udg_GAME_MASTER then
        return false
    endif
    
    set udg_Commands_Counter=0
    set udg_Commands_Counter_Max=500
    if ( GetEventPlayerChatStringMatched() == "-delneu " ) then
        call ForGroup(udg_System_NeutralUnits[( playerNumber - 1 )], function Trig_CommandsR_Delete_Func018A)
        // Don't clear neutral group, protected units might be in it. Let automatic refresh take care of this.
    else
        call GroupEnumUnitsOfPlayer(ENUM_GROUP, Player(playerNumber - 1), Condition(function GroupEnum_RemoveOutsidePalace))
    endif
    
    return false
endfunction

//===========================================================================
function InitTrig_CommandsR_Delete takes nothing returns nothing
    set gg_trg_CommandsR_Delete=CreateTrigger()
    call TriggerAddCondition(gg_trg_CommandsR_Delete, Condition(function Trig_CommandsR_Delete_Conditions))
endfunction

//===========================================================================
// Trigger: CommandsR Fog
//
// -fog 
//===========================================================================
function Trig_CommandsR_Fog_Conditions takes nothing returns boolean
    local string chatStr= (SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString()))) // INLINED!!
    local integer style
    local real zStart
    local real zEnd
    local real red
    local real green
    local real blue
    local real density
    local integer cutToComma
    
    if GetTriggerPlayer() != udg_GAME_MASTER and not (SubString(GetEventPlayerChatString(), 0, StringLength(GetEventPlayerChatStringMatched())) == GetEventPlayerChatStringMatched()) then // INLINED!!
        return false
    endif
    
    set cutToComma=CutToCharacter(chatStr , " ")
    set style=S2I((SubString((chatStr ), 0, ( cutToComma)))) // INLINED!!
    set chatStr=CutToCommaShorten(chatStr , cutToComma)
    
    set cutToComma=CutToCharacter(chatStr , " ")
    set zStart=S2R((SubString((chatStr ), 0, ( cutToComma)))) // INLINED!!
    set chatStr=CutToCommaShorten(chatStr , cutToComma)
    
    set cutToComma=CutToCharacter(chatStr , " ")
    set zEnd=S2R((SubString((chatStr ), 0, ( cutToComma)))) // INLINED!!
    set chatStr=CutToCommaShorten(chatStr , cutToComma)
    
    set cutToComma=CutToCharacter(chatStr , " ")
    set red=S2R((SubString((chatStr ), 0, ( cutToComma)))) // INLINED!!
    set chatStr=CutToCommaShorten(chatStr , cutToComma)
    
    set cutToComma=CutToCharacter(chatStr , " ")
    set green=S2R((SubString((chatStr ), 0, ( cutToComma)))) // INLINED!!
    set chatStr=CutToCommaShorten(chatStr , cutToComma)
    
    set cutToComma=CutToCharacter(chatStr , " ")
    set blue=S2R((SubString((chatStr ), 0, ( cutToComma)))) // INLINED!!
    set chatStr=CutToCommaShorten(chatStr , cutToComma)
    
    set density=S2R(SubString(chatStr, 0, StringLength(chatStr) + 1))
    
    call SetTerrainFogExBJ(style, zStart, zEnd, density, red, green, blue)
    return false
endfunction

//===========================================================================
function InitTrig_CommandsR_Fog takes nothing returns nothing
    set gg_trg_CommandsR_Fog=CreateTrigger()
    call TriggerAddCondition(gg_trg_CommandsR_Fog, Condition(function Trig_CommandsR_Fog_Conditions))
endfunction

//===========================================================================
// Trigger: CommandsR Water Color
//
// -water red,green,blue,alpha
//===========================================================================
function Trig_CommandsR_Water_Color_Conditions takes nothing returns boolean
    local string chatStr= (SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString()))) // INLINED!!
    local real red
    local real green
    local real blue
    local real trans
    local integer cutToComma
    
    if GetTriggerPlayer() != udg_GAME_MASTER and not (SubString(GetEventPlayerChatString(), 0, StringLength(GetEventPlayerChatStringMatched())) == GetEventPlayerChatStringMatched()) then // INLINED!!
        return false
    endif
    
    set cutToComma=CutToCharacter(chatStr , " ")
    set red=S2R((SubString((chatStr ), 0, ( cutToComma)))) // INLINED!!
    set chatStr=CutToCommaShorten(chatStr , cutToComma)
    
    set cutToComma=CutToCharacter(chatStr , " ")
    set green=S2R((SubString((chatStr ), 0, ( cutToComma)))) // INLINED!!
    set chatStr=CutToCommaShorten(chatStr , cutToComma)
    
    set cutToComma=CutToCharacter(chatStr , " ")
    set blue=S2R((SubString((chatStr ), 0, ( cutToComma)))) // INLINED!!
    set chatStr=CutToCommaShorten(chatStr , cutToComma)
    
    set trans=S2R(SubString(chatStr, 0, StringLength(chatStr) + 1))
    
    call SetWaterBaseColorBJ(red, green, blue, trans)
    return false
endfunction

//===========================================================================
function InitTrig_CommandsR_Water_Color takes nothing returns nothing
    set gg_trg_CommandsR_Water_Color=CreateTrigger()
    call TriggerAddCondition(gg_trg_CommandsR_Water_Color, Condition(function Trig_CommandsR_Water_Color_Conditions))
endfunction

//===========================================================================
// Trigger: CommandsR Mind
//===========================================================================
function Trig_CommandsR_Mind_Conditions takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_GAME_MASTER ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsR_Mind_Func004Func004A takes nothing returns nothing
    call IssueTargetOrder(gg_unit_e00D_0409, "smart", GetEnumUnit())
endfunction

function Trig_CommandsR_Mind_Func004C takes nothing returns boolean
    if ( not ( GetEventPlayerChatString() == "'mind" ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsR_Mind_Func005Func002C takes nothing returns boolean
    if ( not ( udg_PowerSystem_allFlag == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsR_Mind_Func005C takes nothing returns boolean
    if ( not ( GetEventPlayerChatString() == "-mind" ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsR_Mind_Actions takes nothing returns nothing
    local integer l__udg_temp_integer
    local group l__udg_temp_group
    if ( Trig_CommandsR_Mind_Func004C() ) then
        set l__udg_temp_group=CreateGroup()
        call GroupEnumUnitsSelected(l__udg_temp_group, GetTriggerPlayer(), null)
        call ForGroupBJ(l__udg_temp_group, function Trig_CommandsR_Mind_Func004Func004A)
        call DestroyGroup(l__udg_temp_group)
        set l__udg_temp_group=null
    else
    endif
    if ( Trig_CommandsR_Mind_Func005C() ) then
        if ( Trig_CommandsR_Mind_Func005Func002C() ) then
            call DisplayTextToForce(GetPlayersAll(), "Flagged Mind power to change ownership of target unit ONLY.")
            set udg_PowerSystem_allFlag=false
        else
            call DisplayTextToForce(GetPlayersAll(), "Flagged Mind power to change ownership of ALL units owned by owner of target unit.")
            set udg_PowerSystem_allFlag=true
        endif
    else
        set l__udg_temp_integer=Commands_GetChatMessagePlayerNumber((SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
        if PlayerNumberIsNotExtraOrVictim(l__udg_temp_integer) then
        set udg_PowerSystem_Player=ConvertedPlayer(l__udg_temp_integer)
        call SetUnitColor(gg_unit_e00D_0409, GetPlayerColor(udg_PowerSystem_Player))
        endif
    endif
endfunction

//===========================================================================
function InitTrig_CommandsR_Mind takes nothing returns nothing
    set gg_trg_CommandsR_Mind=CreateTrigger()
    call TriggerAddCondition(gg_trg_CommandsR_Mind, Condition(function Trig_CommandsR_Mind_Conditions))
    call TriggerAddAction(gg_trg_CommandsR_Mind, function Trig_CommandsR_Mind_Actions)
endfunction

//===========================================================================
// Trigger: CommandsR Kick
//
// hey hacker, ur fucking my work hope you drop dead and i'll laugh on your funeral
//===========================================================================
function Trig_CommandsR_Kick_Conditions takes nothing returns boolean
    local integer playerNumber= Commands_GetChatMessagePlayerNumber((SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
    
    if (SubString(GetEventPlayerChatString(), 0, StringLength(GetEventPlayerChatStringMatched())) == GetEventPlayerChatStringMatched()) and GetTriggerPlayer() == udg_GAME_MASTER then // INLINED!!
        if PlayerNumberIsNotNeutral(playerNumber) then
            call CustomDefeatBJ(ConvertedPlayer(playerNumber), "You were kicked!")
        endif
    endif
    
    return false
endfunction

//===========================================================================
function InitTrig_CommandsR_Kick takes nothing returns nothing
    set gg_trg_CommandsR_Kick=CreateTrigger()
    call TriggerAddCondition(gg_trg_CommandsR_Kick, Condition(function Trig_CommandsR_Kick_Conditions))
endfunction

//===========================================================================
// Trigger: CommandsR The Creator
//===========================================================================
function Trig_CommandsR_The_Creator_Conditions takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_GAME_MASTER ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsR_The_Creator_Actions takes nothing returns nothing
    call ShowUnitShow(gg_unit_H00S_0141)
    call SetUnitOwner(gg_unit_H00S_0141, udg_GAME_MASTER, false)
    call SetHeroLevelBJ(gg_unit_H00S_0141, 100, false)
    call UnitAddItemByIdSwapped('I00N', gg_unit_H00S_0141)
    call UnitAddItemByIdSwapped('I00O', gg_unit_H00S_0141)
    call DisableTrigger(GetTriggeringTrigger())
endfunction

//===========================================================================
function InitTrig_CommandsR_The_Creator takes nothing returns nothing
    set gg_trg_CommandsR_The_Creator=CreateTrigger()
    call TriggerAddCondition(gg_trg_CommandsR_The_Creator, Condition(function Trig_CommandsR_The_Creator_Conditions))
    call TriggerAddAction(gg_trg_CommandsR_The_Creator, function Trig_CommandsR_The_Creator_Actions)
endfunction

//===========================================================================
// Trigger: CommandsR Toggle Dmg Tags
//===========================================================================
function Trig_CommandsR_Enable_Dmg_Tags_Conditions takes nothing returns boolean
    if GetTriggerPlayer() == udg_GAME_MASTER then
        set ENABLE_TAGS=not ENABLE_TAGS
    endif
    return false
endfunction

//===========================================================================
function InitTrig_CommandsR_Toggle_Dmg_Tags takes nothing returns nothing
    set gg_trg_CommandsR_Toggle_Dmg_Tags=CreateTrigger()
    call TriggerAddCondition(gg_trg_CommandsR_Toggle_Dmg_Tags, Condition(function Trig_CommandsR_Enable_Dmg_Tags_Conditions))
endfunction

//===========================================================================
// Trigger: CommandsD Control
//===========================================================================
function Trig_CommandsD_Control_Func006Func002Func004Func001Func002C takes nothing returns boolean
    if ( ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return true
    endif
    if ( ( IsUnitInGroup(GetEnumUnit(), udg_System_NeutralUnits[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )]) == false ) ) then
        return true
    endif
    return false
endfunction

function Trig_CommandsD_Control_Func006Func002Func004Func001Func004C takes nothing returns boolean
    if ( not ( IsUnitInGroup(GetEnumUnit(), udg_Player_ControlGroup[GetConvertedPlayerId(GetTriggerPlayer())]) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsD_Control_Func006Func002Func004Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) != GetTriggerPlayer() ) ) then
        return false
    endif
    if ( not Trig_CommandsD_Control_Func006Func002Func004Func001Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsD_Control_Func006Func002Func004A takes nothing returns nothing
    if ( Trig_CommandsD_Control_Func006Func002Func004Func001C() ) then
        return
    else
        if ( Trig_CommandsD_Control_Func006Func002Func004Func001Func004C() ) then
            if CheckCommandOverflow() then
            call GroupAddUnitSimple(GetEnumUnit(), udg_Player_ControlGroup[GetConvertedPlayerId(GetTriggerPlayer())])
            endif
        else
        endif
    endif
endfunction

function Trig_CommandsD_Control_Func006Func002C takes nothing returns boolean
    if ( not ( CountUnitsInGroup(udg_Player_ControlGroup[GetConvertedPlayerId(GetTriggerPlayer())]) <= 500 ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsD_Control_Func006Func003Func002A takes nothing returns nothing
    call GroupRemoveUnitSimple(GetEnumUnit(), udg_Player_ControlGroup[GetConvertedPlayerId(GetTriggerPlayer())])
endfunction

function Trig_CommandsD_Control_Func006Func003C takes nothing returns boolean
    if ( not ( GetEventPlayerChatString() == "-uncontrol" ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsD_Control_Func006C takes nothing returns boolean
    if ( not ( GetEventPlayerChatString() == "-control" ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsD_Control_Actions takes nothing returns nothing
    local group l__udg_temp_group= CreateGroup()
    // ---------------------------------------------
    // PICK SELECTED UNITS AND CHECK FOR RECT GENERATOR
    call Commands_EnumSelectedCheckForGenerator(l__udg_temp_group , GetTriggerPlayer() , null)
    // ---------------------------------------------
    if ( Trig_CommandsD_Control_Func006C() ) then
        if ( Trig_CommandsD_Control_Func006Func002C() ) then
            set udg_Commands_Counter=0
            set udg_Commands_Counter_Max=500
            call ForGroupBJ(l__udg_temp_group, function Trig_CommandsD_Control_Func006Func002Func004A)
        else
            call DisplayTextToForce(udg_FORCES_PLAYER[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )], "You already have too many units in your Controller Group.
Max: 500")
        endif
    else
        if ( Trig_CommandsD_Control_Func006Func003C() ) then
            call ForGroupBJ(l__udg_temp_group, function Trig_CommandsD_Control_Func006Func003Func002A)
        else
            call GroupClear(udg_Player_ControlGroup[GetConvertedPlayerId(GetTriggerPlayer())])
        endif
    endif
    call DestroyGroup(l__udg_temp_group)
    set l__udg_temp_group=null
endfunction

//===========================================================================
function InitTrig_CommandsD_Control takes nothing returns nothing
    set gg_trg_CommandsD_Control=CreateTrigger()
    call TriggerAddAction(gg_trg_CommandsD_Control, function Trig_CommandsD_Control_Actions)
endfunction

//===========================================================================
// Trigger: CommandsD Set AoE
//===========================================================================
constant function MAX_VAL_SIZE takes nothing returns integer
    return 10
endfunction


function Trig_CommandsD_Set_AoE_Actions takes nothing returns nothing
    local integer value
    
    if (SubString(GetEventPlayerChatString(), 0, StringLength(GetEventPlayerChatStringMatched())) == GetEventPlayerChatStringMatched()) then // INLINED!!
        set value=S2I((SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
        
        if value < (10) then // INLINED!!
            set udg_DecoSystem_Value[GetPlayerId(GetTriggerPlayer()) + 1]=value
        else
            set udg_DecoSystem_Value[GetPlayerId(GetTriggerPlayer()) + 1]=(10) // INLINED!!
        endif
    endif
endfunction

//===========================================================================
function InitTrig_CommandsD_Set_AoE takes nothing returns nothing
    set gg_trg_CommandsD_Set_AoE=CreateTrigger()
    call TriggerAddAction(gg_trg_CommandsD_Set_AoE, function Trig_CommandsD_Set_AoE_Actions)
endfunction

//===========================================================================
// Trigger: CommandsD Set Tree Space
//===========================================================================
function Trig_CommandsD_Set_Tree_Space_Actions takes nothing returns nothing
    local real l__udg_temp_real= S2R((SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
    set udg_TreeSystem_Space[GetConvertedPlayerId(GetTriggerPlayer())]=l__udg_temp_real
endfunction

//===========================================================================
function InitTrig_CommandsD_Set_Tree_Space takes nothing returns nothing
    set gg_trg_CommandsD_Set_Tree_Space=CreateTrigger()
    call TriggerAddAction(gg_trg_CommandsD_Set_Tree_Space, function Trig_CommandsD_Set_Tree_Space_Actions)
endfunction

//===========================================================================
// Trigger: CommandsD Set Parameters
//
// (sorry for the if chain)
//===========================================================================
function Trig_CommandsD_Set_Parameters_Actions takes nothing returns nothing
    local string command= GetEventPlayerChatStringMatched()
    local player trigPlayer= GetTriggerPlayer()
    local integer playerNumber= GetPlayerId(trigPlayer) + 1
    local string args= (SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString()))) // INLINED!!
    
    if command == "-size " then
        call DisplayTextToPlayer(trigPlayer, 0, 0, "Size Set")
        set udg_DecoSystem_Scale[playerNumber]=RMinBJ(S2R(args), 2000.)
    elseif command == "-face " then
        call DisplayTextToPlayer(trigPlayer, 0, 0, "Facing Set")
        set udg_DecoSystem_Facing[playerNumber]=S2R(args)
    elseif command == "-fly " then
        call DisplayTextToPlayer(trigPlayer, 0, 0, "Fly Height Set")
        set udg_DecoSystem_Height[playerNumber]=RMinBJ(S2R(args), 10000.)
    elseif command == "-anim " then
        call DisplayTextToPlayer(trigPlayer, 0, 0, "Animation Set")
        set udg_DecoSystem_Anims[playerNumber]=args
    elseif command == "-speed " then
        call DisplayTextToPlayer(trigPlayer, 0, 0, "Animation Speed Set")
        set udg_DecoSystem_animSpeed[playerNumber]=RMinBJ(S2R(args), 2000.)
    elseif command == "-grid " then
        set udg_System_DecoGrid[playerNumber]=S2R(args)
    elseif command == "-color " then
        set udg_DecoSystem_PlayerColor[playerNumber]=Commands_GetChatMessagePlayerNumber(args)
    endif
endfunction

//===========================================================================
function InitTrig_CommandsD_Set_Parameters takes nothing returns nothing
    set gg_trg_CommandsD_Set_Parameters=CreateTrigger()
    call TriggerAddAction(gg_trg_CommandsD_Set_Parameters, function Trig_CommandsD_Set_Parameters_Actions)
endfunction

//===========================================================================
// Trigger: CommandsD Set RGB
//===========================================================================
function ColorSystem_Set_RGB_Actions takes nothing returns nothing
    local string input= SubString(GetEventPlayerChatString(), 5, StringLength(GetEventPlayerChatString())) + ","
    local string output
    local integer pN= GetPlayerId(GetTriggerPlayer()) + 1
    local integer red= CutToCharacter(input , " ")
    local integer green
    local integer blue
    local integer alpha
    set output=SubString(input, 0, red)
    set udg_ColorSystem_Red[pN]=S2R(output)
    
    set input=SubString(input, red + 1, ( StringLength(input) + 1 ))
    set green=CutToCharacter(input , " ")
    set output=SubString(input, 0, green)
    set udg_ColorSystem_Green[pN]=S2R(output)

    set input=SubString(input, green + 1, StringLength(input))
    set blue=CutToCharacter(input , " ")
    set output=SubString(input, 0, blue)
    set udg_ColorSystem_Blue[pN]=S2R(output)

    set input=SubString(input, blue + 1, StringLength(input))
    set alpha=CutToCharacter(input , " ")
    set output=SubString(input, 0, alpha)
    set udg_ColorSystem_Alpha[pN]=S2R(output)
    
    //call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "RGBT has been set to: " + R2S(udg_ColorSystem_Red[pN])+ " "+ R2S(udg_ColorSystem_Green[pN])+ " "+ R2S(udg_ColorSystem_Blue[pN])+ " "+ R2S(udg_ColorSystem_Alpha[pN]) + " ")
    call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "RGBT has been set")
endfunction

//===========================================================================
function InitTrig_CommandsD_Set_RGB takes nothing returns nothing
    local integer i= 0
    set gg_trg_CommandsD_Set_RGB=CreateTrigger()
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_CommandsD_Set_RGB, Player(i), "-rgb ", false)
    set i=i + 1
    endloop
    call TriggerAddAction(gg_trg_CommandsD_Set_RGB, function ColorSystem_Set_RGB_Actions)
endfunction

//===========================================================================
// Trigger: CommandsD Unit Mods
//
// Check if unit is Deco Special so this trigger is not run for every unit that casts a ability
//===========================================================================
function Trig_CommandsD_Unit_Mods_Copy_Func009A takes nothing returns nothing
    local player trigPlayer= GetTriggerPlayer()
    local string command
    local string args
    local integer playerNumber
    local unit enumUnit
    
    if not (SubString(GetEventPlayerChatString(), 0, StringLength(GetEventPlayerChatStringMatched())) == GetEventPlayerChatStringMatched()) then // INLINED!!
        return
    endif
    
    if ( not LoP_PlayerOwnsUnit(trigPlayer , GetEnumUnit()) ) then
        call DisplayTextToPlayer(trigPlayer, 0, 0, "This is not your unit!")
        return
    endif
    
    set args=(SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString()))) // INLINED!!
    
    if args != "" then
        if SubString(args, 0, 1) != " " then
            call DisplayTextToPlayer(trigPlayer, 0, 0, "Arguments must be passed after a space!")
            return
        else
            set args=SubString(args, 1, StringLength(args))
        endif
    endif
    
    set enumUnit=GetEnumUnit()
    set playerNumber=GetPlayerId(trigPlayer) + 1
    set command=GetEventPlayerChatStringMatched()

    if ( command == "'size" ) then
        if args == "" then
            call GUMSSetUnitScale(enumUnit , udg_DecoSystem_Scale[playerNumber] / 100)
        else
            call GUMSSetUnitScale(enumUnit , S2R(args) / 100)
        endif
    elseif ( command == "'fly" ) then
        if args == "" then
            call GUMSSetUnitFlyHeight(enumUnit , udg_DecoSystem_Height[playerNumber])
        else
            call GUMSSetUnitFlyHeight(enumUnit , S2R(args))
        endif
    elseif ( command == "'face" ) then
        if args == "" then
            call GUMSSetUnitFacing(enumUnit , udg_DecoSystem_Facing[playerNumber])
        else
            call GUMSSetUnitFacing(enumUnit , S2R(args))
        endif
    elseif ( command == "'rgb" ) then
        if args == "" then
            call GUMSSetUnitVertexColor(enumUnit , udg_ColorSystem_Red[playerNumber] , udg_ColorSystem_Green[playerNumber] , udg_ColorSystem_Blue[playerNumber] , udg_ColorSystem_Alpha[playerNumber])
        else
            call GUMSSetUnitVertexColorString(enumUnit , args , " ")
        endif
    elseif ( command == "'anim" ) then
        if args == "" then
            call SetUnitAnimation(enumUnit, udg_DecoSystem_Anims[playerNumber])
        else
            call SetUnitAnimation(enumUnit, args)
        endif
    elseif ( command == "'speed" ) then
        if args == "" then
            call GUMSSetUnitAnimSpeed(enumUnit , udg_DecoSystem_animSpeed[playerNumber] / 100)
        else
            call GUMSSetUnitAnimSpeed(enumUnit , S2R(args) / 100)
        endif
    elseif ( command == "'color" ) then
        if args == "" then
            call GUMSSetUnitColor(enumUnit , udg_DecoSystem_PlayerColor[playerNumber])
        else
            call GUMSSetUnitColor(enumUnit , Commands_GetChatMessagePlayerNumber(args))
        endif
    endif
    
    set enumUnit=null
endfunction

function Trig_CommandsD_Unit_Mods_Copy_Actions takes nothing returns nothing
    local group l__udg_temp_group
    local integer genId
    local unit enumUnit
    set l__udg_temp_group=CreateGroup()
    // ---------------------------------------------
    // PICK SELECTED UNITS AND CHECK FOR RECT GENERATOR
    call Commands_EnumSelectedCheckForGenerator(l__udg_temp_group , GetTriggerPlayer() , null)
    // ---------------------------------------------
    call ForGroup(l__udg_temp_group, function Trig_CommandsD_Unit_Mods_Copy_Func009A)
    call DestroyGroup(l__udg_temp_group)
    set l__udg_temp_group=null
    set enumUnit=null
endfunction

//===========================================================================
function InitTrig_CommandsD_Unit_Mods takes nothing returns nothing
    set gg_trg_CommandsD_Unit_Mods=CreateTrigger()
    call TriggerAddAction(gg_trg_CommandsD_Unit_Mods, function Trig_CommandsD_Unit_Mods_Copy_Actions)
endfunction

//===========================================================================
// Trigger: CommandsD Add Tag
//===========================================================================
function Trig_CommandsD_Add_Tag_Func008A takes nothing returns nothing
    if not LoP_PlayerOwnsUnit(GetTriggerPlayer() , GetEnumUnit()) then
        call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "This is not your unit.")
    else
        call GUMSAddUnitAnimationTag(GetEnumUnit() , (SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
    endif
endfunction

function Trig_CommandsD_Add_Tag_Actions takes nothing returns nothing
    local group g= CreateGroup()
    
    if (SubString(GetEventPlayerChatString(), 0, StringLength(GetEventPlayerChatStringMatched())) == GetEventPlayerChatStringMatched()) then // INLINED!!
        call Commands_EnumSelectedCheckForGenerator(g , GetTriggerPlayer() , null)
        call ForGroup(g, function Trig_CommandsD_Add_Tag_Func008A)
        
        call DestroyGroup(g)
    endif

    set g=null
endfunction

//===========================================================================
function InitTrig_CommandsD_Add_Tag takes nothing returns nothing
    set gg_trg_CommandsD_Add_Tag=CreateTrigger()
    call TriggerAddAction(gg_trg_CommandsD_Add_Tag, function Trig_CommandsD_Add_Tag_Actions)
endfunction

//===========================================================================
// Trigger: CommandsD Locust
//
// Only decorations may have be unselectable.
// This is not your unit.
//===========================================================================
function Trig_CommandsD_Locust_Func011A takes nothing returns nothing
    if not (GetUnitAbilityLevel((GetEnumUnit()), 'A0C6') > 0) then // INLINED!!
        call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "Only decorations may have be unselectable.")
    elseif not LoP_PlayerOwnsUnit(GetTriggerPlayer() , GetEnumUnit()) then
        call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "This is not your unit.")
    elseif CheckCommandOverflow() then
        call GUMSMakeUnitUnSelectable(GetEnumUnit())
    endif
endfunction

function Trig_CommandsD_Locust_Actions takes nothing returns nothing
    local group l__udg_temp_group= CreateGroup()

    call Commands_EnumSelectedCheckForGenerator(l__udg_temp_group , GetTriggerPlayer() , null)
    set udg_Commands_Counter=0
    set udg_Commands_Counter_Max=500
    call ForGroup(l__udg_temp_group, function Trig_CommandsD_Locust_Func011A)
    
    call DestroyGroup(l__udg_temp_group)
    set l__udg_temp_group=null
endfunction

//===========================================================================
function InitTrig_CommandsD_Locust takes nothing returns nothing
    set gg_trg_CommandsD_Locust=CreateTrigger()
    // call TriggerRegisterPlayerChatEvent( gg_trg_CommandsD_Locust, Player(0), "-select drag", true )
    call TriggerAddAction(gg_trg_CommandsD_Locust, function Trig_CommandsD_Locust_Actions)
endfunction

//===========================================================================
// Trigger: CommandsD Variation
//===========================================================================
function Trig_CommandsD_Variation_Func006Func003C takes nothing returns boolean
    if ( not ( udg_TileSystem_Var[GetConvertedPlayerId(GetTriggerPlayer())] > 17 ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsD_Variation_Func006C takes nothing returns boolean
    if ( not ( udg_TileSystem_Var[GetConvertedPlayerId(GetTriggerPlayer())] < 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommandsD_Variation_Actions takes nothing returns nothing
    local integer l__udg_temp_integer= S2I((SubString(GetEventPlayerChatString(), StringLength(GetEventPlayerChatStringMatched()), StringLength(GetEventPlayerChatString())))) // INLINED!!
    if not (SubString(GetEventPlayerChatString(), 0, StringLength(GetEventPlayerChatStringMatched())) == GetEventPlayerChatStringMatched()) then // INLINED!!
    return
    endif
    set udg_TileSystem_Var[GetConvertedPlayerId(GetTriggerPlayer())]=l__udg_temp_integer
    if ( Trig_CommandsD_Variation_Func006C() ) then
        set udg_TileSystem_Var[GetConvertedPlayerId(GetTriggerPlayer())]=- 1
    else
        if ( Trig_CommandsD_Variation_Func006Func003C() ) then
            set udg_TileSystem_Var[GetConvertedPlayerId(GetTriggerPlayer())]=17
        else
        endif
    endif
endfunction

//===========================================================================
function InitTrig_CommandsD_Variation takes nothing returns nothing
    set gg_trg_CommandsD_Variation=CreateTrigger()
    call TriggerAddAction(gg_trg_CommandsD_Variation, function Trig_CommandsD_Variation_Actions)
endfunction

//===========================================================================
// Trigger: DecoBuilder Movement
//
// This also controls flying and teleportation for non-deco builders
//===========================================================================
function Trig_DecoBuilder_Movement_Conditions takes nothing returns boolean
    if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_PEON) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_DecoBuilder_Movement_Func005C takes nothing returns boolean
    if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("smart") ) ) then
        return false
    endif
    if ( not ( GetUnitAbilityLevelSwapped('A0CA', GetTriggerUnit()) != 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_DecoBuilder_Movement_Func006Func006Func006Func004C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0CA' ) ) then
        return false
    endif
    return true
endfunction

function Trig_DecoBuilder_Movement_Func006Func006Func006C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0C9' ) ) then
        return false
    endif
    return true
endfunction

function Trig_DecoBuilder_Movement_Func006Func006C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0C8' ) ) then
        return false
    endif
    return true
endfunction

function Trig_DecoBuilder_Movement_Func006C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0C7' ) ) then
        return false
    endif
    return true
endfunction

function Trig_DecoBuilder_Movement_Actions takes nothing returns nothing
    local location l__udg_temp_point
    if ( Trig_DecoBuilder_Movement_Func005C() ) then
        set l__udg_temp_point=GetOrderPointLoc()
        call SetUnitPositionLoc(GetTriggerUnit(), l__udg_temp_point)
        call RemoveLocation(l__udg_temp_point)
        set l__udg_temp_point=null
    else
    endif
    if ( Trig_DecoBuilder_Movement_Func006C() ) then
        call SetUnitPathing(GetTriggerUnit(), false)
        call SetUnitMoveSpeed(GetTriggerUnit(), 522.00)
        call UnitRemoveAbilityBJ('A0C7', GetTriggerUnit())
        call UnitAddAbilityBJ('A0C8', GetTriggerUnit())
    else
        if ( Trig_DecoBuilder_Movement_Func006Func006C() ) then
            call SetUnitPathing(GetTriggerUnit(), true)
            call SetUnitMoveSpeed(GetTriggerUnit(), GetUnitDefaultMoveSpeed(GetTriggerUnit()))
            call UnitRemoveAbilityBJ('A0C8', GetTriggerUnit())
            call UnitAddAbilityBJ('A0C7', GetTriggerUnit())
        else
            if ( Trig_DecoBuilder_Movement_Func006Func006Func006C() ) then
                call UnitRemoveAbilityBJ('A0C9', GetTriggerUnit())
                call UnitAddAbilityBJ('A0CA', GetTriggerUnit())
            else
                if ( Trig_DecoBuilder_Movement_Func006Func006Func006Func004C() ) then
                    call UnitRemoveAbilityBJ('A0CA', GetTriggerUnit())
                    call UnitAddAbilityBJ('A0C9', GetTriggerUnit())
                else
                endif
            endif
        endif
    endif
endfunction

//===========================================================================
function InitTrig_DecoBuilder_Movement takes nothing returns nothing
    set gg_trg_DecoBuilder_Movement=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_DecoBuilder_Movement, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerRegisterAnyUnitEventBJ(gg_trg_DecoBuilder_Movement, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)
    call TriggerAddCondition(gg_trg_DecoBuilder_Movement, Condition(function Trig_DecoBuilder_Movement_Conditions))
    call TriggerAddAction(gg_trg_DecoBuilder_Movement, function Trig_DecoBuilder_Movement_Actions)
endfunction

//===========================================================================
// Trigger: DecoBuilder Increase Count
//
// This trigger increase the counter of the deco builder unit type for a player when a deco builder owned by that player enters the map area.
// The Deco Counter is used for the -decos commands, to check if the player has deco builders of each type in play. The counter is decreased by the System Cleanup Death trigger.
//===========================================================================
function Trig_DecoBuilder_Increase_Count_Conditions takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A00J', udg_UDexUnits[udg_UDex]) > 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_DecoBuilder_Increase_Count_Actions takes nothing returns nothing
    local unit u= udg_UDexUnits[udg_UDex]
    local integer playerNumber= GetPlayerId(GetOwningPlayer(u)) + 1
    local integer unitType= GetUnitTypeId(u)
    call SaveInteger(udg_Hashtable_2, playerNumber, unitType, LoadInteger(udg_Hashtable_2, playerNumber, unitType) + 1)
    set u=null
endfunction

//===========================================================================
function InitTrig_DecoBuilder_Increase_Count takes nothing returns nothing
    set gg_trg_DecoBuilder_Increase_Count=CreateTrigger()
    call TriggerRegisterVariableEvent(gg_trg_DecoBuilder_Increase_Count, "udg_UnitIndexEvent", EQUAL, 1.00)
    call TriggerRegisterVariableEvent(gg_trg_DecoBuilder_Increase_Count, "udg_DeathEvent", EQUAL, 2.00)
    call TriggerAddCondition(gg_trg_DecoBuilder_Increase_Count, Condition(function Trig_DecoBuilder_Increase_Count_Conditions))
    call TriggerAddAction(gg_trg_DecoBuilder_Increase_Count, function Trig_DecoBuilder_Increase_Count_Actions)
endfunction

//===========================================================================
// Trigger: DecoBuilder RangedBuild
//===========================================================================
function InstaBuildTimer takes nothing returns nothing
    local timer t= GetExpiredTimer()
    local integer tId= GetHandleId(t)
    local unit u= LoadUnitHandle(udg_Hashtable_1, tId, 0)
    call IssueImmediateOrder(u, "stop")
    call PauseTimer(t)
    call DestroyTimer(t)
    call FlushChildHashtable(udg_Hashtable_1, tId)
    
    set t=null
    set u=null
endfunction

function Trig_Deco_RangedBuild_Actions takes nothing returns nothing
    local unit u= GetTriggerUnit()
    local timer t= CreateTimer()
    local integer builtUnitType= GetIssuedOrderId()
    
    if not IsUnitIdType(builtUnitType, UNIT_TYPE_MECHANICAL) or ( GetUnitAbilityLevel(u, 'A0C7') != 0 ) or ( GetUnitAbilityLevel(u, 'A0C8') != 0 ) or ( GetUnitAbilityLevel(u, 'A0CA') == 0 ) then
        return
    endif
    
    call CreateUnit(GetOwningPlayer(u), builtUnitType, GetOrderPointX(), GetOrderPointY(), bj_UNIT_FACING)
    
    // Can't instantly order the builder to stop, must start a timer
    call TimerStart(t, 0, false, function InstaBuildTimer)
    call SaveUnitHandle(udg_Hashtable_1, GetHandleId(t), 0, u)
    

    set t=null
    set u=null
endfunction

//===========================================================================
function InitTrig_DecoBuilder_RangedBuild takes nothing returns nothing
    set gg_trg_DecoBuilder_RangedBuild=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_DecoBuilder_RangedBuild, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)
    call TriggerAddAction(gg_trg_DecoBuilder_RangedBuild, function Trig_Deco_RangedBuild_Actions)
endfunction



    //set udg_System_ConstructingUnit = u
    //set udg_System_ConstructingUnitX = GetUnitX(u)
    //set udg_System_ConstructingUnitY = GetUnitY(u)
    //call SetUnitX(GetTriggerUnit(),GetOrderPointX())
    //call SetUnitY(GetTriggerUnit(),GetOrderPointY())
//===========================================================================
// Trigger: DecoBuilder Cast Ability
//===========================================================================
// scope DecoModAbils begins

    function DecoModAbils___PlayerNumber takes unit whichUnit returns integer
        return GetPlayerId(GetOwningPlayer(whichUnit)) + 1
    endfunction

    function DecoModAbils_Trig_DecoSystem_Cast_Ability_Conditions takes nothing returns boolean
        local unit trigU= GetTriggerUnit()
        local integer spellId= GetSpellAbilityId()
        local player owner= GetOwningPlayer(trigU)
        local integer playerNumber= GetPlayerId(owner) + 1
        local unit targetU= GetSpellTargetUnit()

        if GetUnitTypeId(trigU) != 'u015' then
            // Do nothing if unit is not Special Deco (performance)
        elseif GetOwningPlayer(targetU) != owner then
            // Do nothing if target owner is not same as caster owner
        
        
        elseif spellId == 'A0C0' then
            call GUMSSetUnitScale(targetU , udg_DecoSystem_Scale[playerNumber] / 100)
            
        elseif spellId == 'A04A' then
            call GUMSSetUnitFlyHeight(targetU , udg_DecoSystem_Height[playerNumber])
            
        elseif spellId == 'A0C4' then
            call GUMSSetUnitFacing(targetU , udg_DecoSystem_Facing[playerNumber])
            
        elseif spellId == 'A0C3' then
            call GUMSSetUnitVertexColor(targetU , udg_ColorSystem_Red[playerNumber] , udg_ColorSystem_Green[playerNumber] , udg_ColorSystem_Blue[playerNumber] , udg_ColorSystem_Alpha[playerNumber])
        
        elseif spellId == 'A0C1' then
            call SetUnitAnimation(targetU, udg_DecoSystem_Anims[playerNumber])
            
        elseif spellId == 'A0C2' then
            call GUMSSetUnitAnimSpeed(targetU , udg_DecoSystem_animSpeed[playerNumber] / 100)
        endif
        
        set trigU=null
        set targetU=null
        return false
    endfunction
    
// scope DecoModAbils ends

//===========================================================================
function InitTrig_DecoBuilder_Cast_Ability takes nothing returns nothing
    set gg_trg_DecoBuilder_Cast_Ability=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_DecoBuilder_Cast_Ability, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_DecoBuilder_Cast_Ability, Condition(function DecoModAbils_Trig_DecoSystem_Cast_Ability_Conditions))
endfunction

//===========================================================================
// Trigger: Deco DisableMovement
//
// This trigger disables movement for all units that are marked as decorations (have the "ZZIsDecoration" ability in Custom->Humans->Items)
// It also gives an ability based on Root (zz_Enable/Disable Fly in Custom->Special->Units) to any structures, which allows them to have a flying height.
//===========================================================================
function Trig_Deco_DisableMovement_Conditions takes nothing returns boolean
    if ( not (GetUnitAbilityLevel((GetTriggerUnit()), 'A0C6') > 0) ) then // INLINED!!
        return false
    endif
    return true
endfunction

function Trig_Deco_DisableMovement_Actions takes nothing returns nothing
    local real l__udg_temp_real
    local string str
    // -
    // REMOVE ATTACK AND MOVE ABILITIES
    call UnitRemoveAbility(GetTriggerUnit(), 'Amov')
    call UnitRemoveAbility(GetTriggerUnit(), 'Aatk')
    if (GetUnitTypeId((GetTriggerUnit())) == RectGenerator_GENERATOR_ID) then // INLINED!!
//textmacro instance: GUDR_FirstPage("Add","GetTriggerUnit()")

	call UnitAddAbility(GetTriggerUnit(), RectGenerator_CREATE_OR_DESTROY)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_TOGGLE_VISIBILITY)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_MOVE)

        call UnitAddAbility(GetTriggerUnit(), RectGenerator_MOVE_TERRAIN)

	
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_RETRACT_X)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_EXPAND_X)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_RETRACT_Y)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_EXPAND_Y)
	
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_LOCK_UNITS)
	call UnitAddAbility(GetTriggerUnit(), RectGenerator_UNLOCK_UNITS)

//end of: GUDR_FirstPage("Add","GetTriggerUnit()")
    endif
    // -
    // ADD ENABLE/DISABLE FLY TO STRUCTURES
    if IsUnitType(GetTriggerUnit(), UNIT_TYPE_STRUCTURE) then
        if GetUnitAbilityLevel(GetTriggerUnit(), 'A037') != 0 then
        else
            call GUMS_AddStructureFlightAbility(GetTriggerUnit())
            // -
            // PLAY OPEN ANIMATION FOR OPENED GATES
            // OTHERWISE, PLAY STAND ANIMATION
            if ( GetUnitAbilityLevel(GetTriggerUnit(), 'A0B5') != 0 ) then
                if (HaveSavedString(UnitVisualMods___hashTable, GetHandleId((GetTriggerUnit())), UnitVisualMods___ATAG)) then // INLINED!!
                    call SetUnitAnimation(GetTriggerUnit(), "death alternate " + GUMSConvertTags((s__UnitVisuals_getAnimTag((GetHandleId(((GetTriggerUnit())))))))) // INLINED!!
                else
                    call SetUnitAnimation(GetTriggerUnit(), "death alternate")
                endif
            else
                if (HaveSavedString(UnitVisualMods___hashTable, GetHandleId((GetTriggerUnit())), UnitVisualMods___ATAG)) then // INLINED!!
                    call SetUnitAnimation(GetTriggerUnit(), "stand " + GUMSConvertTags((s__UnitVisuals_getAnimTag((GetHandleId(((GetTriggerUnit())))))))) // INLINED!!
                else
                    call SetUnitAnimation(GetTriggerUnit(), "stand")
                endif
            endif
        endif
    else
    endif
endfunction

//===========================================================================
function InitTrig_Deco_DisableMovement takes nothing returns nothing
    set gg_trg_Deco_DisableMovement=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Deco_DisableMovement, GetEntireMapRect())
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Deco_DisableMovement, EVENT_PLAYER_UNIT_UPGRADE_FINISH)
    call TriggerAddCondition(gg_trg_Deco_DisableMovement, Condition(function Trig_Deco_DisableMovement_Conditions))
    call TriggerAddAction(gg_trg_Deco_DisableMovement, function Trig_Deco_DisableMovement_Actions)
endfunction

//===========================================================================
// Trigger: Deco Instant Upgrade
//===========================================================================
function Trig_Deco_Instant_Upgrade_Conditions takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A0C6', GetTriggerUnit()) != 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Deco_Instant_Upgrade_Actions takes nothing returns nothing
    call UnitSetUpgradeProgress(GetTriggerUnit(), 100)
endfunction

//===========================================================================
function InitTrig_Deco_Instant_Upgrade takes nothing returns nothing
    set gg_trg_Deco_Instant_Upgrade=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Deco_Instant_Upgrade, EVENT_PLAYER_UNIT_UPGRADE_START)
    call TriggerAddCondition(gg_trg_Deco_Instant_Upgrade, Condition(function Trig_Deco_Instant_Upgrade_Conditions))
    call TriggerAddAction(gg_trg_Deco_Instant_Upgrade, function Trig_Deco_Instant_Upgrade_Actions)
endfunction

//===========================================================================
// Trigger: Deco Root Anywhere
//===========================================================================
function Trig_Deco_Root_Anywhere_Conditions takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A0C6', GetTriggerUnit()) != 0 ) ) then
        return false
    endif
    if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("root") ) ) then
        return false
    endif
    return true
endfunction

function Trig_Deco_Root_Anywhere_Actions takes nothing returns nothing
    call SetUnitX(GetTriggerUnit(), GetOrderPointX())
    call SetUnitY(GetTriggerUnit(), GetOrderPointY())
endfunction

//===========================================================================
function InitTrig_Deco_Root_Anywhere takes nothing returns nothing
    set gg_trg_Deco_Root_Anywhere=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Deco_Root_Anywhere, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)
    call TriggerAddCondition(gg_trg_Deco_Root_Anywhere, Condition(function Trig_Deco_Root_Anywhere_Conditions))
    call TriggerAddAction(gg_trg_Deco_Root_Anywhere, function Trig_Deco_Root_Anywhere_Actions)
endfunction

//===========================================================================
// Trigger: Deco Movement
//===========================================================================
// scope DecoMovement begins


    function DecoMovement___PlayerNumber takes unit whichUnit returns integer
        return GetPlayerId(GetOwningPlayer(whichUnit)) + 1
    endfunction
    
    function DecoMovement___X takes unit whichUnit returns real
        return GetUnitX(whichUnit)
    endfunction
    
    function DecoMovement___Y takes unit whichUnit returns real
        return GetUnitY(whichUnit)
    endfunction
    
// scope DecoMovement_Controller begins
        function DecoMovement_Controller_ForGroupFunc takes nothing returns nothing
                local unit enumU= GetEnumUnit()
                local integer spellId= GetSpellAbilityId()
                local real angle
                
                if ( spellId == DecoMovement_MOVE_LEFT ) then
                    call SetUnitPosition(enumU, (GetUnitX((enumU))) - udg_System_DecoGrid[(GetPlayerId(GetOwningPlayer((enumU))) + 1)], (GetUnitY((enumU)))) // INLINED!!
                    
                elseif ( spellId == DecoMovement_MOVE_RIGHT ) then
                    call SetUnitPosition(enumU, (GetUnitX((enumU))) + udg_System_DecoGrid[(GetPlayerId(GetOwningPlayer((enumU))) + 1)], (GetUnitY((enumU)))) // INLINED!!
                    
                elseif ( spellId == DecoMovement_MOVE_DOWN ) then
                    call SetUnitPosition(enumU, (GetUnitX((enumU))), (GetUnitY((enumU))) - udg_System_DecoGrid[(GetPlayerId(GetOwningPlayer((enumU))) + 1)]) // INLINED!!
                    
                elseif ( spellId == DecoMovement_MOVE_UP ) then
                    call SetUnitPosition(enumU, (GetUnitX((enumU))), (GetUnitY((enumU))) + udg_System_DecoGrid[(GetPlayerId(GetOwningPlayer((enumU))) + 1)]) // INLINED!!
                    
                elseif ( spellId == DecoMovement_MOVE ) then
                    call SetUnitPosition(enumU, GetSpellTargetX(), GetSpellTargetY())
                    
                elseif ( spellId == DecoMovement_FACE ) then
                    call GUMSSetUnitFacing(enumU , bj_RADTODEG * Atan2(GetSpellTargetY() - (GetUnitY((enumU))), GetSpellTargetX() - (GetUnitX((enumU))))) // INLINED!!
                    
                elseif ( spellId == DecoMovement_ROTATE ) then
                    set angle=I2R(( ( ( R2I(( GetUnitFacing(enumU) + 1 )) / 90 ) + 1 ) * 90 ))
                    if angle > 270 then
                        set angle=0
                    endif
                    call GUMSSetUnitFacing(enumU , angle)
                    
                elseif ( spellId == DecoMovement_COPY ) then
                    if not IsUnitInGroup(enumU, udg_System_ProtectedGroup) then
                        call GUMSCopyUnit(enumU , GetOwningPlayer(enumU) , 0)
                    endif
                endif
                
                set enumU=null
        endfunction
// scope DecoMovement_Controller ends

    function DecoMovement_Trigger_Conditions takes nothing returns boolean
        local unit trigU= GetTriggerUnit()
        local integer spellId= GetSpellAbilityId()
        local real angle
        
        // Checking if a unit is a rect generator is necesarry because this reuses their ability. Maybe change?
        if not (GetUnitAbilityLevel((trigU), 'A0C6') > 0) or (GetUnitTypeId((trigU)) == RectGenerator_GENERATOR_ID) then // INLINED!!
            set trigU=null
            return false
        endif
        
        if ( GetUnitTypeId(trigU) == 'h0KD' ) then
            call ForGroup(udg_Player_ControlGroup[(GetPlayerId(GetOwningPlayer((trigU))) + 1)], function DecoMovement_Controller_ForGroupFunc) // INLINED!!
        elseif ( spellId == DecoMovement_MOVE_LEFT ) then
            call SetUnitPosition(trigU, (GetUnitX((trigU))) - udg_System_DecoGrid[(GetPlayerId(GetOwningPlayer((trigU))) + 1)], (GetUnitY((trigU)))) // INLINED!!
            
        elseif ( spellId == DecoMovement_MOVE_RIGHT ) then
            call SetUnitPosition(trigU, (GetUnitX((trigU))) + udg_System_DecoGrid[(GetPlayerId(GetOwningPlayer((trigU))) + 1)], (GetUnitY((trigU)))) // INLINED!!
            
        elseif ( spellId == DecoMovement_MOVE_DOWN ) then
            call SetUnitPosition(trigU, (GetUnitX((trigU))), (GetUnitY((trigU))) - udg_System_DecoGrid[(GetPlayerId(GetOwningPlayer((trigU))) + 1)]) // INLINED!!
            
        elseif ( spellId == DecoMovement_MOVE_UP ) then
            call SetUnitPosition(trigU, (GetUnitX((trigU))), (GetUnitY((trigU))) + udg_System_DecoGrid[(GetPlayerId(GetOwningPlayer((trigU))) + 1)]) // INLINED!!
            
        elseif ( spellId == DecoMovement_MOVE or spellId == RectGenerator_MOVE ) then
            call SetUnitPosition(trigU, GetSpellTargetX(), GetSpellTargetY())
            
        elseif ( spellId == DecoMovement_FACE ) then
            call GUMSSetUnitFacing(trigU , bj_RADTODEG * Atan2(GetSpellTargetY() - (GetUnitY((trigU))), GetSpellTargetX() - (GetUnitX((trigU))))) // INLINED!!
        
        elseif ( spellId == DecoMovement_ROTATE ) then
            set angle=I2R(( ( ( R2I(( GetUnitFacing(trigU) + 1 )) / 90 ) + 1 ) * 90 ))
            if angle > 270 then
                set angle=0
            endif
            call GUMSSetUnitFacing(trigU , angle)
            
        elseif ( spellId == DecoMovement_COPY ) then
            call GUMSCopyUnit(trigU , GetOwningPlayer(trigU) , 0)
        endif
        
        set trigU=null
        return false
    endfunction
    
// scope DecoMovement ends


//===========================================================================
function InitTrig_Deco_Movement takes nothing returns nothing
    set gg_trg_Deco_Movement=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Deco_Movement, EVENT_PLAYER_UNIT_SPELL_CAST)
    call TriggerAddCondition(gg_trg_Deco_Movement, Condition(function DecoMovement_Trigger_Conditions))
endfunction

//===========================================================================
// Trigger: Deco Waygate
//===========================================================================
function Trig_Deco_Waygate_Actions takes nothing returns nothing
    call WaygateSetDestinationLocBJ(udg_Spell__Caster, udg_Spell__TargetPoint)
    call WaygateActivateBJ(true, udg_Spell__Caster)
endfunction

//===========================================================================
function InitTrig_Deco_Waygate takes nothing returns nothing
    set gg_trg_Deco_Waygate=CreateTrigger()
    call TriggerAddAction(gg_trg_Deco_Waygate, function Trig_Deco_Waygate_Actions)
endfunction

//===========================================================================
// Trigger: Deco Gates
//
// --Inspired by Gate Triggers from Titan Land RoK v3.83--
// Thanks to GHH (I believe these were mabe by him)
// ALL GATE UNIT TYPE HASHTABLE VALUES ARE SAVED IN THE "Init 0 seconds" TRIGGER
// THE GATE SYSTEM USES HASHTABLE_1
//===========================================================================
function Trig_Deco_Gates_Actions takes nothing returns nothing
    call GUMSCopyUnit(udg_Spell__Caster , GetTriggerPlayer() , LoadInteger(udg_Hashtable_1, GetUnitTypeId(udg_Spell__Caster), 0))
    call KillUnit(udg_Spell__Caster)
    call SelectUnitAddForPlayer(GetLastCreatedUnit(), GetOwningPlayer(GetLastCreatedUnit()))
endfunction

//===========================================================================
function InitTrig_Deco_Gates takes nothing returns nothing
    set gg_trg_Deco_Gates=CreateTrigger()
    call TriggerAddAction(gg_trg_Deco_Gates, function Trig_Deco_Gates_Actions)
endfunction

//===========================================================================
// Trigger: TerrainSystem Cast Ability
//===========================================================================
function Trig_TerrainSystem_Cast_Ability_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'u02E' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TerrainSystem_Cast_Ability_Func008C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0BR' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TerrainSystem_Cast_Ability_Func009C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A002' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TerrainSystem_Cast_Ability_Actions takes nothing returns nothing
    local location l__udg_temp_point
    local integer l__udg_temp_integer
    local integer my_ability= GetSpellAbilityId()
    set l__udg_temp_point=GetSpellTargetLoc()
    set l__udg_temp_integer=0
    loop
        exitwhen l__udg_temp_integer > 15
        if my_ability == udg_TileSystem_ABILITIES[l__udg_temp_integer] then
        call SetTerrainTypeBJ(l__udg_temp_point, udg_TileSystem_TILES[l__udg_temp_integer], udg_TileSystem_Var[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))], udg_DecoSystem_Value[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))], 0)
        set l__udg_temp_integer=15
        endif
        set l__udg_temp_integer=l__udg_temp_integer + 1
    endloop
    if ( Trig_TerrainSystem_Cast_Ability_Func008C() ) then
        call SetTerrainTypeBJ(l__udg_temp_point, udg_TileSystem_TILES[4], - 1, udg_DecoSystem_Value[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))], 0)
        call SetBlightRadiusLocBJ(true, GetOwningPlayer(GetTriggerUnit()), l__udg_temp_point, ( 64.00 * I2R(udg_DecoSystem_Value[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]) ))
    else
    endif
    if ( Trig_TerrainSystem_Cast_Ability_Func009C() ) then
        call SetBlightRadiusLocBJ(false, GetOwningPlayer(GetTriggerUnit()), l__udg_temp_point, ( 64.00 * I2R(udg_DecoSystem_Value[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]) ))
    else
    endif
    call RemoveLocation(l__udg_temp_point)
    set l__udg_temp_point=null
endfunction

//===========================================================================
function InitTrig_TerrainSystem_Cast_Ability takes nothing returns nothing
    set gg_trg_TerrainSystem_Cast_Ability=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_TerrainSystem_Cast_Ability, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_TerrainSystem_Cast_Ability, Condition(function Trig_TerrainSystem_Cast_Ability_Conditions))
    call TriggerAddAction(gg_trg_TerrainSystem_Cast_Ability, function Trig_TerrainSystem_Cast_Ability_Actions)
endfunction

//===========================================================================
// Trigger: TreeSystem Create Trees
//
// Check if unit is Deco Special so this trigger is not run for every unit that casts a ability
//===========================================================================
function Trig_Infinite_Seed_Bag_Copy_Conditions takes nothing returns boolean
    if ( GetUnitTypeId(GetTriggerUnit()) == 'u015' ) then
        if ( GetSpellAbilityId() == 'A00A' ) then
            return true
        endif
    endif
    return false
endfunction

function Trig_Infinite_Seed_Bag_Copy_Actions takes nothing returns nothing
    local integer playerNumber= GetPlayerId(GetOwningPlayer(GetTriggerUnit())) + 1
    local integer val= udg_DecoSystem_Value[playerNumber] - 1
    local real X= GetSpellTargetX()
    local real Y= GetSpellTargetY()
    local real space= udg_TreeSystem_Space[playerNumber]
    local integer x= - val
    local integer y= - val
    loop
        exitwhen x > val
        set y=- val
        loop
            exitwhen y > val
            call SetDestructableAnimation(CreateDestructable(udg_TreeSystem_TREES[GetPlayerId(GetOwningPlayer(GetTriggerUnit())) + 1], X - space * I2R(x), Y + - space * I2R(y), GetRandomDirectionDeg(), GetRandomReal(0.90, 1.10), 0), "birth")
            set y=y + 1
        endloop
        set x=x + 1
    endloop
endfunction

//===========================================================================
function InitTrig_TreeSystem_Create_Trees takes nothing returns nothing
    set gg_trg_TreeSystem_Create_Trees=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_TreeSystem_Create_Trees, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_TreeSystem_Create_Trees, Condition(function Trig_Infinite_Seed_Bag_Copy_Conditions))
    call TriggerAddAction(gg_trg_TreeSystem_Create_Trees, function Trig_Infinite_Seed_Bag_Copy_Actions)
endfunction

//===========================================================================
// Trigger: TreeSystem Cast Ability
//
// This trigger handles:
// -removing trees
// -destroying trees/bridges
// -reviving trees/birdges
// Check if unit is Deco Special so this trigger is not run for every unit that casts a ability
// (sorry for the if chain)
//===========================================================================
function Trig_TreeSystem_Cast_Ability_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'u015' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TreeSystem_Cast_Ability_Func004Func003Func001Func001C takes nothing returns boolean
    if ( ( LoadBooleanBJ(0, GetHandleIdBJ(GetEnumDestructable()), udg_Hashtable_1) == false ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetTriggerUnit()) == udg_GAME_MASTER ) ) then
        return true
    endif
    return false
endfunction

function Trig_TreeSystem_Cast_Ability_Func004Func003Func001C takes nothing returns boolean
    if ( not Trig_TreeSystem_Cast_Ability_Func004Func003Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_TreeSystem_Cast_Ability_Func004Func003A takes nothing returns nothing
    if ( Trig_TreeSystem_Cast_Ability_Func004Func003Func001C() ) then
        call KillDestructable(GetEnumDestructable())
    else
    endif
endfunction

function Trig_TreeSystem_Cast_Ability_Func004Func006Func003A takes nothing returns nothing
    call DestructableRestoreLife(GetEnumDestructable(), GetDestructableMaxLife(GetEnumDestructable()), true)
endfunction

function Trig_TreeSystem_Cast_Ability_Func004Func006Func006Func003A takes nothing returns nothing
    if IsDestructableTree(GetEnumDestructable()) then
    call RemoveDestructable(GetEnumDestructable())
    endif
endfunction

function Trig_TreeSystem_Cast_Ability_Func004Func006Func006C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A005' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TreeSystem_Cast_Ability_Func004Func006C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A004' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TreeSystem_Cast_Ability_Func004C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A000' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TreeSystem_Cast_Ability_Actions takes nothing returns nothing
    local location l__udg_temp_point
    if ( Trig_TreeSystem_Cast_Ability_Func004C() ) then
        set l__udg_temp_point=GetSpellTargetLoc()
        call EnumDestructablesInCircleBJ(( udg_TreeSystem_Space[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] * I2R(udg_DecoSystem_Value[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]) ), l__udg_temp_point, function Trig_TreeSystem_Cast_Ability_Func004Func003A)
        call RemoveLocation(l__udg_temp_point)
        set l__udg_temp_point=null
    else
        if ( Trig_TreeSystem_Cast_Ability_Func004Func006C() ) then
            set l__udg_temp_point=GetSpellTargetLoc()
            call EnumDestructablesInCircleBJ(( udg_TreeSystem_Space[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] * I2R(udg_DecoSystem_Value[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]) ), l__udg_temp_point, function Trig_TreeSystem_Cast_Ability_Func004Func006Func003A)
            call RemoveLocation(l__udg_temp_point)
            set l__udg_temp_point=null
        else
            if ( Trig_TreeSystem_Cast_Ability_Func004Func006Func006C() ) then
                set l__udg_temp_point=GetSpellTargetLoc()
                call EnumDestructablesInCircleBJ(( udg_TreeSystem_Space[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] * I2R(udg_DecoSystem_Value[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]) ), l__udg_temp_point, function Trig_TreeSystem_Cast_Ability_Func004Func006Func006Func003A)
                call RemoveLocation(l__udg_temp_point)
                set l__udg_temp_point=null
            else
            endif
        endif
    endif
endfunction

//===========================================================================
function InitTrig_TreeSystem_Cast_Ability takes nothing returns nothing
    set gg_trg_TreeSystem_Cast_Ability=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_TreeSystem_Cast_Ability, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_TreeSystem_Cast_Ability, Condition(function Trig_TreeSystem_Cast_Ability_Conditions))
    call TriggerAddAction(gg_trg_TreeSystem_Cast_Ability, function Trig_TreeSystem_Cast_Ability_Actions)
endfunction

//===========================================================================
// Trigger: TreeSystem Choose Tree
//===========================================================================
function TreeIssueStopOrder takes nothing returns nothing
    local timer t= GetExpiredTimer()
    local integer tId= GetHandleId(t)
    local unit deco= LoadUnitHandle(udg_Hashtable_1, tId, 'tree')
    
    call IssueImmediateOrder(deco, "stop")
    
    call PauseTimer(t)
    call DestroyTimer(t)
    
    call FlushChildHashtable(udg_Hashtable_1, tId)
    
    set t=null
    set deco=null

endfunction

function Trig_TreeSystem_Choose_Tree_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'u015' ) ) then
        return false
    endif
    if not ( OrderId2String(GetIssuedOrderId()) == "smart" ) then
        return false
    endif
    return true
endfunction

function Trig_TreeSystem_Choose_Tree_Actions takes nothing returns nothing
    local timer t
    
    if GetOrderTargetDestructable() == null then

        return
    endif
    
    //call BJDebugMsg(GetDestructableName(GetOrderTargetDestructable()))
    
    set t=CreateTimer()
    set udg_TreeSystem_TREES[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]=GetDestructableTypeId(GetOrderTargetDestructable())
    call TimerStart(t, 0, false, function TreeIssueStopOrder)
    call SaveUnitHandle(udg_Hashtable_1, GetHandleId(t), 'tree', GetTriggerUnit())
    set t=null
endfunction

//===========================================================================
function InitTrig_TreeSystem_Choose_Tree takes nothing returns nothing
    set gg_trg_TreeSystem_Choose_Tree=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_TreeSystem_Choose_Tree, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER)
    call TriggerAddCondition(gg_trg_TreeSystem_Choose_Tree, Condition(function Trig_TreeSystem_Choose_Tree_Conditions))
    call TriggerAddAction(gg_trg_TreeSystem_Choose_Tree, function Trig_TreeSystem_Choose_Tree_Actions)
endfunction

//===========================================================================
// Trigger: Lists
//===========================================================================

// Trigger: GLHS Main
//
// negative ID -> positive instance number -> next value
// negative ID -> negtive instance number -> previous value
//===========================================================================
////////////////////////////////////////////////////////////////////////////////////////////////////
//GLHS : Guhun's Linked Hash Sets v1.0.0

// An implementation of an ordered set with a linked list backend. AKA. LinkedHashSet.
//End of Ordered Sets
////////////////////////////////////////////////////////////////////////////////////////////////////


























//===========================================================================
// Trigger: GMUI Main
//
// Double-recycling recycler
// 1: A hashtable with many recycling arrays
// 2: Each recycling array has an index. (recycle key)  The index is the value of the array itself in the hashtable.
// CreateRecycleKey()
// DestroyRecycleKey()
// GetIndex(integer RecycleKey)
// RecycleIndex(integer RecycleKey)
//===========================================================================
////////////////////////////////////////////////////////////////////////////////////////////////////
//Guhun's MUI Engine version 3.0.0
////////////////////////////////////////////////////////////////////////////////////////////////////





































//===========================================================================
// Trigger: Table
//===========================================================================
// Trigger: ConstTable
//===========================================================================
// Trigger: HashtableWrapper
//===========================================================================
// Trigger: TableStruct
//===========================================================================
// Trigger: MultiPatrol
//===========================================================================
// Trigger: MultiPatrol Addons
//===========================================================================
// scope MultiPatrolCommands begins

function MultiPatrolCommands___CommandActions takes nothing returns nothing
    local group selectedGrp= CreateGroup()
    local unit u

    call GroupEnumUnitsSelected(selectedGrp, GetTriggerPlayer(), null)
    
    if GetEventPlayerChatString() == "-patrol clear" then
        set u=FirstOfGroup(selectedGrp)
        loop
        exitwhen u == null
            call Patrol_ClearUnitIdData(GetHandleId((u))) // INLINED!!
            call GroupRemoveUnit(selectedGrp, u)
            set u=FirstOfGroup(selectedGrp)
        endloop
    elseif GetEventPlayerChatString() == "-patrol resume" then
        set u=FirstOfGroup(selectedGrp)
        loop
        exitwhen u == null
            call Patrol_ResumePatrol(u)
            call GroupRemoveUnit(selectedGrp, u)
            set u=FirstOfGroup(selectedGrp)
        endloop
    endif
    
    call DestroyGroup(selectedGrp)
    set selectedGrp=null
    set u=null
endfunction

function MultiPatrolCommands___onInit takes nothing returns nothing
    local trigger trig= CreateTrigger()
    local integer i= 0
    call TriggerAddAction(trig, function MultiPatrolCommands___CommandActions)
    
    loop
    exitwhen i >= bj_MAX_PLAYERS
        if IsPlayerInForce(Player(i), bj_FORCE_ALL_PLAYERS) then
            call TriggerRegisterPlayerChatEvent(trig, Player(i), "-patrol ", false)
        endif
        set i=i + 1
    endloop
endfunction

// scope MultiPatrolCommands ends

// scope MultiPatrolOrder begins

function MultiPatrolOrder___IsUnitOnlySelected takes unit trigU returns boolean
    local group selectedGrp= CreateGroup()
    local unit firstOfGrp
    local integer groupCounter= 0
    
    local boolean trigUnitInSelection= false
    
    call GroupEnumUnitsSelected(selectedGrp, GetOwningPlayer(trigU), null)
    set firstOfGrp=FirstOfGroup(selectedGrp)
    loop
    exitwhen groupCounter > 1 or firstOfGrp == null
        set groupCounter=groupCounter + 1
        call GroupRemoveUnit(selectedGrp, firstOfGrp)
        if firstOfGrp == trigU then
            set trigUnitInSelection=true
        endif
        set firstOfGrp=FirstOfGroup(selectedGrp)
    endloop
    
    call DestroyGroup(selectedGrp)
    set selectedGrp=null
    set firstOfGrp=null
    
    return groupCounter == 1 and trigUnitInSelection
endfunction

function MultiPatrolOrder___OnPatrolOrderCondition takes nothing returns boolean
    local unit trigU= GetTriggerUnit()
    
    if Patrol_IsValidPatrolOrder(GetIssuedOrderId()) and MultiPatrolOrder___IsUnitOnlySelected(trigU) then
        call Patrol_RegisterPoint(trigU , GetOrderPointX() , GetOrderPointY())
    endif
    
    set trigU=null
    
    return false
endfunction

function MultiPatrolOrder___onInit takes nothing returns nothing
    local trigger trig= CreateTrigger()
    
    call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)
    call TriggerAddCondition(trig, Condition(function MultiPatrolOrder___OnPatrolOrderCondition))
endfunction

// scope MultiPatrolOrder ends

// scope MultiPatrolDisplayOnSelect begins


function MultiPatrolDisplayOnSelect___onSelect takes nothing returns nothing
    local unit u
    local integer i= 0
    local group selectedGrp= CreateGroup()
    
    loop
    exitwhen i >= bj_MAX_PLAYERS
        if GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING then
            call GroupEnumUnitsSelected(selectedGrp, Player(i), null)
        endif
        set i=i + 1
    endloop
    
    set u=FirstOfGroup(MultiPatrolDisplayOnSelect___stack_grp)
    loop
        exitwhen u == null
            if not IsUnitInGroup(u, selectedGrp) then
                call Patrol_DestroyIdPoints(GetHandleId((u))) // INLINED!!
            endif
            call GroupRemoveUnit(MultiPatrolDisplayOnSelect___stack_grp, u)
            set u=FirstOfGroup(MultiPatrolDisplayOnSelect___stack_grp)
    endloop
    
    set u=FirstOfGroup(selectedGrp)
    loop
        exitwhen u == null
            call Patrol_DisplayPoints(u)
            call GroupRemoveUnit(selectedGrp, u)
            call GroupAddUnit(MultiPatrolDisplayOnSelect___stack_grp, u)
            set u=FirstOfGroup(selectedGrp)
    endloop
    
    call DestroyGroup(selectedGrp)
    set selectedGrp=null
endfunction

//===========================================================================
function MultiPatrolDisplayOnSelect___onInit takes nothing returns nothing
    local trigger trig= CreateTrigger()
    call TriggerRegisterTimerEvent(trig, MultiPatrolDisplayOnSelect___PERIOD, true)
    call TriggerAddAction(trig, function MultiPatrolDisplayOnSelect___onSelect)
endfunction

// scope MultiPatrolDisplayOnSelect ends
// Trigger: UserDefinedRects
//===========================================================================
//===========================================================================
// Trigger: RectGenerator
//===========================================================================
 
//===========================================================================
// Trigger: RectEnvironment
//
// Default melee game initialization for all players
//===========================================================================
// Trigger: AutoRectEnvironment
//
// Default melee game initialization for all players
//===========================================================================
// Trigger: TileDefinition
//===========================================================================
// Trigger: StructureTileDefinition
//===========================================================================
// Trigger: WorldBounds
//===========================================================================
// Trigger: DestructableLib
//===========================================================================
// Trigger: GroupTools
//===========================================================================

//===========================================================================
// Trigger: DummyRecycler
//===========================================================================
// Trigger: Id2String
//===========================================================================
//===========================================================================
// Trigger: CutToComma
//===========================================================================
// Trigger: UnitVisualMods
//===========================================================================
// Trigger: Camera System
//===========================================================================
// Trigger: MoveSpeedBonus
//===========================================================================


// Trigger: Move Speed Modification
//===========================================================================
// Trigger: MultiBoard
//===========================================================================
// Trigger: GameTime
//===========================================================================

//===========================================================================
// Trigger: Debug
//===========================================================================
// This function is used to easily print debug messages only if a certain condition is met.
// Boolean parameter is on front because the message might be big.
// I know this clashes with the function's name, but it should be better this way.
// Example usage:
//debug call Debug_PrintIf(IsUnitDeadBJ(whichUnit), GetUnitName(whichUnit)+ " is DEAD!"
//===========================================================================
// Trigger: ArrayAgent
//===========================================================================

//===========================================================================
// Trigger: DummyDmg
//===========================================================================
// Trigger: PlayerUnitLimit
//===========================================================================
// Trigger: TimedBonus
//===========================================================================
//===========================================================================
// Trigger: LoPHeader
//
// This trigger should have its code placed above all others when the map is saved, so it can be used to write functions.
// DO NOT DELETE AND RECREATE THIS TRIGGER OR THE MAP WILL BECOME UNSAVEABLE
//===========================================================================
//===========================================================================
// Trigger: CustomStatSystem
//===========================================================================
// Trigger: CSS Standalone Bonus
//===========================================================================
//************************************************************************************************************
//*                                                                                                          *
//*                              CUSTOM STAT SYSTEM (CSS)                                                    *
//*                                                                                                          *
//*   Author:   Doomlord                                                                                     *
//*   Version:  1.5g                                                                                         *
//*                                                                                                          *
//*   Credits:                                                                                               *
//*   + Earth-Fury:    BonusMod binary algoritm; implementation macro.                                       *
//*   + Crigges:       A great amount of help and support.                                                   *
//*   + Geries:        Help me with the item hashtable values cleanup.                                       *
//*   + rulerofiron99: Item Socketing method referenced from [GUI]Right Click Item Recipe v1.05.             *
//*   + Vexorian:      CSS_SimError [url]http://www.wc3c.net/showthread.php?t=101260[/url]                   *
//*   + Magtheridon96: [Snippet]BoundInt [url]http://www.hiveworkshop.com/forums/2294066-post804.html[/url]  *
//*   + WaterKnight:   Help with the stack for custom Event Response.                                        *
//*   + PurgeandFire:  Pinpoint a possible desync bug with the system.                                       *
//*   + Nestharus:     Mentioning the possible negative life bug in his Bonus lib.                           *
//*                                                                                                          *
//************************************************************************************************************


//**************************************************************************************
//* INTRODUCTION:                                                                      *
//*                                                                                    *
//* An alternative to BonusMod for those who prefer a vanilla JASS approach.           *
//*                                                                                    *
//* Just follow the API and you are pretty much done.                                  *
//**************************************************************************************


//********************************************************************************************************
//* REQUIREMENTS:                                                                                        *
//*                                                                                                      *
//* JNGP [url]http://www.hiveworkshop.com/forums/tools-560/jassnewgenpack-5d-227445[/url] (Recommended)  *
//* OR:                                                                                                  *
//* Your superhuman capability to transfer 198 abilities to your map. (Not Recommended)                  *
//********************************************************************************************************


//************************************************************************************************************************************************
//* INSTALLATION INSTRUCTION:                                                                                                                    *
//*                                                                                                                                              *
//* Step 1: Copy the custom code for bonus handling to your map header.                                                                          *
//* Step 2: Use JNGP to implement the system's abilities through macro. Instruction is included in the Implementation Macro trigger.             *
//* Step 3: Copy the whole CSS folder to your map. Don't forget to turn on "Automatically create unknown variables while pasting trigger data".  *
//* Step 4: Except for this trigger, delete every other useless elements.                                                                        *
//* Step 5: Use this BonusMod alternative however you want.                                                                                      *
//*                                                                                                                                              *
//************************************************************************************************************************************************


//**************************************************************************************
//* Bonus Types Identifier:                                                            *
//*                                                                                    *
//* Armor Bonus:        0                                                              *
//* Attack Speed Bonus: 1                                                              *
//* Damage Bonus:       2                                                              *
//* Agility Bonus:      3                                                              *
//* Intelligence Bonus: 4                                                              *
//* Strength Bonus:     5                                                              *
//* Life Regen Bonus:   6                                                              *
//* Mana Regen Bonus:   7                                                              *
//* Life Bonus:         8                                                              *
//* Mana Bonus:         9                                                              *
//* Sight Range Bonus:  10                                                             *
//**************************************************************************************


//********************************************************************************
//* Generic Bonus APIs                                                           *
//*                                                                              *
//* CSS_GetBonus takes unit u, integer bonusType returns integer                 *
//* CSS_AddBonus takes unit u, integer amount, integer bonusType returns nothing *
//* CSS_ClearBonus takes unit u, integer bonusType                               *
//********************************************************************************


// For preloading abilities

function CSS_Preload takes nothing returns nothing
    local integer i= 0
    local unit u= CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'hfoo', 0, 0, 0.00)

    loop
        exitwhen i > 197
        call UnitAddAbility(u, udg_CSS_Abilities[i])
        set i=i + 1
    endloop

    call RemoveUnit(u)
    set u=null
endfunction

//===========================================================================
function InitTrig_CSS_Standalone_Bonus takes nothing returns nothing
    local integer i= 0
    local integer a= 1

    set udg_CSS_Abilities[0]='ZxA0'
    set udg_CSS_Abilities[1]='ZxA1'
    set udg_CSS_Abilities[2]='ZxA2'
    set udg_CSS_Abilities[3]='ZxA3'
    set udg_CSS_Abilities[4]='ZxA4'
    set udg_CSS_Abilities[5]='ZxA5'
    set udg_CSS_Abilities[6]='ZxA6'
    set udg_CSS_Abilities[7]='ZxA7'
    set udg_CSS_Abilities[8]='ZxA8'
    set udg_CSS_Abilities[9]='ZxA9'
    set udg_CSS_Abilities[10]='ZxAa'
    set udg_CSS_Abilities[11]='ZxAb'
    set udg_CSS_Abilities[12]='ZxAc'
    set udg_CSS_Abilities[13]='ZxAd'
    set udg_CSS_Abilities[14]='ZxAe'
    set udg_CSS_Abilities[15]='ZxAf'
    set udg_CSS_Abilities[16]='ZxAg'
    set udg_CSS_Abilities[17]='ZxAh'
    set udg_CSS_Abilities[18]='ZxI0'
    set udg_CSS_Abilities[19]='ZxI1'
    set udg_CSS_Abilities[20]='ZxI2'
    set udg_CSS_Abilities[21]='ZxI3'
    set udg_CSS_Abilities[22]='ZxI4'
    set udg_CSS_Abilities[23]='ZxI5'
    set udg_CSS_Abilities[24]='ZxI6'
    set udg_CSS_Abilities[25]='ZxI7'
    set udg_CSS_Abilities[26]='ZxI8'
    set udg_CSS_Abilities[27]='ZxI9'
    set udg_CSS_Abilities[28]='ZxIa'
    set udg_CSS_Abilities[29]='ZxIb'
    set udg_CSS_Abilities[30]='ZxIc'
    set udg_CSS_Abilities[31]='ZxId'
    set udg_CSS_Abilities[32]='ZxIe'
    set udg_CSS_Abilities[33]='ZxIf'
    set udg_CSS_Abilities[34]='ZxIg'
    set udg_CSS_Abilities[35]='ZxIh'
    set udg_CSS_Abilities[36]='ZxB0'
    set udg_CSS_Abilities[37]='ZxB1'
    set udg_CSS_Abilities[38]='ZxB2'
    set udg_CSS_Abilities[39]='ZxB3'
    set udg_CSS_Abilities[40]='ZxB4'
    set udg_CSS_Abilities[41]='ZxB5'
    set udg_CSS_Abilities[42]='ZxB6'
    set udg_CSS_Abilities[43]='ZxB7'
    set udg_CSS_Abilities[44]='ZxB8'
    set udg_CSS_Abilities[45]='ZxB9'
    set udg_CSS_Abilities[46]='ZxBa'
    set udg_CSS_Abilities[47]='ZxBb'
    set udg_CSS_Abilities[48]='ZxBc'
    set udg_CSS_Abilities[49]='ZxBd'
    set udg_CSS_Abilities[50]='ZxBe'
    set udg_CSS_Abilities[51]='ZxBf'
    set udg_CSS_Abilities[52]='ZxBg'
    set udg_CSS_Abilities[53]='ZxBh'
    set udg_CSS_Abilities[54]='ZxG0'
    set udg_CSS_Abilities[55]='ZxG1'
    set udg_CSS_Abilities[56]='ZxG2'
    set udg_CSS_Abilities[57]='ZxG3'
    set udg_CSS_Abilities[58]='ZxG4'
    set udg_CSS_Abilities[59]='ZxG5'
    set udg_CSS_Abilities[60]='ZxG6'
    set udg_CSS_Abilities[61]='ZxG7'
    set udg_CSS_Abilities[62]='ZxG8'
    set udg_CSS_Abilities[63]='ZxG9'
    set udg_CSS_Abilities[64]='ZxGa'
    set udg_CSS_Abilities[65]='ZxGb'
    set udg_CSS_Abilities[66]='ZxGc'
    set udg_CSS_Abilities[67]='ZxGd'
    set udg_CSS_Abilities[68]='ZxGe'
    set udg_CSS_Abilities[69]='ZxGf'
    set udg_CSS_Abilities[70]='ZxGg'
    set udg_CSS_Abilities[71]='ZxGh'
    set udg_CSS_Abilities[72]='ZxH0'
    set udg_CSS_Abilities[73]='ZxH1'
    set udg_CSS_Abilities[74]='ZxH2'
    set udg_CSS_Abilities[75]='ZxH3'
    set udg_CSS_Abilities[76]='ZxH4'
    set udg_CSS_Abilities[77]='ZxH5'
    set udg_CSS_Abilities[78]='ZxH6'
    set udg_CSS_Abilities[79]='ZxH7'
    set udg_CSS_Abilities[80]='ZxH8'
    set udg_CSS_Abilities[81]='ZxH9'
    set udg_CSS_Abilities[82]='ZxHa'
    set udg_CSS_Abilities[83]='ZxHb'
    set udg_CSS_Abilities[84]='ZxHc'
    set udg_CSS_Abilities[85]='ZxHd'
    set udg_CSS_Abilities[86]='ZxHe'
    set udg_CSS_Abilities[87]='ZxHf'
    set udg_CSS_Abilities[88]='ZxHg'
    set udg_CSS_Abilities[89]='ZxHh'
    set udg_CSS_Abilities[90]='ZxF0'
    set udg_CSS_Abilities[91]='ZxF1'
    set udg_CSS_Abilities[92]='ZxF2'
    set udg_CSS_Abilities[93]='ZxF3'
    set udg_CSS_Abilities[94]='ZxF4'
    set udg_CSS_Abilities[95]='ZxF5'
    set udg_CSS_Abilities[96]='ZxF6'
    set udg_CSS_Abilities[97]='ZxF7'
    set udg_CSS_Abilities[98]='ZxF8'
    set udg_CSS_Abilities[99]='ZxF9'
    set udg_CSS_Abilities[100]='ZxFa'
    set udg_CSS_Abilities[101]='ZxFb'
    set udg_CSS_Abilities[102]='ZxFc'
    set udg_CSS_Abilities[103]='ZxFd'
    set udg_CSS_Abilities[104]='ZxFe'
    set udg_CSS_Abilities[105]='ZxFf'
    set udg_CSS_Abilities[106]='ZxFg'
    set udg_CSS_Abilities[107]='ZxFh'
    set udg_CSS_Abilities[108]='ZxJ0'
    set udg_CSS_Abilities[109]='ZxJ1'
    set udg_CSS_Abilities[110]='ZxJ2'
    set udg_CSS_Abilities[111]='ZxJ3'
    set udg_CSS_Abilities[112]='ZxJ4'
    set udg_CSS_Abilities[113]='ZxJ5'
    set udg_CSS_Abilities[114]='ZxJ6'
    set udg_CSS_Abilities[115]='ZxJ7'
    set udg_CSS_Abilities[116]='ZxJ8'
    set udg_CSS_Abilities[117]='ZxJ9'
    set udg_CSS_Abilities[118]='ZxJa'
    set udg_CSS_Abilities[119]='ZxJb'
    set udg_CSS_Abilities[120]='ZxJc'
    set udg_CSS_Abilities[121]='ZxJd'
    set udg_CSS_Abilities[122]='ZxJe'
    set udg_CSS_Abilities[123]='ZxJf'
    set udg_CSS_Abilities[124]='ZxJg'
    set udg_CSS_Abilities[125]='ZxJh'
    set udg_CSS_Abilities[126]='ZxK0'
    set udg_CSS_Abilities[127]='ZxK1'
    set udg_CSS_Abilities[128]='ZxK2'
    set udg_CSS_Abilities[129]='ZxK3'
    set udg_CSS_Abilities[130]='ZxK4'
    set udg_CSS_Abilities[131]='ZxK5'
    set udg_CSS_Abilities[132]='ZxK6'
    set udg_CSS_Abilities[133]='ZxK7'
    set udg_CSS_Abilities[134]='ZxK8'
    set udg_CSS_Abilities[135]='ZxK9'
    set udg_CSS_Abilities[136]='ZxKa'
    set udg_CSS_Abilities[137]='ZxKb'
    set udg_CSS_Abilities[138]='ZxKc'
    set udg_CSS_Abilities[139]='ZxKd'
    set udg_CSS_Abilities[140]='ZxKe'
    set udg_CSS_Abilities[141]='ZxKf'
    set udg_CSS_Abilities[142]='ZxKg'
    set udg_CSS_Abilities[143]='ZxKh'
    set udg_CSS_Abilities[144]='ZxE0'
    set udg_CSS_Abilities[145]='ZxE1'
    set udg_CSS_Abilities[146]='ZxE2'
    set udg_CSS_Abilities[147]='ZxE3'
    set udg_CSS_Abilities[148]='ZxE4'
    set udg_CSS_Abilities[149]='ZxE5'
    set udg_CSS_Abilities[150]='ZxE6'
    set udg_CSS_Abilities[151]='ZxE7'
    set udg_CSS_Abilities[152]='ZxE8'
    set udg_CSS_Abilities[153]='ZxE9'
    set udg_CSS_Abilities[154]='ZxEa'
    set udg_CSS_Abilities[155]='ZxEb'
    set udg_CSS_Abilities[156]='ZxEc'
    set udg_CSS_Abilities[157]='ZxEd'
    set udg_CSS_Abilities[158]='ZxEe'
    set udg_CSS_Abilities[159]='ZxEf'
    set udg_CSS_Abilities[160]='ZxEg'
    set udg_CSS_Abilities[161]='ZxEh'
    set udg_CSS_Abilities[162]='ZxD0'
    set udg_CSS_Abilities[163]='ZxD1'
    set udg_CSS_Abilities[164]='ZxD2'
    set udg_CSS_Abilities[165]='ZxD3'
    set udg_CSS_Abilities[166]='ZxD4'
    set udg_CSS_Abilities[167]='ZxD5'
    set udg_CSS_Abilities[168]='ZxD6'
    set udg_CSS_Abilities[169]='ZxD7'
    set udg_CSS_Abilities[170]='ZxD8'
    set udg_CSS_Abilities[171]='ZxD9'
    set udg_CSS_Abilities[172]='ZxDa'
    set udg_CSS_Abilities[173]='ZxDb'
    set udg_CSS_Abilities[174]='ZxDc'
    set udg_CSS_Abilities[175]='ZxDd'
    set udg_CSS_Abilities[176]='ZxDe'
    set udg_CSS_Abilities[177]='ZxDf'
    set udg_CSS_Abilities[178]='ZxDg'
    set udg_CSS_Abilities[179]='ZxDh'
    set udg_CSS_Abilities[180]='ZxC0'
    set udg_CSS_Abilities[181]='ZxC1'
    set udg_CSS_Abilities[182]='ZxC2'
    set udg_CSS_Abilities[183]='ZxC3'
    set udg_CSS_Abilities[184]='ZxC4'
    set udg_CSS_Abilities[185]='ZxC5'
    set udg_CSS_Abilities[186]='ZxC6'
    set udg_CSS_Abilities[187]='ZxC7'
    set udg_CSS_Abilities[188]='ZxC8'
    set udg_CSS_Abilities[189]='ZxC9'
    set udg_CSS_Abilities[190]='ZxCa'
    set udg_CSS_Abilities[191]='ZxCb'
    set udg_CSS_Abilities[192]='ZxCc'
    set udg_CSS_Abilities[193]='ZxCd'
    set udg_CSS_Abilities[194]='ZxCe'
    set udg_CSS_Abilities[195]='ZxCf'
    set udg_CSS_Abilities[196]='ZxCg'
    set udg_CSS_Abilities[197]='ZxCh'

    loop
        exitwhen i > 30
        set udg_CSS_Power[i]=a
        set a=a * 2
        set i=i + 1
    endloop

    set udg_CSS_Hashtable=InitHashtable()

    if udg_CSS_PreloadBoolean then
        call CSS_Preload()
    endif
endfunction//===========================================================================
// Trigger: Color Code Setting
//===========================================================================
function Trig_Color_Code_Setting_Actions takes nothing returns nothing
    // Color codes for the item info panel can be set here
    // If you want a text to be colored white as default, set the color code to |cffffffff
    // Don't touch the indexes, modify the value only
    // Socket Item Name
    set udg_CSS_String[11]="|cffff0000"
    // Item Name
    set udg_CSS_String[12]="|cff32cd32"
    // Bonus Stat
    set udg_CSS_String[24]="|cFF0000FF"
    // Other Text
    set udg_CSS_String[25]="|cffffffff"
    // Numbers other than stat
    set udg_CSS_String[26]="|cFFFFA500"
    // Color Codes for Stats
    // Armor
    set udg_CSS_String[13]="|cFFFFA500"
    // Attack Speed
    set udg_CSS_String[14]="|cFF800080"
    // Damage
    set udg_CSS_String[15]="|CFF7EBFF1"
    // Agility
    set udg_CSS_String[16]="|cFFFFD700"
    // Intelligence
    set udg_CSS_String[17]="|cFF000000"
    // Strength
    set udg_CSS_String[18]="|cff00ff00"
    // Life Regen
    set udg_CSS_String[19]="|cff32cd32"
    // Mana Regen
    set udg_CSS_String[20]="|CFFFFFF01"
    // Life
    set udg_CSS_String[21]="|CFF1CB619"
    // Mana
    set udg_CSS_String[22]="|CFF106246"
    // Sight Range
    set udg_CSS_String[23]="|CFF4E2A04"
endfunction

//===========================================================================
function InitTrig_Color_Code_Setting takes nothing returns nothing
    set gg_trg_Color_Code_Setting=CreateTrigger()
    call TriggerAddAction(gg_trg_Color_Code_Setting, function Trig_Color_Code_Setting_Actions)
endfunction

//===========================================================================
// Trigger: Unit Event Config
//
// GUI Unit Event by Bribe, version 2.5.0.0
//===========================================================================
function Trig_Unit_Event_Config_Actions takes nothing returns nothing
    //  
    // Copy Unit Event Ability from Object Editor, then set DetectRemoveAbility to it as follows:
    //  
    set udg_DetectRemoveAbility='A01R'
    //  
    // Paste it a second time, then set DetectTransformAbility to it as follows:
    //  
    set udg_DetectTransformAbility='A01P'
    //  
    // Don't enable the following lines as they exist simply to make copying the system easier
    //  
    // One additional event to run right before Unit Indexer initializes, added 29 May 2017 for ZiBitheWand3r3r 
    set udg_UnitIndexEvent=- 1.00
    //  
    // Initialize Unit Event now that all the InitTrig_ functions have run
    //  
    set udg_IsUnitPreplaced[0]=true
    call ExecuteFunc("UnitEventInit")
    set udg_UnitIndexEvent=3.00
    set udg_IsUnitPreplaced[0]=udg_IsUnitTransforming[0]
endfunction

//===========================================================================
function InitTrig_Unit_Event_Config takes nothing returns nothing
    set gg_trg_Unit_Event_Config=CreateTrigger()
    call TriggerAddAction(gg_trg_Unit_Event_Config, function Trig_Unit_Event_Config_Actions)
endfunction

//===========================================================================
// Trigger: Unit Event
//===========================================================================
//===========================================================================
function UnitEventDestroyGroup takes integer i returns nothing
    if udg_CargoTransportGroup[i] != null then
        call DestroyGroup(udg_CargoTransportGroup[i])
        set udg_CargoTransportGroup[i]=null
    endif
endfunction
function UnitEventCheckAfter takes nothing returns nothing
    local integer i= udg_CheckDeathList[0]
    set udg_CheckDeathList[0]=0
    loop
        exitwhen i == 0
        if udg_IsUnitNew[i] then
            //The unit was just created.
            set udg_IsUnitNew[i]=false
        elseif udg_IsUnitTransforming[i] then
           //Added 21 July 2017 to fix the issue re-adding this ability in the same instant
           set udg_UDex=i
           set udg_UnitTypeEvent=0.00
           set udg_UnitTypeEvent=1.00
           set udg_UnitTypeOf[i]=GetUnitTypeId(udg_UDexUnits[i]) //Set this afterward to give the user extra reference
           set udg_IsUnitTransforming[i]=false
           call UnitAddAbility(udg_UDexUnits[i], udg_DetectTransformAbility)
        elseif udg_IsUnitAlive[i] then
            //The unit has started reincarnating.
            set udg_IsUnitReincarnating[i]=true
            set udg_IsUnitAlive[i]=false
            set udg_UDex=i
            set udg_DeathEvent=0.50
            set udg_DeathEvent=0.00
        endif
        set i=udg_CheckDeathList[i]
    endloop
endfunction
function UnitEventCheckAfterProxy takes integer i returns nothing
    if udg_CheckDeathList[0] == 0 then
        call TimerStart(udg_CheckDeathTimer, 0.00, false, function UnitEventCheckAfter)
    endif
    set udg_CheckDeathList[i]=udg_CheckDeathList[0]
    set udg_CheckDeathList[0]=i
endfunction

function UnitEventOnUnload takes nothing returns nothing
    local integer i= udg_UDex
    call GroupRemoveUnit(udg_CargoTransportGroup[GetUnitUserData(udg_CargoTransportUnit[i])], udg_UDexUnits[i])
    set udg_IsUnitBeingUnloaded[i]=true
    set udg_CargoEvent=0.00
    set udg_CargoEvent=2.00
    set udg_CargoEvent=0.00
    set udg_IsUnitBeingUnloaded[i]=false
    if not IsUnitLoaded(udg_UDexUnits[i]) or IsUnitType(udg_CargoTransportUnit[i], UNIT_TYPE_DEAD) or GetUnitTypeId(udg_CargoTransportUnit[i]) == 0 then
        set udg_CargoTransportUnit[i]=null
    endif
endfunction

function UnitEventOnDeath takes nothing returns boolean
    local integer pdex= udg_UDex
    set udg_UDex=GetUnitUserData(GetTriggerUnit())
    if udg_UDex != 0 then
        set udg_KillerOfUnit[udg_UDex]=GetKillingUnit() //Added 29 May 2017 for GIMLI_2 
        set udg_IsUnitAlive[udg_UDex]=false
        set udg_DeathEvent=0.00
        set udg_DeathEvent=1.00
        set udg_DeathEvent=0.00
        set udg_KillerOfUnit[udg_UDex]=null
        if udg_CargoTransportUnit[udg_UDex] != null then
            call UnitEventOnUnload()
        endif
    endif
    set udg_UDex=pdex
    return false
endfunction
  
function UnitEventOnOrder takes nothing returns boolean
    local integer pdex= udg_UDex
    local unit u= GetFilterUnit()
    local integer i= GetUnitUserData(u)
    if i > 0 then
        set udg_UDex=i
        if GetUnitAbilityLevel(u, udg_DetectRemoveAbility) == 0 then
            if not udg_IsUnitRemoved[i] then
                set udg_IsUnitRemoved[i]=true
                set udg_IsUnitAlive[i]=false
                set udg_SummonerOfUnit[i]=null
                
                //For backwards-compatibility:
                set udg_DeathEvent=0.00
                set udg_DeathEvent=3.00
                set udg_DeathEvent=0.00
                
                //Fire deindex event for UDex:
                set udg_UnitIndexEvent=0.00
                set udg_UnitIndexEvent=2.00
                set udg_UnitIndexEvent=0.00
                
                set udg_UDexNext[udg_UDexPrev[i]]=udg_UDexNext[i]
                set udg_UDexPrev[udg_UDexNext[i]]=udg_UDexPrev[i]
                
                // Recycle the index for later use
                set udg_UDexUnits[i]=null
                set udg_UDexPrev[i]=udg_UDexLastRecycled
                set udg_UDexLastRecycled=i
                call UnitEventDestroyGroup(i)
            endif
        elseif not udg_IsUnitAlive[i] then
            if not IsUnitType(u, UNIT_TYPE_DEAD) then
                set udg_IsUnitAlive[i]=true
                set udg_DeathEvent=0.00
                set udg_DeathEvent=2.00
                set udg_DeathEvent=0.00
                set udg_IsUnitReincarnating[i]=false
            endif
        elseif IsUnitType(u, UNIT_TYPE_DEAD) then
            if udg_IsUnitNew[i] then
                //This unit was created as a corpse.
                set udg_IsUnitAlive[i]=false
                set udg_DeathEvent=0.00
                set udg_DeathEvent=1.00
                set udg_DeathEvent=0.00
            elseif udg_CargoTransportUnit[i] == null or not IsUnitType(u, UNIT_TYPE_HERO) then
                //The unit may have just started reincarnating.
                call UnitEventCheckAfterProxy(i)
            endif
        elseif GetUnitAbilityLevel(u, udg_DetectTransformAbility) == 0 and not udg_IsUnitTransforming[i] then
            set udg_IsUnitTransforming[i]=true
            call UnitEventCheckAfterProxy(i) //This block has been updated on 21 July 2017
        endif
        if udg_CargoTransportUnit[i] != null and not udg_IsUnitBeingUnloaded[i] and not IsUnitLoaded(u) or IsUnitType(u, UNIT_TYPE_DEAD) then
            call UnitEventOnUnload()
        endif
        set udg_UDex=pdex
    endif
    set u=null
    return false
endfunction
function UnitEventOnSummon takes nothing returns boolean
    local integer pdex= udg_UDex
    set udg_UDex=GetUnitUserData(GetTriggerUnit())
    if udg_IsUnitNew[udg_UDex] then
        set udg_SummonerOfUnit[udg_UDex]=GetSummoningUnit()
        set udg_UnitIndexEvent=0.00
        set udg_UnitIndexEvent=0.50
        set udg_UnitIndexEvent=0.00
    endif
    set udg_UDex=pdex
    return false
endfunction
function UnitEventOnLoad takes nothing returns boolean
    local integer pdex= udg_UDex
    local integer i= GetUnitUserData(GetTriggerUnit())
    local integer index
    if i != 0 then
        set udg_UDex=i
        if udg_CargoTransportUnit[i] != null then
            call UnitEventOnUnload()
        endif
        //Loaded corpses do not issue an order when unloaded, therefore must
        //use the enter-region event method taken from Jesus4Lyf's Transport.
        if not udg_IsUnitAlive[i] then
            call SetUnitX(udg_UDexUnits[i], udg_WorldMaxX)
            call SetUnitY(udg_UDexUnits[i], udg_WorldMaxY)
        endif
        
        set udg_CargoTransportUnit[i]=GetTransportUnit()
        set index=GetUnitUserData(udg_CargoTransportUnit[i])
        if udg_CargoTransportGroup[index] == null then
            set udg_CargoTransportGroup[index]=CreateGroup()
        endif
        call GroupAddUnit(udg_CargoTransportGroup[index], udg_UDexUnits[i])
        set udg_CargoEvent=0.00
        set udg_CargoEvent=1.00
        set udg_CargoEvent=0.00
        set udg_UDex=pdex
    endif
    return false
endfunction
function UnitEventEnter takes nothing returns boolean
    local integer pdex= udg_UDex
    local integer i= udg_UDexLastRecycled
    local unit u= GetFilterUnit()
    //IF UNIT AS DECORATION ABILITY, DO NOT INDEX THIS UNIT
    if GetUnitAbilityLevel(u, 'A0C6') != 0 then
        call SetUnitUserData(u, 0)
        set u=null
        return false
    endif
    if udg_UnitIndexerEnabled and GetUnitAbilityLevel(u, udg_DetectRemoveAbility) == 0 then
        //Generate a unique integer index for this unit
        if i == 0 then
            set i=udg_UDexMax + 1
            set udg_UDexMax=i
        else
            set udg_UDexLastRecycled=udg_UDexPrev[i]
        endif
        //Link index to unit, unit to index
        set udg_UDexUnits[i]=u
        call SetUnitUserData(u, i)
        
        //For backwards-compatibility, add the unit to a linked list
        set udg_UDexNext[i]=udg_UDexNext[0]
        set udg_UDexPrev[udg_UDexNext[0]]=i
        set udg_UDexNext[0]=i
        set udg_UDexPrev[i]=0
        
        call UnitAddAbility(u, udg_DetectRemoveAbility)
        call UnitMakeAbilityPermanent(u, true, udg_DetectRemoveAbility)
        call UnitAddAbility(u, udg_DetectTransformAbility)
        set udg_UnitTypeOf[i]=GetUnitTypeId(u)
        set udg_IsUnitNew[i]=true
        set udg_IsUnitAlive[i]=true
        set udg_IsUnitRemoved[i]=false
        set udg_IsUnitReincarnating[i]=false
        set udg_IsUnitPreplaced[i]=udg_IsUnitPreplaced[0] //Added 29 May 2017 for Spellbound
        call UnitEventCheckAfterProxy(i)
        
        //Fire index event for UDex
        set udg_UDex=i
        set udg_UnitIndexEvent=0.00
        set udg_UnitIndexEvent=1.00
        set udg_UnitIndexEvent=0.00
    else
        set udg_UDex=GetUnitUserData(u)
        if udg_CargoTransportUnit[udg_UDex] != null and not IsUnitLoaded(u) then
            //The unit was dead, but has re-entered the map.
            call UnitEventOnUnload()
        endif
    endif
    set udg_UDex=pdex
    set u=null
    return false
endfunction
//===========================================================================
function UnitEventInit takes nothing returns nothing
    local integer i= bj_MAX_PLAYER_SLOTS
    local player p
    local trigger t= CreateTrigger()
    local trigger load= CreateTrigger()
    local trigger death= CreateTrigger()
    local trigger summon= CreateTrigger()
    local rect r= GetWorldBounds()
    local region re= CreateRegion()
    local boolexpr enterB= Filter(function UnitEventEnter)
    local boolexpr orderB= Filter(function UnitEventOnOrder)
    set udg_WorldMaxX=GetRectMaxX(r)
    set udg_WorldMaxY=GetRectMaxY(r)
    call RegionAddRect(re, r)
    call RemoveRect(r)
    call UnitEventDestroyGroup(0)
    call UnitEventDestroyGroup(1)
    
    set udg_UnitIndexerEnabled=true
    call TriggerRegisterEnterRegion(CreateTrigger(), re, enterB)
    call TriggerAddCondition(load, Filter(function UnitEventOnLoad))
    call TriggerAddCondition(death, Filter(function UnitEventOnDeath))
    call TriggerAddCondition(summon, Filter(function UnitEventOnSummon))
    loop
        set i=i - 1
        set p=Player(i)
        call SetPlayerAbilityAvailable(p, udg_DetectRemoveAbility, false)
        call SetPlayerAbilityAvailable(p, udg_DetectTransformAbility, false)
        call TriggerRegisterPlayerUnitEvent(summon, p, EVENT_PLAYER_UNIT_SUMMON, null)
        call TriggerRegisterPlayerUnitEvent(t, p, EVENT_PLAYER_UNIT_ISSUED_ORDER, orderB)
        call TriggerRegisterPlayerUnitEvent(death, p, EVENT_PLAYER_UNIT_DEATH, null)
        call TriggerRegisterPlayerUnitEvent(load, p, EVENT_PLAYER_UNIT_LOADED, null)
        call GroupEnumUnitsOfPlayer(bj_lastCreatedGroup, p, enterB)
        exitwhen i == 0
    endloop
    set summon=null
    set death=null
    set load=null
    set re=null
    set enterB=null
    set orderB=null
    set p=null
    set r=null
    set t=null
endfunction
function InitTrig_Unit_Event takes nothing returns nothing
endfunction//===========================================================================
// Trigger: Damage Engine Config
//===========================================================================
function Trig_Damage_Engine_Config_Conditions takes nothing returns boolean
    if ( not ( udg_UDex != 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Damage_Engine_Config_Actions takes nothing returns nothing
    // -
    // This trigger's conditions let you filter out units you don't want detection for.
    // NOTE: By default, units with Locust will not pass the check.
    // TIP: The unit is called UDexUnits[UDex] and its custom value is UDex
    // -
    // Copy the Cheat Death Ability from Object Editor into your map and set the following variable respectively:
    // -
    set udg_DamageBlockingAbility='A01S'
    // -
    // Copy the Detect Spell Damage Ability from Object Editor into your map and set the following variable respectively:
    // -
    set udg_SpellDamageAbility='A01T'
    // -
    // You can add extra classifications here if you want to differentiate between your triggered damage
    // Use DamageTypeExplosive (or any negative value damage type) if you want a unit killed by that damage to explode
    // -
    set udg_DamageTypeExplosive=- 1
    set udg_DamageTypeCriticalStrike=1
    set udg_DamageTypeHeal=2
    set udg_DamageTypeReduced=3
    set udg_DamageTypeBlocked=4
    // -
    // Leave the next Set statement disabled if you modified the Spell Damage Reduction item ability to 1.67 reduction
    // Otherwise, if you removed that ability from Runed Bracers, you'll need to enable this line:
    // -
    // -
    // Set the damage multiplication factor (1.00 being unmodified, increasing in damage over 1.00 and at 0 damage with 0.00)
    // NOTE. With the default values, Runed Bracers is reduces 33%, Elune's Grace reduces 20% and Ethereal increases 67%
    // -
    set udg_DAMAGE_FACTOR_BRACERS=0.67
    set udg_DAMAGE_FACTOR_ELUNES=0.80
    set udg_DAMAGE_FACTOR_ETHEREAL=1.67
    // -
    // Added 25 July 2017 to allow detection of things like Bash or Pulverize or AoESpread
    // -
    set udg_DamageEventAOE=1
    set udg_DamageEventLevel=1
    // -
    // Do not enable any of the following lines as they are simply variable declarations to make copying easier
    // -
endfunction

//===========================================================================
function InitTrig_Damage_Engine_Config takes nothing returns nothing
    set gg_trg_Damage_Engine_Config=CreateTrigger()
    call TriggerAddCondition(gg_trg_Damage_Engine_Config, Condition(function Trig_Damage_Engine_Config_Conditions))
    call TriggerAddAction(gg_trg_Damage_Engine_Config, function Trig_Damage_Engine_Config_Actions)
endfunction

//===========================================================================
// Trigger: Damage Engine
//===========================================================================
//===========================================================================
// Damage Engine lets you detect, amplify, block or nullify damage. It even
// lets you detect if the damage was physical or from a spell. Just reference
// DamageEventAmount/Source/Target or the boolean IsDamageSpell, to get the
// necessary damage event data.
//
// - Detect damage: use the event "DamageEvent Equal to 1.00"
// - To change damage before it's dealt: use the event "DamageModifierEvent Equal to 1.00"
// - Detect damage after it was applied, use the event "AfterDamageEvent Equal to 1.00"
// - Detect spell damage: use the condition "IsDamageSpell Equal to True"
// - Detect zero-damage: use the event "DamageEvent Equal to 2.00" (an AfterDamageEvent will not fire for this)
//
// You can specify the DamageEventType before dealing triggered damage. To prevent an already-improbable error, I recommend running the trigger "ClearDamageEvent (Checking Conditions)" after dealing triggered damage from within a damage event:
// - Set NextDamageType = DamageTypeWhatever
// - Unit - Cause...
// - Trigger - Run ClearDamageEvent (Checking Conditions)
//
// You can modify the DamageEventAmount and the DamageEventType from a "DamageModifierEvent Equal to 1.00" trigger.
// - If the amount is modified to negative, it will count as a heal.
// - If the amount is set to 0, no damage will be dealt.
//
// If you need to reference the original in-game damage, use the variable "DamageEventPrevAmt".
//
//===========================================================================
// Programming note about "integer i" and "udg_DmgEvRecursionN": integer i
// ranges from -1 upwards. "udg_DmgEvRecursionN" ranges from 0 upwards.
// "integer i" is always 1 less than "udg_DmgEvRecursionN"
//
function DmgEvResetVars takes nothing returns nothing
    local integer i= udg_DmgEvRecursionN - 2
    set udg_DmgEvRecursionN=i + 1
    if i >= 0 then
        set udg_DamageEventPrevAmt=udg_LastDmgPrevAmount[i]
        set udg_DamageEventAmount=udg_LastDmgValue[i]
        set udg_DamageEventSource=udg_LastDmgSource[i]
        set udg_DamageEventTarget=udg_LastDmgTarget[i]
        set udg_IsDamageSpell=udg_LastDmgWasSpell[i]
        set udg_DamageEventType=udg_LastDmgPrevType[i]
    endif
endfunction
function CheckDamagedLifeEvent takes boolean clear returns nothing
    if clear then
        set udg_NextDamageOverride=false
        set udg_NextDamageType=0
    endif
    if udg_DmgEvTrig != null then
        call DestroyTrigger(udg_DmgEvTrig)
        set udg_DmgEvTrig=null
        if udg_IsDamageSpell then
            call SetWidgetLife(udg_DamageEventTarget, RMaxBJ(udg_LastDamageHP, 0.41))
            if udg_LastDamageHP <= 0.405 then
                if udg_DamageEventType < 0 then
                    call SetUnitExploded(udg_DamageEventTarget, true)
                endif
                //Kill the unit
                call DisableTrigger(udg_DamageEventTrigger)
                call UnitDamageTarget(udg_DamageEventSource, udg_DamageEventTarget, - 999, false, false, null, DAMAGE_TYPE_UNIVERSAL, null)
                call EnableTrigger(udg_DamageEventTrigger)
            endif
        elseif GetUnitAbilityLevel(udg_DamageEventTarget, udg_DamageBlockingAbility) > 0 then
            call UnitRemoveAbility(udg_DamageEventTarget, udg_DamageBlockingAbility)
            call SetWidgetLife(udg_DamageEventTarget, udg_LastDamageHP)
        endif
        if udg_DamageEventAmount != 0.00 and not udg_HideDamageFrom[GetUnitUserData(udg_DamageEventSource)] then
            set udg_AfterDamageEvent=0.00
            set udg_AfterDamageEvent=1.00
            set udg_AfterDamageEvent=0.00
        endif
        call DmgEvResetVars()
    endif
endfunction
   
function DmgEvOnAOEEnd takes nothing returns nothing
    if udg_DamageEventAOE > 1 then
        set udg_AOEDamageEvent=0.00
        set udg_AOEDamageEvent=1.00
        set udg_AOEDamageEvent=0.00
        set udg_DamageEventAOE=1
    endif
    set udg_DamageEventLevel=1
    set udg_EnhancedDamageTarget=null
    call GroupClear(udg_DamageEventAOEGroup)
endfunction
   
function DmgEvOnExpire takes nothing returns nothing
    set udg_DmgEvStarted=false
    call CheckDamagedLifeEvent(true)
    //Reset things so they don't perpetuate for AoE/Level target detection
    call DmgEvOnAOEEnd()
    set udg_DamageEventTarget=null
    set udg_DamageEventSource=null
endfunction
function PreCheckDamagedLifeEvent takes nothing returns boolean
    call CheckDamagedLifeEvent(true)
    return false
endfunction
function OnUnitDamage takes nothing returns boolean
    local boolean override= udg_DamageEventOverride
    local integer i
    local integer e= udg_DamageEventLevel
    local integer a= udg_DamageEventAOE
    local string s
    local real prevAmount
    local real life
    local real prevLife
    local unit u
    local unit f
    call CheckDamagedLifeEvent(false) //in case the unit state event failed and the 0.00 second timer hasn't yet expired
    set i=udg_DmgEvRecursionN - 1 //Had to be moved here due to false recursion tracking
    if i < 0 then
        //Added 25 July 2017 to detect AOE damage or multiple single-target damage
        set u=udg_DamageEventTarget
        set f=udg_DamageEventSource
    elseif i < 16 then
        set udg_LastDmgPrevAmount[i]=udg_DamageEventPrevAmt
        set udg_LastDmgValue[i]=udg_DamageEventAmount
        set udg_LastDmgSource[i]=udg_DamageEventSource
        set udg_LastDmgTarget[i]=udg_DamageEventTarget
        set udg_LastDmgWasSpell[i]=udg_IsDamageSpell
        set udg_LastDmgPrevType[i]=udg_DamageEventType
    else
        set s="WARNING: Recursion error when dealing damage! Make sure when you deal damage from within a DamageEvent trigger, do it like this:\n\n"
        set s=s + "Trigger - Turn off (This Trigger)\n"
        set s=s + "Unit - Cause...\n"
        set s=s + "Trigger - Turn on (This Trigger)"
       
        //Delete the next couple of lines to disable the in-game recursion crash warnings
        call ClearTextMessages()
        call DisplayTimedTextToPlayer(GetLocalPlayer(), 0.00, 0.00, 10., s)
        return false
    endif
    set udg_DmgEvRecursionN=i + 2
    set prevAmount=GetEventDamage()
    set udg_DamageEventTarget=GetTriggerUnit()
    set udg_DamageEventSource=GetEventDamageSource()
   
    set udg_DamageEventAmount=prevAmount
   
    set udg_DamageEventType=udg_NextDamageType
    set udg_NextDamageType=0
    set udg_DamageEventOverride=udg_NextDamageOverride
    set udg_NextDamageOverride=false
   
    if i < 0 then
        //Added 25 July 2017 to detect AOE damage or multiple single-target damage
        if udg_DamageEventType == 0 then
            if f == udg_DamageEventSource then
                //Source has damaged more than once
                if IsUnitInGroup(udg_DamageEventTarget, udg_DamageEventAOEGroup) then
                    //Added 5 August 2017 to improve tracking of enhanced damage against, say, Pulverize
                    set udg_DamageEventLevel=udg_DamageEventLevel + 1
                    set udg_EnhancedDamageTarget=udg_DamageEventTarget
                else
                    //Multiple targets hit by this source - flag as AOE
                    set udg_DamageEventAOE=udg_DamageEventAOE + 1
                endif
            else
                //New damage source - unflag everything
                set u=udg_DamageEventSource
                set udg_DamageEventSource=f
                call DmgEvOnAOEEnd()
                set udg_DamageEventSource=u
            endif
            call GroupAddUnit(udg_DamageEventAOEGroup, udg_DamageEventTarget)
        endif
        if not udg_DmgEvStarted then
            set udg_DmgEvStarted=true
            call TimerStart(udg_DmgEvTimer, 0.00, false, function DmgEvOnExpire)
        endif
    endif
   
    if prevAmount == 0.00 then
        if not udg_HideDamageFrom[GetUnitUserData(udg_DamageEventSource)] then
            set udg_DamageEventPrevAmt=0.00
            set udg_DamageEvent=0.00
            set udg_DamageEvent=2.00
            set udg_DamageEvent=0.00
        endif
        call DmgEvResetVars()
    else
        set u=udg_DamageEventTarget
        set udg_IsDamageSpell=prevAmount < 0.00
        if udg_IsDamageSpell then
            set prevAmount=- udg_DamageEventAmount
            set life=1.00
            if IsUnitType(u, UNIT_TYPE_ETHEREAL) and not IsUnitType(u, UNIT_TYPE_HERO) then
                set life=life * udg_DAMAGE_FACTOR_ETHEREAL //1.67
            endif
            if GetUnitAbilityLevel(u, 'Aegr') > 0 then
                set life=life * udg_DAMAGE_FACTOR_ELUNES //0.80
            endif
            if udg_DmgEvBracers != 0 and IsUnitType(u, UNIT_TYPE_HERO) then
                //Inline of UnitHasItemOfTypeBJ without the potential handle ID leak.
                set i=6
                loop
                    set i=i - 1
                    if GetItemTypeId(UnitItemInSlot(u, i)) == udg_DmgEvBracers then
                        set life=life * udg_DAMAGE_FACTOR_BRACERS //0.67
                        exitwhen true
                    endif
                    exitwhen i == 0
                endloop
            endif
            set udg_DamageEventAmount=prevAmount * life
        endif
        set udg_DamageEventPrevAmt=prevAmount
        set udg_DamageModifierEvent=0.00
        if not udg_DamageEventOverride then
            set udg_DamageModifierEvent=1.00
            if not udg_DamageEventOverride then
                set udg_DamageModifierEvent=2.00
                set udg_DamageModifierEvent=3.00
            endif
        endif
        set udg_DamageEventOverride=override
        if udg_DamageEventAmount > 0.00 then
            set udg_DamageModifierEvent=4.00
        endif
        set udg_DamageModifierEvent=0.00
        if not udg_HideDamageFrom[GetUnitUserData(udg_DamageEventSource)] then
            set udg_DamageEvent=0.00
            set udg_DamageEvent=1.00
            set udg_DamageEvent=0.00
        endif
        call CheckDamagedLifeEvent(true) //in case the unit state event failed from a recursive damage event
       
        //All events have run and the damage amount is finalized.
        set life=GetWidgetLife(u)
        set udg_DmgEvTrig=CreateTrigger()
        call TriggerAddCondition(udg_DmgEvTrig, Filter(function PreCheckDamagedLifeEvent))
        if not udg_IsDamageSpell then
            if udg_DamageEventAmount != prevAmount then
                set life=life + prevAmount - udg_DamageEventAmount
                if GetUnitState(u, UNIT_STATE_MAX_LIFE) < life then
                    set udg_LastDamageHP=life - prevAmount
                    call UnitAddAbility(u, udg_DamageBlockingAbility)
                endif
                call SetWidgetLife(u, RMaxBJ(life, 0.42))
            endif
            call TriggerRegisterUnitStateEvent(udg_DmgEvTrig, u, UNIT_STATE_LIFE, LESS_THAN, RMaxBJ(0.41, life - prevAmount / 2.00))
        else
            set udg_LastDamageHP=GetUnitState(u, UNIT_STATE_MAX_LIFE)
            set prevLife=life
            if life + prevAmount * 0.75 > udg_LastDamageHP then
                set life=RMaxBJ(udg_LastDamageHP - prevAmount / 2.00, 1.00)
                call SetWidgetLife(u, life)
                set life=( life + udg_LastDamageHP ) / 2.00
            else
                set life=life + prevAmount * 0.50
            endif
            set udg_LastDamageHP=prevLife - ( prevAmount - ( prevAmount - udg_DamageEventAmount ) )
            call TriggerRegisterUnitStateEvent(udg_DmgEvTrig, u, UNIT_STATE_LIFE, GREATER_THAN, life)
        endif
    endif
    set u=null
    set f=null
    return false
endfunction
function CreateDmgEvTrg takes nothing returns nothing
    set udg_DamageEventTrigger=CreateTrigger()
    call TriggerAddCondition(udg_DamageEventTrigger, Filter(function OnUnitDamage))
endfunction
function SetupDmgEv takes nothing returns boolean
    local integer i= udg_UDex
    local unit u
    if udg_UnitIndexEvent == 1.00 then
        set u=udg_UDexUnits[i]
        if GetUnitAbilityLevel(u, 'Aloc') == 0 and TriggerEvaluate(gg_trg_Damage_Engine_Config) then
            set udg_UnitDamageRegistered[i]=true
            call TriggerRegisterUnitEvent(udg_DamageEventTrigger, u, EVENT_UNIT_DAMAGED)
            call UnitAddAbility(u, udg_SpellDamageAbility)
            call UnitMakeAbilityPermanent(u, true, udg_SpellDamageAbility)
        endif
        set u=null
    else
        set udg_HideDamageFrom[i]=false
        if udg_UnitDamageRegistered[i] then
            set udg_UnitDamageRegistered[i]=false
            set udg_DamageEventsWasted=udg_DamageEventsWasted + 1
            if udg_DamageEventsWasted == 32 then //After 32 registered units have been removed...
                set udg_DamageEventsWasted=0
               
                //Rebuild the mass EVENT_UNIT_DAMAGED trigger:
                call DestroyTrigger(udg_DamageEventTrigger)
                call CreateDmgEvTrg()
                set i=udg_UDexNext[0]
                loop
                    exitwhen i == 0
                    if udg_UnitDamageRegistered[i] then
                        call TriggerRegisterUnitEvent(udg_DamageEventTrigger, udg_UDexUnits[i], EVENT_UNIT_DAMAGED)
                    endif
                    set i=udg_UDexNext[i]
                endloop
            endif
        endif
    endif
    return false
endfunction
   
//===========================================================================
function InitTrig_Damage_Engine takes nothing returns nothing
    local unit u= CreateUnit(Player(bj_PLAYER_NEUTRAL_EXTRA), 'uloc', 0, 0, 0)
    local integer i= bj_MAX_PLAYERS
   
    //Create this trigger with UnitIndexEvents in order add and remove units
    //as they are created or removed.
    local trigger t= CreateTrigger()
    call TriggerRegisterVariableEvent(t, "udg_UnitIndexEvent", EQUAL, 1.00)
    call TriggerRegisterVariableEvent(t, "udg_UnitIndexEvent", EQUAL, 2.00)
    call TriggerAddCondition(t, Filter(function SetupDmgEv))
    set t=null
   
    //Run the configuration trigger to set all configurables:
    if gg_trg_Damage_Engine_Config == null then
        //It's possible this InitTrig_ function ran first, in which case use ExecuteFunc.
        call ExecuteFunc("Trig_Damage_Engine_Config_Actions")
    else
        call TriggerExecute(gg_trg_Damage_Engine_Config)
    endif
   
    //Create trigger for storing all EVENT_UNIT_DAMAGED events.
    call CreateDmgEvTrg()
   
    //Create GUI-friendly trigger for cleaning up after UnitDamageTarget.
    set udg_ClearDamageEvent=CreateTrigger()
    call TriggerAddCondition(udg_ClearDamageEvent, Filter(function PreCheckDamagedLifeEvent))
   
    //Disable SpellDamageAbility for every player.
    loop
        set i=i - 1
        call SetPlayerAbilityAvailable(Player(i), udg_SpellDamageAbility, false)
        exitwhen i == 0
    endloop
   
    //Preload abilities.
    call UnitAddAbility(u, udg_DamageBlockingAbility)
    call UnitAddAbility(u, udg_SpellDamageAbility)
    call RemoveUnit(u)
    set u=null
endfunction//===========================================================================
// Trigger: Life Drain Fix
//
// Copy this trigger into your map if you want to fix the life drain abilitity. It comes with a potential weird side-effect: if you had already cast a damage over time ability on the damage target from the damage source before life draining, it will heal off of that damage over time ability as well. Without triggering life drain completely on your own, there is no way to prevent this. However, this issue does not affect the Dark Ranger since she only has that one damage-over-time ability.
//===========================================================================
function Trig_Life_Drain_Fix_Conditions takes nothing returns boolean
    if ( not ( udg_IsDamageSpell == true ) ) then
        return false
    endif
    if ( not ( UnitHasBuffBJ(udg_DamageEventSource, 'Bdcl') == true ) ) then
        return false
    endif
    if ( not ( UnitHasBuffBJ(udg_DamageEventTarget, 'Bdtl') == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Life_Drain_Fix_Actions takes nothing returns nothing
    call SetUnitLifeBJ(udg_DamageEventSource, ( GetUnitStateSwap(UNIT_STATE_LIFE, udg_DamageEventSource) + udg_DamageEventAmount ))
endfunction

//===========================================================================
function InitTrig_Life_Drain_Fix takes nothing returns nothing
    set gg_trg_Life_Drain_Fix=CreateTrigger()
    call TriggerRegisterVariableEvent(gg_trg_Life_Drain_Fix, "udg_AfterDamageEvent", EQUAL, 1.00)
    call TriggerAddCondition(gg_trg_Life_Drain_Fix, Condition(function Trig_Life_Drain_Fix_Conditions))
    call TriggerAddAction(gg_trg_Life_Drain_Fix, function Trig_Life_Drain_Fix_Actions)
endfunction

//===========================================================================
// Trigger: Damage Tag
//
// Hashtable_Bonuses
// 'phyB': Physical damage bonus
// 'splB': Spell damage bonus
// 'bthB': Both damage bonus
// 'phyM': Damage multiplier
// 'splM': Spell multiplier
// 'bthM': Both multiplier
// 'LiSA' : Life steal absolute
// 'LiSP' : Life steal percent
// 'MaSA': Mana steal absolute
// 'MaSP': Mana steal percent
// 'phyA': Physical damage absorption
// 'splA': Spell damage absorption
// 'bthA': Both damage absorption
// 'phyR': Damage reduction
// 'splR': Spell reduction
// 'bthR': Both reduction
//===========================================================================

function DamageDetectionFunctions_Both takes nothing returns nothing

//Divine Shell
    if ( GetUnitAbilityLevel(udg_DamageEventTarget, 'B02C') > 0 ) then
        set udg_Damage_Mod_Multiplier=( udg_Damage_Mod_Multiplier / 2.00 )
    endif
//--------------

//Lich King (The Immortal King passive)
    if GetUnitAbilityLevel(udg_DamageEventSource, 'A030') > 0 then
        call SetUnitState(udg_DamageEventSource, UNIT_STATE_LIFE, RMaxBJ(0, GetUnitState(udg_DamageEventSource, UNIT_STATE_LIFE) + udg_DamageEventAmount / 5))
        call SetUnitState(udg_DamageEventSource, UNIT_STATE_MANA, RMaxBJ(0, GetUnitState(udg_DamageEventSource, UNIT_STATE_MANA) + udg_DamageEventAmount / 10))
        call DestroyEffect(AddSpecialEffectTarget("Abilities\\Spells\\Other\\HealingSpray\\HealBottleMissile.mdl", udg_DamageEventSource, "origin"))
        call CreateTextTagUnitBJ(( "+" + I2S(R2I(RAbsBJ(udg_DamageEventAmount / 5))) ), udg_DamageEventSource, 50.00, 13.00, 5.00, 100.00, 10.00, 0)
        call SetTextTagVelocityBJ(bj_lastCreatedTextTag, 75.00, 90.00)
        call SetTextTagPermanent(bj_lastCreatedTextTag, false)
        call SetTextTagLifespan(bj_lastCreatedTextTag, 3.50)
        call SetTextTagFadepoint(bj_lastCreatedTextTag, 1.40)
    endif

    if GetUnitAbilityLevel(udg_DamageEventTarget, 'A030') > 0 then
        if udg_DamageEventAmount > 100 then
            set udg_Damage_Mod_Maximum=100
        endif
    endif
//--------------

//Aura of Retribution (Tyrael)
    if GetUnitAbilityLevel(udg_DamageEventTarget, 'B000') > 0 then
        set udg_Damage_Mod_Multiplier=udg_Damage_Mod_Multiplier * 0.90
    endif
//--------------

//Heaven's Reckoning (Tyrael)
    if ( GetUnitAbilityLevel(udg_DamageEventSource, 'B02X') > 0 ) then
        set udg_GDS_Type=udg_GDS_cSTUN
        set udg_GDS_Target=udg_DamageEventSource
        if IsUnitType(udg_DamageEventSource, UNIT_TYPE_HERO) then
            set udg_GDS_Duration=0.66
        else
            set udg_GDS_Duration=1.01
        endif
        call TriggerExecute(gg_trg_GDS_Main_Modifier)
    endif
//--------------
endfunction

function DamageDetectionFunctions_Spell takes nothing returns nothing
//Lion's Strike passive (Anduin Lothar)
    if ( GetUnitAbilityLevel(udg_DamageEventSource, 'A023') != 0 and GetRandomInt(1, 10) <= 5 ) then
        set udg_Damage_Mod_Multiplier=( udg_Damage_Mod_Multiplier * 1.50 )
        set udg_GDS_Type=udg_GDS_cSTUN
        set udg_GDS_Duration=1.50
        set udg_GDS_Target=udg_DamageEventTarget
        call TriggerExecute(gg_trg_GDS_Main_Modifier)
    endif
//--------------

//Storm Bolt Stun (AoE & non-AoE)
    if ( GetUnitAbilityLevel(udg_DamageEventTarget, 'B01W') > 0 ) then
        call UnitRemoveAbility(udg_DamageEventTarget, 'B01W')
        set udg_GDS_Type=udg_GDS_cSTUN
        if IsUnitType(udg_DamageEventTarget, UNIT_TYPE_HERO) then
            set udg_GDS_Duration=3.00
        else
            set udg_GDS_Duration=5.00
        endif
        set udg_GDS_Target=udg_DamageEventTarget
        call TriggerExecute(gg_trg_GDS_Main_Modifier)
    endif
//--------------

//Greater Frost Armor (Spell Damage Reduction)
    if GetUnitAbilityLevel(udg_DamageEventTarget, 'B02R') > 0 then
        set udg_Damage_Mod_Multiplier=udg_Damage_Mod_Multiplier * 0.75
    endif
//--------------
endfunction

function DamageDetectionFunctions_Last takes nothing returns nothing
    local real storeDamage= udg_DamageEventAmount
    local integer sourceUserData
    
// Aura of Resitution
    if GetUnitAbilityLevel(udg_DamageEventSource, 'A05Q') > 0 then
        set sourceUserData=GetUnitUserData(udg_DamageEventSource)
        if udg_Abilities_AoRest_DmgDone[sourceUserData] == 0 then
            call GroupAddUnit(udg_Abilities_AoRest_UnitGroup, udg_DamageEventSource)
            set udg_Abilities_AoRest_DmgDone[sourceUserData]=udg_DamageEventAmount
        else
            set udg_Abilities_AoRest_DmgDone[sourceUserData]=udg_DamageEventAmount + udg_Abilities_AoRest_DmgDone[sourceUserData]
        endif
    endif
    
//Aura of Retribution
    if GetUnitAbilityLevel(udg_DamageEventTarget, 'B000') > 0 then
        set udg_Damage_Mod_Reset=false
        set udg_Damage_Mod_Multiplier=1
        set udg_Damage_Mod_Add=0
        set udg_Damage_Mod_Minimum=10
        set udg_Damage_Mod_Maximum=- 1
        set udg_Damage_Mod_AllowReflect=false
        call UnitDamageTarget(udg_DamageEventTarget, udg_DamageEventSource, udg_DamageEventAmount * 10 / 90, true, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, WEAPON_TYPE_WHOKNOWS)
    endif
    
    set udg_DamageEventAmount=storeDamage
//--------------
endfunction

function Trig_Damage_Tag_Actions takes nothing returns nothing
    local real storeDamage
    if udg_Damage_Mod_Reset then
        set udg_Damage_Mod_Multiplier=1
        set udg_Damage_Mod_Add=0
        set udg_Damage_Mod_Minimum=0
        set udg_Damage_Mod_Maximum=- 1
    else
        set udg_Damage_Mod_Reset=true
    endif
    if udg_DamageTypeSpell then
        set udg_IsDamageSpell=true
        set udg_DamageTypeSpell=false
    endif
    
    //Check if damaging unit is a dummy
    if (HaveSavedHandle((ArrayAgent_hashTable), ((- GetHandleId((udg_DamageEventSource)))), 0)) then // INLINED!!
        if (HaveSavedInteger((ArrayAgent_hashTable), ((- GetHandleId((udg_DamageEventSource)))), 1)) then // INLINED!!
            call TriggerEvaluate(LoadTriggerHandle(udg_Hashtable_2, (LoadInteger((ArrayAgent_hashTable), ((- GetHandleId((udg_DamageEventSource)))), 1)), 0)) // INLINED!!
        endif
        if IsUnitType(udg_DamageEventTarget, UNIT_TYPE_ETHEREAL) then
            //Unit is ETHEREAL, thus can't deal universal physical damage
            //No way to fix the damage source, change Source variable to Spellcaster
            set udg_DamageEventSource=(LoadUnitHandle((ArrayAgent_hashTable), ((- GetHandleId((udg_DamageEventSource)))), 0)) // INLINED!!
        else
            //Make damage detal 0 and make Spellcaster deal damage equal to damage dealt
            //Deal Chaos damage (no reduction or increase by armor) of type Universal
            set storeDamage=0
            set udg_DamageTypeSpell=true
            call UnitDamageTarget((LoadUnitHandle((ArrayAgent_hashTable), ((- GetHandleId((udg_DamageEventSource)))), 0)), udg_DamageEventTarget, udg_DamageEventAmount, true, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNIVERSAL, WEAPON_TYPE_WHOKNOWS) // INLINED!!
            set udg_DamageEventAmount=storeDamage
            return
        endif
    endif
    if ( udg_DamageEventType == udg_DamageTypeHeal ) then
        call CreateTextTagUnitBJ(( "+" + I2S(R2I(RAbsBJ(udg_DamageEventAmount))) ), udg_DamageEventTarget, 50.00, 13.00, 5.00, 100.00, 10.00, 0)
        call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 75.00, 90.00)
        call SetTextTagPermanent(GetLastCreatedTextTag(), false)
        call SetTextTagLifespan(GetLastCreatedTextTag(), 3.50)
        call SetTextTagFadepoint(GetLastCreatedTextTag(), 1.40)
    else
    
        call DamageDetectionFunctions_Both()
        
        if ( udg_DamageEventType == udg_DamageTypeReduced ) then
            if udg_Damage_Mod_Maximum < 0 then
                set udg_DamageEventAmount=RMaxBJ(( udg_DamageEventAmount + udg_Damage_Mod_Add ) * udg_Damage_Mod_Multiplier, udg_Damage_Mod_Minimum)
            else
                set udg_DamageEventAmount=RMaxBJ(RMinBJ(( udg_DamageEventAmount + udg_Damage_Mod_Add ) * udg_Damage_Mod_Multiplier, udg_Damage_Mod_Maximum), udg_Damage_Mod_Minimum)
            endif
            call CreateTextTagUnitBJ(( "" + I2S(R2I(udg_DamageEventAmount)) ), udg_DamageEventTarget, 50.00, 13.00, 65.00, 10.00, 65.00, 0)
            call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 75.00, 90.00)
            call SetTextTagPermanent(GetLastCreatedTextTag(), false)
            call SetTextTagLifespan(GetLastCreatedTextTag(), 3.50)
            call SetTextTagFadepoint(GetLastCreatedTextTag(), 1.40)
            if udg_Damage_Mod_AllowReflect then
                call DamageDetectionFunctions_Last()
            else
                set udg_Damage_Mod_AllowReflect=true
            endif
        else
            if ( udg_IsDamageSpell == true ) then
                call DamageDetectionFunctions_Spell()
                if udg_Damage_Mod_Maximum < 0 then
                    set udg_DamageEventAmount=RMaxBJ(( udg_DamageEventAmount + udg_Damage_Mod_Add ) * udg_Damage_Mod_Multiplier, udg_Damage_Mod_Minimum)
                else
                    set udg_DamageEventAmount=RMaxBJ(RMinBJ(( udg_DamageEventAmount + udg_Damage_Mod_Add ) * udg_Damage_Mod_Multiplier, udg_Damage_Mod_Maximum), udg_Damage_Mod_Minimum)
                endif
                
                if ENABLE_TAGS then
                    call CombatTag_Register(udg_DamageEventTarget , udg_DamageEventAmount , CombatTag_SPELL_DAMAGE)
                endif
                
                if udg_Damage_Mod_AllowReflect then
                    call DamageDetectionFunctions_Last()
                else
                    set udg_Damage_Mod_AllowReflect=true
                endif
            else
                if udg_Damage_Mod_Maximum < 0 then
                    set udg_DamageEventAmount=RMaxBJ(( udg_DamageEventAmount + udg_Damage_Mod_Add ) * udg_Damage_Mod_Multiplier, udg_Damage_Mod_Minimum)
                else
                    set udg_DamageEventAmount=RMaxBJ(RMinBJ(( udg_DamageEventAmount + udg_Damage_Mod_Add ) * udg_Damage_Mod_Multiplier, udg_Damage_Mod_Maximum), udg_Damage_Mod_Minimum)
                endif
                
                if ENABLE_TAGS then
                    call CombatTag_Register(udg_DamageEventTarget , udg_DamageEventAmount , CombatTag_PHYS_DAMAGE)
                endif
                
                if udg_Damage_Mod_AllowReflect then
                    call DamageDetectionFunctions_Last()
                else
                    set udg_Damage_Mod_AllowReflect=true
                endif
            endif
        endif
    endif
endfunction

//===========================================================================
function InitTrig_Damage_Tag takes nothing returns nothing
    set gg_trg_Damage_Tag=CreateTrigger()
    call TriggerRegisterVariableEvent(gg_trg_Damage_Tag, "udg_DamageEvent", EQUAL, 1.00)
    call TriggerAddAction(gg_trg_Damage_Tag, function Trig_Damage_Tag_Actions)
endfunction

//===========================================================================
// Trigger: Bash
//===========================================================================
//===========================================================================
// Trigger: Combat Tag
//===========================================================================
// Trigger: Spell System Config
//===========================================================================
function Trig_Spell_System_Config_Actions takes nothing returns nothing
    // Only one dummy unit type is needed as you can attach an effect to it of any kind
    //  
    set udg_Spell__DummyType='n000'
    set udg_Spell__DummyOwner=Player(bj_PLAYER_NEUTRAL_EXTRA)
    set udg_Spell__Interval=( 1 / 32.00 )
    //  
    // Configure default values for the unit filter:
    //  
    set udg_Spell__Filter_AllowEnemy=true
    set udg_Spell__Filter_AllowLiving=true
    set udg_Spell__Filter_AllowHero=true
    set udg_Spell__Filter_AllowNonHero=true
    set udg_Spell__Filter_AllowAlly=false
    set udg_Spell__Filter_AllowDead=false
    set udg_Spell__Filter_AllowFlying=false
    set udg_Spell__Filter_AllowMechanical=false
    set udg_Spell__Filter_AllowStructure=false
    //  
    // Magic immunity is a great thing to block, as it also discludes invulnerable units from being picked
    //  
    set udg_Spell__Filter_AllowMagicImmune=false
    //  
    // Normal WC3 abilities, like Channel, wake sleeping creeps - even if they don't deal damage or apply buffs.
    // Because of this, I provided an option to wake up creeps when they are enumerated by an InRange command.
    //  
    set udg_Spell__WakeTargets=true
    //  
    // Do not enable the following lines as they are variable declarations which make copying this system easier
    //  
endfunction

//===========================================================================
function InitTrig_Spell_System_Config takes nothing returns nothing
    set gg_trg_Spell_System_Config=CreateTrigger()
    call TriggerAddAction(gg_trg_Spell_System_Config, function Trig_Spell_System_Config_Actions)
endfunction

//===========================================================================
// Trigger: Spell System
//===========================================================================
function SpellIndexGetVars takes integer i returns nothing
    set udg_Spell__Ability=udg_Spell_i_Abil[udg_Spell_i_Head[i]]
    set udg_Spell__Index=i
    set udg_Spell__Caster=udg_Spell_i_Caster[i]
    set udg_Spell__CasterOwner=GetOwningPlayer(udg_Spell__Caster)
    set udg_Spell__Level=udg_Spell_i_Level[i]
    set udg_Spell__LevelMultiplier=udg_Spell__Level //Spell__LevelMultiplier is a real variable.
    set udg_Spell__Target=udg_Spell_i_Target[i]
    
    //Magic to ensure the locations never leak.
    call MoveLocation(udg_Spell__CastPoint, GetUnitX(udg_Spell__Caster), GetUnitY(udg_Spell__Caster))
    if udg_Spell__Target == null then
        call MoveLocation(udg_Spell__TargetPoint, udg_Spell_i_TargetX[i], udg_Spell_i_TargetY[i])
    else
        call MoveLocation(udg_Spell__TargetPoint, GetUnitX(udg_Spell__Target), GetUnitY(udg_Spell__Target))
    endif
    set udg_Spell__TargetGroup=udg_Spell_i_TargetGroup[i]
    set udg_Spell__Completed=udg_Spell_i_Completed[i]
    set udg_Spell__Channeling=udg_Spell_i_Channeling[i]
endfunction

function SpellSetFilters takes integer i returns nothing
    set udg_Spell_i_AllowEnemy[i]=udg_Spell__Filter_AllowEnemy
    set udg_Spell_i_AllowAlly[i]=udg_Spell__Filter_AllowAlly
    set udg_Spell_i_AllowDead[i]=udg_Spell__Filter_AllowDead
    set udg_Spell_i_AllowLiving[i]=udg_Spell__Filter_AllowLiving
    set udg_Spell_i_AllowMagicImmune[i]=udg_Spell__Filter_AllowMagicImmune
    set udg_Spell_i_AllowMechanical[i]=udg_Spell__Filter_AllowMechanical
    set udg_Spell_i_AllowStructure[i]=udg_Spell__Filter_AllowStructure
    set udg_Spell_i_AllowFlying[i]=udg_Spell__Filter_AllowFlying
    set udg_Spell_i_AllowHero[i]=udg_Spell__Filter_AllowHero
    set udg_Spell_i_AllowNonHero[i]=udg_Spell__Filter_AllowNonHero
endfunction

function SpellIndexDestroy takes integer i returns nothing
    local integer indexOf
    local integer index
    if udg_Spell_i_RecycleList[i] >= 0 then
        return
    endif
    //If the caster is still channeling on the spell, don't destroy until it's finished:
    if not udg_Spell_i_Channeling[i] then
        set index=udg_Spell_i_Head[i]
        set udg_Spell_i_RecycleList[i]=udg_Spell_i_Recycle
        set udg_Spell_i_Recycle=i
        
        //Reset things to defaults:
        set udg_Spell_i_Time[i]=0.00
        set udg_Spell_i_LastTime[i]=0.00
        set udg_Spell_i_Duration[i]=0.00
        set udg_Spell_i_Completed[i]=false
        set udg_Spell_i_Caster[i]=null
        set udg_Spell_i_Target[i]=null
        set udg_Spell_i_OnLoopStack[i]=null
        
        //Recycle any applicable target unit group.
        if udg_Spell_i_TargetGroup[i] != null then
            call GroupClear(udg_Spell_i_TargetGroup[i])
            set udg_Spell_i_GroupStack[udg_Spell_i_GroupN]=udg_Spell_i_TargetGroup[i]
            set udg_Spell_i_GroupN=udg_Spell_i_GroupN + 1
            set udg_Spell_i_TargetGroup[i]=null
        endif
        
        //Clear any user-specified data in the hashtable:
        call FlushChildHashtable(udg_Spell__Hash, i)
        //call BJDebugMsg("Destroying index: " + I2S(i))
    endif
    
    set indexOf=udg_Spell_i_StackRef[i]
    if indexOf >= 0 then
        set index=udg_Spell_i_StackN - 1
        set udg_Spell_i_StackN=index
        
        set udg_Spell_i_StackRef[udg_Spell_i_Stack[index]]=indexOf
        set udg_Spell_i_Stack[indexOf]=udg_Spell_i_Stack[index]
        if index == 0 then
            //If no more spells require the timer, pause it.
            call PauseTimer(udg_Spell_i_Timer)
        endif
        set udg_Spell_i_StackRef[i]=- 1
    endif
endfunction

function SpellTriggerExecute takes integer i,trigger t returns real
    local real d= udg_Spell_i_Duration[i]
    local boolean b= false
    set udg_Spell__Duration=d
    set udg_Spell__Time=0.00
    if t != null then
        set udg_Spell__Trigger_OnLoop=null
        set udg_Spell__Expired=d <= 0.00 //If the duration is <= 0, the spell has expired.
        call SpellIndexGetVars(i)
        if TriggerEvaluate(t) then
            call TriggerExecute(t)
        endif
        if udg_Spell__Trigger_OnLoop != null then
            set udg_Spell_i_OnLoopStack[i]=udg_Spell__Trigger_OnLoop
        endif
        //The remaining lines in this function process the duration specified by the user.
        if udg_Spell__StartDuration then
            set udg_Spell__StartDuration=false
            set udg_Spell__Duration=udg_Spell_i_Duration[udg_Spell_i_Head[i]] + udg_Spell_i_LastTime[udg_Spell_i_Head[i]] * udg_Spell__LevelMultiplier
        elseif ( udg_Spell__Expired and d > 0.00 ) or ( udg_Spell__Duration <= 0.00 ) then
            set udg_Spell__Duration=0.00
            return udg_Spell__Time
            //The user manually expired the spell or the spell duration ended on its own.
        endif
        if d != udg_Spell__Duration then
            //A new duration has been assigned
            set d=udg_Spell__Duration
            set b=true
        endif
        set udg_Spell__Duration=0.00
        if udg_Spell__Time == 0.00 then
            if udg_Spell_i_LastTime[i] == 0.00 then
                if udg_Spell_i_Time[udg_Spell_i_Head[i]] > 0.00 then
                    //The user specified a default interval to follow:
                    set udg_Spell__Time=udg_Spell_i_Time[udg_Spell_i_Head[i]]
                else
                    //Set the spell time to the minimum.
                    set udg_Spell__Time=udg_Spell__Interval
                endif
            else
                //Otherwise, set it to what it was before.
                set udg_Spell__Time=udg_Spell_i_LastTime[i]
            endif
        //else, the user is specifying a new time for the spell.
        endif
        set udg_Spell_i_LastTime[i]=udg_Spell__Time //Whatever the case, remember this time for next time.
        if b then
            //The duration was just assigned
            set udg_Spell_i_Duration[i]=d
        else
            //The duration has been ongoing
            set udg_Spell_i_Duration[i]=d - udg_Spell__Time
        endif
    endif
    return udg_Spell__Time
endfunction

//===========================================================================
// Runs every Spell__Interval seconds and handles all of the timed events.
// 
function SpellTimerLoop takes nothing returns nothing
    local integer i= udg_Spell_i_StackN
    local integer node
    local real time
    set udg_Spell__Running=true
    
    //Run stack top to bottom to avoid skipping slots when destroying.
    loop
        set i=i - 1
        exitwhen i < 0
        set node=udg_Spell_i_Stack[i]
        set time=udg_Spell_i_Time[node] - udg_Spell__Interval
        if time <= 0.00 then
            set time=SpellTriggerExecute(node , udg_Spell_i_OnLoopStack[node])
        endif
        if time <= 0.00 then
            call SpellIndexDestroy(node)
        else
            set udg_Spell_i_Time[node]=time
        endif
    endloop
    set udg_Spell__Running=false
endfunction

//===========================================================================
// This is the meat of the system as it handles the event responses.
// 
function RunSpellEvent takes nothing returns boolean
    local boolean b
    local integer aid= GetSpellAbilityId()
    local integer head= LoadInteger(udg_Spell__Hash, 0, aid)
    local integer i
    local integer id
    local trigger t
    local playerunitevent eid
    if head == 0 then
        //Nothing for this ability has been registered. Skip the sequence.
        return false
    endif
    set eid=ConvertPlayerUnitEvent(GetHandleId(GetTriggerEventId()))
    set udg_Spell__Caster=GetTriggerUnit()
    set id=GetHandleId(udg_Spell__Caster)
    set i=LoadInteger(udg_Spell__Hash, aid, id)
    if i == 0 then
        //This block will almost always happen with the OnChannel event. In the
        //case of Charge Gold and Lumber, only an OnEffect event will run.
        set i=udg_Spell_i_Recycle
        if i == 0 then
            //Create a new, unique index
            set i=udg_Spell_i_Instances + 1
            set udg_Spell_i_Instances=i
        else
            //Repurpose an existing one
            set udg_Spell_i_Recycle=udg_Spell_i_RecycleList[i]
        endif
        //call BJDebugMsg("Creating index: " + I2S(i))
        set udg_Spell_i_RecycleList[i]=- 1
        set udg_Spell_i_StackRef[i]=- 1
        set udg_Spell_i_Head[i]=head
        
        if eid == EVENT_PLAYER_UNIT_SPELL_CHANNEL then
            set udg_Spell_i_Channeling[i]=true
            call SaveInteger(udg_Spell__Hash, aid, id, i)
            set t=udg_Spell_i_OnChannelStack[head]
        else //eid == EVENT_PLAYER_UNIT_SPELL_EFFECT
            set t=udg_Spell_i_OnEffectStack[head]
        endif
        set udg_Spell_i_Caster[i]=udg_Spell__Caster
        set udg_Spell_i_Level[i]=GetUnitAbilityLevel(udg_Spell__Caster, aid)
        set udg_Spell_i_Target[i]=GetSpellTargetUnit()
        set udg_Spell_i_TargetX[i]=GetSpellTargetX()
        set udg_Spell_i_TargetY[i]=GetSpellTargetY()
        
        set udg_Spell_i_OnLoopStack[i]=udg_Spell_i_OnLoopStack[head]
        if udg_Spell_i_UseTG[head] then
            //Get a recycled unit group or create a new one.
            set id=udg_Spell_i_GroupN - 1
            if id >= 0 then
                set udg_Spell_i_GroupN=id
                set udg_Spell_i_TargetGroup[i]=udg_Spell_i_GroupStack[id]
            else
                set udg_Spell_i_TargetGroup[i]=CreateGroup()
            endif
        endif
    elseif eid == EVENT_PLAYER_UNIT_SPELL_CAST then
        set t=udg_Spell_i_OnCastStack[head]
    elseif eid == EVENT_PLAYER_UNIT_SPELL_EFFECT then
        set t=udg_Spell_i_OnEffectStack[head]
    elseif eid == EVENT_PLAYER_UNIT_SPELL_FINISH then
        set udg_Spell_i_Completed[i]=true
        return true
    else //eid == EVENT_PLAYER_UNIT_SPELL_ENDCAST
        set udg_Spell_i_Channeling[i]=false
        call RemoveSavedInteger(udg_Spell__Hash, aid, id)
        set t=udg_Spell_i_OnFinishStack[head]
    endif
    if SpellTriggerExecute(i , t) > 0.00 then
        //Set the spell time to the user-specified one.
        set udg_Spell_i_Time[i]=udg_Spell__Time
        if udg_Spell_i_StackRef[i] < 0 then
            //Allocate the spell index onto the loop stack.
            set aid=udg_Spell_i_StackN
            set udg_Spell_i_Stack[aid]=i
            set udg_Spell_i_StackRef[i]=aid
            set udg_Spell_i_StackN=aid + 1
            if aid == 0 then
                //If this is the first spell index using the timer, start it up:
                call TimerStart(udg_Spell_i_Timer, udg_Spell__Interval, true, function SpellTimerLoop)
            endif
        endif
    elseif ( not udg_Spell_i_Channeling[i] ) and ( t != null or udg_Spell_i_Time[i] <= 0.00 ) then
        call SpellIndexDestroy(i)
    endif
    set t=null
    return true
endfunction

//This function is invoked if an event was launched recursively by another event's callback.
function RunPreSpellEvent takes nothing returns nothing
    local integer i= udg_Spell__Index
    local real time= udg_Spell__Time
    local real d= udg_Spell__Duration
    local boolean expired= udg_Spell__Expired
    if udg_Spell__Trigger_OnLoop != null then
        set udg_Spell_i_OnLoopStack[i]=udg_Spell__Trigger_OnLoop
    endif
    if RunSpellEvent() then
        set udg_Spell__Time=time
        set udg_Spell__Duration=d
        set udg_Spell__Expired=expired
        call SpellIndexGetVars(i)
    endif
endfunction

//===========================================================================
// Base function of the system: runs when an ability event does something.
// 
function SpellSystemEvent takes nothing returns boolean
    if udg_Spell__Running then
        call RunPreSpellEvent()
    else
        set udg_Spell__Running=true
        call RunSpellEvent()
        set udg_Spell__Running=false
    endif
    return false
endfunction

//===========================================================================
// Set Spell__Ability to your spell's ability
// Set Spell__Trigger_OnChannel/Cast/Effect/Finish/Loop to any trigger(s) you
// want to automatically run.
// 
// GUI-friendly: Run Spell System <gen> (ignoring conditions)
// 
function SpellSystemRegister takes nothing returns nothing
    local integer aid= udg_Spell__Ability
    local integer head= udg_Spell_i_Instances + 1
    
    if HaveSavedInteger(udg_Spell__Hash, 0, aid) or aid == 0 then
        //The system rejects duplicate or unassigned abilities.
        return
    endif
    set udg_Spell_i_Instances=head
    set udg_Spell_i_Abil[head]=aid
    
    //Preload the ability on dummy unit to help prevent first-instance lag
    call UnitAddAbility(udg_Spell_i_PreloadDummy, aid)
    
    //Save head index to the spell ability so it be referenced later.
    call SaveInteger(udg_Spell__Hash, 0, aid, head)
    
    //Set any applicable event triggers.
    set udg_Spell_i_OnChannelStack[head]=udg_Spell__Trigger_OnChannel
    set udg_Spell_i_OnCastStack[head]=udg_Spell__Trigger_OnCast
    set udg_Spell_i_OnEffectStack[head]=udg_Spell__Trigger_OnEffect
    set udg_Spell_i_OnFinishStack[head]=udg_Spell__Trigger_OnFinish
    set udg_Spell_i_OnLoopStack[head]=udg_Spell__Trigger_OnLoop
    set udg_Spell_i_InRangeFilter[head]=udg_Spell__Trigger_InRangeFilter
    
    //Set any customized filter variables:
    call SpellSetFilters(head)
    
    //Tell the system to automatically create target groups, if needed
    set udg_Spell_i_AutoAddTargets[head]=udg_Spell__AutoAddTargets
    set udg_Spell_i_UseTG[head]=udg_Spell__UseTargetGroup or udg_Spell__AutoAddTargets
    
    //Handle automatic buff assignment
    set udg_Spell_i_BuffAbil[head]=udg_Spell__BuffAbility
    set udg_Spell_i_BuffOrder[head]=udg_Spell__BuffOrder
    
    //Set the default time sequences if a duration is used:
    set udg_Spell_i_Time[head]=udg_Spell__Time
    set udg_Spell_i_Duration[head]=udg_Spell__Duration
    set udg_Spell_i_LastTime[head]=udg_Spell__DurationPerLevel
    
    //Set variables back to their defaults:
    set udg_Spell__Trigger_OnChannel=null
    set udg_Spell__Trigger_OnCast=null
    set udg_Spell__Trigger_OnEffect=null
    set udg_Spell__Trigger_OnFinish=null
    set udg_Spell__Trigger_OnLoop=null
    set udg_Spell__Trigger_InRangeFilter=null
    set udg_Spell__AutoAddTargets=false
    set udg_Spell__UseTargetGroup=false
    set udg_Spell__Time=0.00
    set udg_Spell__Duration=0.00
    set udg_Spell__DurationPerLevel=0.00
    set udg_Spell__BuffAbility=0
    set udg_Spell__BuffOrder=0
    
    set udg_Spell__Filter_AllowEnemy=udg_Spell_i_AllowEnemy[0]
    set udg_Spell__Filter_AllowAlly=udg_Spell_i_AllowAlly[0]
    set udg_Spell__Filter_AllowDead=udg_Spell_i_AllowDead[0]
    set udg_Spell__Filter_AllowMagicImmune=udg_Spell_i_AllowMagicImmune[0]
    set udg_Spell__Filter_AllowMechanical=udg_Spell_i_AllowMechanical[0]
    set udg_Spell__Filter_AllowStructure=udg_Spell_i_AllowStructure[0]
    set udg_Spell__Filter_AllowFlying=udg_Spell_i_AllowFlying[0]
    set udg_Spell__Filter_AllowHero=udg_Spell_i_AllowHero[0]
    set udg_Spell__Filter_AllowNonHero=udg_Spell_i_AllowNonHero[0]
    set udg_Spell__Filter_AllowLiving=udg_Spell_i_AllowLiving[0]
endfunction

function SpellFilterCompare takes boolean is,boolean yes,boolean no returns boolean
    return ( is and yes ) or ( ( not is ) and no )
endfunction

//===========================================================================
// Before calling this function, set Spell__InRangePoint to whatever point
// you need, THEN set Spell__InRange to the radius you need. The system will
// enumerate the units matching the configured filter and fill them into
// Spell_InRangeGroup.
// 
function SpellGroupUnitsInRange takes nothing returns boolean
    local integer i= udg_Spell_i_Head[udg_Spell__Index]
    local integer j= 0
    local unit u
    local real padding= 64.00
    if udg_Spell_i_AllowStructure[i] then
        //A normal unit can only have up to size 64.00 collision, but if the
        //user needs to check for structures we need a padding big enough for
        //the "fattest" ones: Tier 3 town halls.
        set padding=197.00
    endif
    call GroupEnumUnitsInRangeOfLoc(udg_Spell__InRangeGroup, udg_Spell__InRangePoint, udg_Spell__InRange + padding, null)
    loop
        set u=FirstOfGroup(udg_Spell__InRangeGroup)
        exitwhen u == null
        call GroupRemoveUnit(udg_Spell__InRangeGroup, u)
        loop
            exitwhen udg_Spell_i_AutoAddTargets[i] and IsUnitInGroup(u, udg_Spell__TargetGroup)
            exitwhen not IsUnitInRangeLoc(u, udg_Spell__InRangePoint, udg_Spell__InRange)
            exitwhen not SpellFilterCompare(IsUnitType(u, UNIT_TYPE_DEAD) , udg_Spell_i_AllowDead[i] , udg_Spell_i_AllowLiving[i])
            exitwhen not SpellFilterCompare(IsUnitAlly(u, udg_Spell__CasterOwner) , udg_Spell_i_AllowAlly[i] , udg_Spell_i_AllowEnemy[i])
            exitwhen not SpellFilterCompare(IsUnitType(u, UNIT_TYPE_HERO) or IsUnitType(u, UNIT_TYPE_RESISTANT) , udg_Spell_i_AllowHero[i] , udg_Spell_i_AllowNonHero[i])
            exitwhen IsUnitType(u, UNIT_TYPE_STRUCTURE) and not udg_Spell_i_AllowStructure[i]
            exitwhen IsUnitType(u, UNIT_TYPE_FLYING) and not udg_Spell_i_AllowFlying[i]
            exitwhen IsUnitType(u, UNIT_TYPE_MECHANICAL) and not udg_Spell_i_AllowMechanical[i]
            exitwhen IsUnitType(u, UNIT_TYPE_MAGIC_IMMUNE) and not udg_Spell_i_AllowMagicImmune[i]
            set udg_Spell__InRangeUnit=u
            //Run the user's designated filter, if one exists.
            exitwhen udg_Spell_i_InRangeFilter[i] != null and not TriggerEvaluate(udg_Spell_i_InRangeFilter[i])
            set j=j + 1
            set udg_Spell__InRangeUnits[j]=u
            exitwhen true
        endloop
    endloop
    if j > udg_Spell__InRangeMax and udg_Spell__InRangeMax > 0 then
        //The user has defined a maximum number of units allowed in the group.
        //Remove a random unit until the total does not exceed capacity.
        loop
            set i=GetRandomInt(1, j)
            set udg_Spell__InRangeUnits[i]=udg_Spell__InRangeUnits[j]
            set j=j - 1
            exitwhen j == udg_Spell__InRangeMax
        endloop
    endif
    set udg_Spell__InRangeCount=j
    set udg_Spell__InRangeMax=0
    set udg_Spell__InRange=0.00
    set i=udg_Spell_i_Head[udg_Spell__Index]
    loop
        exitwhen j == 0
        set u=udg_Spell__InRangeUnits[j]
        call GroupAddUnit(udg_Spell__InRangeGroup, u)
        if udg_Spell_i_AutoAddTargets[i] then
            call GroupAddUnit(udg_Spell__TargetGroup, u)
        endif
        if udg_Spell__WakeTargets and UnitIsSleeping(u) then
            call UnitWakeUp(u)
        endif
        if udg_Spell_i_BuffAbil[i] != 0 and udg_Spell_i_BuffOrder[i] != 0 then
            //Auto-buff units added to group:
            call UnitAddAbility(udg_Spell_i_PreloadDummy, udg_Spell_i_BuffAbil[i])
            call IssueTargetOrderById(udg_Spell_i_PreloadDummy, udg_Spell_i_BuffOrder[i], u)
            call UnitRemoveAbility(udg_Spell_i_PreloadDummy, udg_Spell_i_BuffAbil[i])
        endif
        set j=j - 1
    endloop
    set u=null
    return false
endfunction

function SpellPreloadEnd takes nothing returns nothing
    local integer i= udg_Spell_i_Instances
    loop
        exitwhen i == 0
        //Remove preloaded abilities so they don't interfere with orders
        call UnitRemoveAbility(udg_Spell_i_PreloadDummy, udg_Spell_i_Abil[udg_Spell_i_Head[i]])
        set i=i - 1
    endloop
endfunction

//===========================================================================
function InitTrig_Spell_System takes nothing returns nothing
    local integer i= bj_MAX_PLAYER_SLOTS
    local player p
    local trigger t
    
    if gg_trg_Spell_System != null then
        //A JASS function call already initialized the system.
        return
    endif
    
    //This runs before map init events so the hashtable is ready before then.
    set udg_Spell__Hash=InitHashtable()
    
    //Initialize these two locations which will never get removed
    set udg_Spell__CastPoint=Location(0, 0)
    set udg_Spell__TargetPoint=Location(0, 0)
    
    //Recycle existing unit groups into the recycle stack to avoid needing to destroy any extras.
    set udg_Spell_i_GroupStack[2]=udg_Spell__TargetGroup
    set udg_Spell_i_GroupStack[3]=udg_Spell_i_TargetGroup[0]
    set udg_Spell_i_GroupStack[4]=udg_Spell_i_TargetGroup[1]
    set udg_Spell_i_GroupN=5 //There are already five valid unit groups thanks to Variable Editor.
    
    set t=CreateTrigger()
    call TriggerRegisterVariableEvent(t, "udg_Spell__InRange", GREATER_THAN, 0.00)
    call TriggerAddCondition(t, Filter(function SpellGroupUnitsInRange))
    
    set t=CreateTrigger()
    call TriggerAddCondition(t, Filter(function SpellSystemEvent))
    loop
        set i=i - 1
        set p=Player(i)
        call TriggerRegisterPlayerUnitEvent(t, p, EVENT_PLAYER_UNIT_SPELL_CHANNEL, null)
        call TriggerRegisterPlayerUnitEvent(t, p, EVENT_PLAYER_UNIT_SPELL_CAST, null)
        call TriggerRegisterPlayerUnitEvent(t, p, EVENT_PLAYER_UNIT_SPELL_EFFECT, null)
        call TriggerRegisterPlayerUnitEvent(t, p, EVENT_PLAYER_UNIT_SPELL_FINISH, null)
        call TriggerRegisterPlayerUnitEvent(t, p, EVENT_PLAYER_UNIT_SPELL_ENDCAST, null)
        exitwhen i == 0
    endloop
    set p=null
    set t=null
    
    //Run the configuration trigger so its variables are ready before the
    //map initialization events run.
    call TriggerExecute(gg_trg_Spell_System_Config)
    call SpellSetFilters(0)
    
    //Create this trigger so it's GUI-friendly.
    set gg_trg_Spell_System=CreateTrigger()
    call TriggerAddAction(gg_trg_Spell_System, function SpellSystemRegister)
    set gg_trg_Spell_System_Config=gg_trg_Spell_System //In case the user accidentally picks this one
    
    //Create a dummy unit for preloading abilities and casting buffs.
    set udg_Spell_i_PreloadDummy=CreateUnit(udg_Spell__DummyOwner, udg_Spell__DummyType, 0, 0, 0)
    
    //Start the timer to remove its abilities:
    call TimerStart(udg_Spell_i_Timer, 0.00, false, function SpellPreloadEnd)
    call UnitRemoveAbility(udg_Spell_i_PreloadDummy, 'Amov') //Force it to never move to cast spells
endfunction//===========================================================================
// Trigger: Knockback 2D Config
//
// Knockback 2D version 4.2.3.1
// Flying units now display special effect art attached to their "origin". Simplified the pathing check for flying units to only check for air unit pathability.
// For the full list of changes, please review the Knockback 2D Spell resource on HiveWorkshop.com
//===========================================================================
function Trig_Knockback_2D_Config_Actions takes nothing returns nothing
    // --------------------------------------
    // CHANGED BY GUHUN TO BETTER FIT THE MAP
    set udg_K2DRegion=GetPlayableMapRect()
    set udg_K2DMaxX=GetRectMaxX(udg_K2DRegion)
    set udg_K2DMaxY=GetRectMaxY(udg_K2DRegion)
    set udg_K2DMinX=GetRectMinX(udg_K2DRegion)
    set udg_K2DMinY=GetRectMinY(udg_K2DRegion)
    set udg_K2DRegion=GetEntireMapRect()
    // --------------------------------------
    //  
    // Configure things below
    //  
    // Set the timeout to be used throughout the system
    //  
    set udg_K2DTimeout=( 1.00 / 60.00 )
    //  
    // Robust Pathing at 0 is only safe for collision sizes 16 and lower, but requires only one SetItemPosition check per timeout.
    // -------- 1 checks collision vertically and horizontally to momentum. Uses an extra 4 SetItemPosition checks pet timeout.
    // -------- 2 checks collision diagonally with momentum. Uses a total of 9 SetItemPosition checks per timeout.
    // In any case, if the unit only has size 16 or lower collision, only one SetItemPosition check will be used for it.
    // If RobustPathing is set to 2 and the unit has 36 or less collision, it will only use the normal check of 5 SetItemPosition calls
    // The only reason to use robustness above 1 is for visual continuity - it features potentially-less glitchy movement.
    //  
    set udg_Knockback2DRobustPathing=0
    //  
    // Keep the friction between 0.00 and 1.00, At 0.00, friction keeps the unit at the same speed for the knockback
    // 1.00 friction will be an evenly-distributed deceleration which sees the unit slow to a complete stop
    // Friction outside of these bounds gives the knockback a boomerang-effect, so you are welcome to experiment.
    //  
    set udg_Knockback2DDefaultFriction=1.00
    set udg_Knockback2DFriction=udg_Knockback2DDefaultFriction
    //  
    // Determine the default bouncing behavior of units. You can set this before knocking a unit back.
    //  
    set udg_Knockback2DDefaultBounce=true
    set udg_Knockback2DBounces=udg_Knockback2DDefaultBounce
    //  
    // Determine the default mechanics of whether a unit should be unable to move while knocked back
    //  
    set udg_Knockback2DDefaultPause=false
    set udg_Knockback2DPause=udg_Knockback2DDefaultPause
    //  
    // Determine if surrounding trees should be killed by default or not
    //  
    set udg_Knockback2DDefaultKillTrees=false
    set udg_Knockback2DKillTrees=udg_Knockback2DDefaultKillTrees
    //  
    // If so, how wide should the radius be? 128.00 should be the minimum if you use pathing robustness greater than 0.
    // The minimum should be 64 if you use a robustness of 0.
    //  
    set udg_Knockback2DDefaultDestRadius=128.00
    set udg_Knockback2DDestRadius=udg_Knockback2DDefaultDestRadius
    //  
    // The "attack" option below will destroy any valid debris, from trees to barrels to creep homes.
    // If you just want to destroy trees, change the string to: harvest
    //  
    set udg_Knockback2DTreeOrDebris="attack"
    //  
    // 0.50 gravity will have equal ascend and decline rate, 1.00 is instant descend, 0.67 is twice as fast, 0.75 is three times as fast.
    //  
    set udg_Knockback2DDefaultGravity=0.71
    set udg_Knockback2DGravity=udg_Knockback2DDefaultGravity
    //  
    // Change the following to the default type of looping FX you want to have if you use Knockback Effects
    //  
    set udg_Knockback2DDefaultFX="Abilities\\Weapons\\AncientProtectorMissile\\AncientProtectorMissile.mdl"
    set udg_Knockback2DLoopFX=udg_Knockback2DDefaultFX
    //  
    // How frequently should the effects appear per unit? This can also be customized per-knockback
    //  
    set udg_Knockback2DDefaultFXRate=0.10
    set udg_Knockback2DFXRate=udg_Knockback2DDefaultFXRate
    //  
    // Create an item to help verify pathing throughout the game
    //  
    set udg_temp_point=Location(udg_K2DX, udg_K2DY)
    call CreateItemLoc('rag1', udg_temp_point)
    set udg_K2DItem=GetLastCreatedItem()
    //  
    // Create a harvest-capable unit to check if debris can be killed
    //  
    set udg_UnitIndexerEnabled=false
    call CreateNUnitsAtLoc(1, 'ugho', Player(PLAYER_NEUTRAL_PASSIVE), udg_temp_point, 0.00)
    set udg_K2DDebrisKiller=GetLastCreatedUnit()
    //  
    // End Configuration
    //  
    set udg_UnitIndexerEnabled=true
    call RemoveLocation(udg_temp_point)
    call Preload(udg_Knockback2DDefaultFX)
    call SetItemVisibleBJ(false, udg_K2DItem)
    call ShowUnitHide(udg_K2DDebrisKiller)
    call PauseUnitBJ(true, udg_K2DDebrisKiller)
    call UnitAddAbility(udg_K2DDebrisKiller, 'Aloc')
    set udg_Radians_Turn=Deg2Rad(360.00)
    set udg_Radians_QuarterTurn=Deg2Rad(90.00)
    set udg_Radians_QuarterPi=Deg2Rad(45.00)
    set udg_K2DMaxDestRadius=( udg_Knockback2DDefaultDestRadius * 2.00 )
    call SetRect(udg_K2DRegion, 0.00, 0.00, udg_K2DMaxDestRadius, udg_K2DMaxDestRadius)
    set udg_K2DItemsFound=false
    set udg_K2DItemOffset=false
endfunction

//===========================================================================
function InitTrig_Knockback_2D_Config takes nothing returns nothing
    set gg_trg_Knockback_2D_Config=CreateTrigger()
    call TriggerRegisterVariableEvent(gg_trg_Knockback_2D_Config, "udg_UnitIndexEvent", EQUAL, 3.00)
    call TriggerAddAction(gg_trg_Knockback_2D_Config, function Trig_Knockback_2D_Config_Actions)
endfunction

//===========================================================================
// Trigger: Knockback 2D Destroy
//===========================================================================
function Trig_Knockback_2D_Destroy_Conditions takes nothing returns boolean
    if ( not ( udg_IsUnitBeingKnockedBack[udg_UDex] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Destroy_Func010C takes nothing returns boolean
    if ( not ( udg_K2DNext[0] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Destroy_Func011C takes nothing returns boolean
    if ( not ( udg_K2DHeight[udg_UDex] != 0.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Destroy_Actions takes nothing returns nothing
    //  
    // This trigger destroys any knockback; you can execute it yourself by first setting UDex to the custom value
    //  
    set udg_IsUnitBeingKnockedBack[udg_UDex]=false
    set udg_K2DNext[udg_K2DPrev[udg_UDex]]=udg_K2DNext[udg_UDex]
    set udg_K2DPrev[udg_K2DNext[udg_UDex]]=udg_K2DPrev[udg_UDex]
    set udg_K2DPrev[udg_UDex]=0
    if ( Trig_Knockback_2D_Destroy_Func010C() ) then
        call PauseTimerBJ(true, udg_K2DTimer)
    else
    endif
    if ( Trig_Knockback_2D_Destroy_Func011C() ) then
        call SetUnitFlyHeightBJ(udg_Knockback2DUnit, GetUnitDefaultFlyHeight(udg_Knockback2DUnit), 0.00)
    else
    endif
    set udg_K2DOverride[udg_UDex]=false
    set udg_K2DSource[udg_UDex]=null
endfunction

//===========================================================================
function InitTrig_Knockback_2D_Destroy takes nothing returns nothing
    set gg_trg_Knockback_2D_Destroy=CreateTrigger()
    call TriggerRegisterVariableEvent(gg_trg_Knockback_2D_Destroy, "udg_UnitIndexEvent", EQUAL, 2.00)
    call TriggerAddCondition(gg_trg_Knockback_2D_Destroy, Condition(function Trig_Knockback_2D_Destroy_Conditions))
    call TriggerAddAction(gg_trg_Knockback_2D_Destroy, function Trig_Knockback_2D_Destroy_Actions)
endfunction

//===========================================================================
// Trigger: Knockback 2D
//
// You can run this trigger, checking conditions if you want to play it safe.
//===========================================================================
function Trig_Knockback_2D_Conditions takes nothing returns boolean
    if ( not ( GetUnitDefaultMoveSpeed(udg_Knockback2DUnit) != 0.00 ) ) then
        return false
    endif
    if ( not ( udg_K2DOverride[GetUnitUserData(udg_Knockback2DUnit)] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func006C takes nothing returns boolean
    if ( not ( udg_UDex == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func008Func002C takes nothing returns boolean
    if ( not ( udg_Knockback2DOverride == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func008C takes nothing returns boolean
    if ( not ( udg_IsUnitBeingKnockedBack[udg_UDex] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func009C takes nothing returns boolean
    if ( not ( udg_K2DNext[0] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func014C takes nothing returns boolean
    if ( not ( udg_Knockback2DHeight != 0.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func017C takes nothing returns boolean
    if ( not ( udg_Knockback2DPause == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func021Func004Func020C takes nothing returns boolean
    if ( not ( udg_Knockback2DRobustPathing == 2 ) ) then
        return false
    endif
    if ( not ( udg_K2DRadius[udg_UDex] > 16 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func021Func004C takes nothing returns boolean
    if ( not ( udg_Knockback2DRobustPathing > 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func021C takes nothing returns boolean
    if ( not ( IsUnitType(udg_Knockback2DUnit, UNIT_TYPE_FLYING) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func028Func004C takes nothing returns boolean
    if ( not ( ( udg_Knockback2DDestRadius * 2.00 ) > udg_K2DMaxDestRadius ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func028C takes nothing returns boolean
    if ( not ( udg_Knockback2DKillTrees == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Actions takes nothing returns nothing
    local integer pdex= udg_UDex
    set udg_UDex=GetUnitUserData(udg_Knockback2DUnit)
    // PREVENT DECORATIONS AND OTHER UNIDEXED UNITS FROM BEING KNOCKED BACK
    if ( Trig_Knockback_2D_Func006C() ) then
        set udg_UDex=pdex
        return
    else
    endif
    // START OF ACTUAL SYSTEM BELOW
    if ( Trig_Knockback_2D_Func008C() ) then
        if ( Trig_Knockback_2D_Func008Func002C() ) then
            set udg_K2DAngle[udg_UDex]=Rad2Deg(udg_K2DAngle[udg_UDex])
            set udg_Knockback2DAngle=( ( udg_Knockback2DAngle + udg_K2DAngle[udg_UDex] ) * 0.50 )
            set udg_Knockback2DDistance=( ( udg_K2DDistanceLeft[udg_UDex] + udg_Knockback2DDistance ) * 0.50 )
            set udg_Knockback2DTime=( ( udg_K2DTimeLeft[udg_UDex] + udg_Knockback2DTime ) * 0.50 )
        else
        endif
        call TriggerExecute(gg_trg_Knockback_2D_Destroy)
    else
    endif
    if ( Trig_Knockback_2D_Func009C() ) then
        call ExecuteFunc("StartKnockback2DTimer")
    else
    endif
    set udg_IsUnitBeingKnockedBack[udg_UDex]=true
    set udg_K2DPrev[udg_K2DNext[0]]=udg_UDex
    set udg_K2DNext[udg_UDex]=udg_K2DNext[0]
    set udg_K2DNext[0]=udg_UDex
    if ( Trig_Knockback_2D_Func014C() ) then
        set udg_K2DHeight[udg_UDex]=udg_Knockback2DHeight
        if UnitAddAbility(udg_Knockback2DUnit, 'Amrf') then
            call UnitRemoveAbility(udg_Knockback2DUnit, 'Amrf')
        endif
        call SetUnitFlyHeightBJ(udg_Knockback2DUnit, ( GetUnitDefaultFlyHeight(udg_Knockback2DUnit) + udg_Knockback2DHeight ), ( ( udg_Knockback2DHeight - GetUnitDefaultFlyHeight(udg_Knockback2DUnit) ) / ( udg_Knockback2DGravity * udg_Knockback2DTime ) ))
        set udg_K2DHeightThreshold[udg_UDex]=( ( 1 - udg_Knockback2DGravity ) * udg_Knockback2DTime )
        set udg_Knockback2DHeight=0.00
    else
        set udg_K2DHeight[udg_UDex]=0.00
    endif
    set udg_K2DX=GetUnitX(udg_Knockback2DUnit)
    set udg_K2DY=GetUnitY(udg_Knockback2DUnit)
    if ( Trig_Knockback_2D_Func017C() ) then
        set udg_K2DLastX[udg_UDex]=udg_K2DX
        set udg_K2DLastY[udg_UDex]=udg_K2DY
    else
    endif
    set udg_K2DAngle[udg_UDex]=Deg2Rad(udg_Knockback2DAngle)
    set udg_K2DCos[udg_UDex]=CosBJ(udg_Knockback2DAngle)
    set udg_K2DSin[udg_UDex]=SinBJ(udg_Knockback2DAngle)
    if ( Trig_Knockback_2D_Func021C() ) then
        set udg_K2DFlying[udg_UDex]=true
    else
        set udg_K2DFlying[udg_UDex]=false
        if ( Trig_Knockback_2D_Func021Func004C() ) then
            //  
            // Handle the pathing checker based on the unit's collision size
            //  
            if not IsUnitInRangeXY(udg_Knockback2DUnit, udg_K2DX + 17, udg_K2DY, 0) then
            set udg_K2DRadius[udg_UDex]=0
            else
            if not IsUnitInRangeXY(udg_Knockback2DUnit, udg_K2DX + 25, udg_K2DY, 0) then
            set udg_K2DRadius[udg_UDex]=8
            elseif not IsUnitInRangeXY(udg_Knockback2DUnit, udg_K2DX + 33, udg_K2DY, 0) then
            set udg_K2DRadius[udg_UDex]=16
            elseif not IsUnitInRangeXY(udg_Knockback2DUnit, udg_K2DX + 49, udg_K2DY, 0) then
            set udg_K2DRadius[udg_UDex]=32
            else
            set udg_K2DRadius[udg_UDex]=48
            endif
            set udg_Knockback2DAngle=ModuloReal(( udg_Knockback2DAngle + 90.00 ), 360.00)
            set udg_K2DCosH[udg_UDex]=CosBJ(udg_Knockback2DAngle)
            set udg_K2DSinH[udg_UDex]=SinBJ(udg_Knockback2DAngle)
            if ( Trig_Knockback_2D_Func021Func004Func020C() ) then
                set udg_Knockback2DAngle=ModuloReal(( udg_Knockback2DAngle + 45.00 ), 360.00)
                set udg_K2DCosD1[udg_UDex]=CosBJ(udg_Knockback2DAngle)
                set udg_K2DSinD1[udg_UDex]=SinBJ(udg_Knockback2DAngle)
                set udg_Knockback2DAngle=ModuloReal(( udg_Knockback2DAngle + 90.00 ), 360.00)
                set udg_K2DCosD2[udg_UDex]=CosBJ(udg_Knockback2DAngle)
                set udg_K2DSinD2[udg_UDex]=SinBJ(udg_Knockback2DAngle)
            else
            endif
            endif
        else
        endif
    endif
    set udg_K2DDistanceLeft[udg_UDex]=udg_Knockback2DDistance
    set udg_Knockback2DDistance=( ( ( 1.00 + udg_Knockback2DFriction ) * udg_Knockback2DDistance ) / udg_Knockback2DTime )
    set udg_K2DFriction[udg_UDex]=( ( udg_Knockback2DDistance / udg_Knockback2DTime ) * ( ( 1.00 - ( 1 - udg_Knockback2DFriction ) ) * ( udg_K2DTimeout * udg_K2DTimeout ) ) )
    set udg_K2DVelocity[udg_UDex]=( udg_Knockback2DDistance * udg_K2DTimeout )
    //  
    set udg_K2DKillTrees[udg_UDex]=udg_Knockback2DKillTrees
    if ( Trig_Knockback_2D_Func028C() ) then
        // Square the radius so we don't have to use SquareRoot when comparing distance.
        set udg_K2DDestRadius[udg_UDex]=( udg_Knockback2DDestRadius * udg_Knockback2DDestRadius )
        if ( Trig_Knockback_2D_Func028Func004C() ) then
            // Update the size of the enumerating rect to compensate for the desired extra radius.
            set udg_K2DMaxDestRadius=( udg_Knockback2DDestRadius * 2.00 )
            call SetRect(udg_K2DRegion, 0.00, 0.00, udg_K2DMaxDestRadius, udg_K2DMaxDestRadius)
        else
        endif
        set udg_Knockback2DDestRadius=udg_Knockback2DDefaultDestRadius
    else
    endif
    //  
    set udg_K2DAmphibious[udg_UDex]=udg_Knockback2DAmphibious
    set udg_K2DBounce[udg_UDex]=udg_Knockback2DBounces
    set udg_K2DCollision[udg_UDex]=udg_Knockback2DCollision
    set udg_K2DFreeze[udg_UDex]=false
    set udg_K2DFXModel[udg_UDex]=udg_Knockback2DLoopFX
    set udg_K2DFXRate[udg_UDex]=udg_Knockback2DFXRate
    set udg_K2DFXTimeLeft[udg_UDex]=udg_Knockback2DFXRate
    set udg_K2DImpact[udg_UDex]=udg_Knockback2DOnImpact
    set udg_K2DCollide[udg_UDex]=udg_Knockback2DOnCollide
    set udg_K2DEnd[udg_UDex]=udg_Knockback2DOnEnd
    set udg_K2DOverride[udg_UDex]=udg_Knockback2DOverride
    set udg_K2DPause[udg_UDex]=udg_Knockback2DPause
    set udg_K2DSimple[udg_UDex]=udg_Knockback2DSimple
    set udg_K2DSource[udg_UDex]=udg_Knockback2DSource
    set udg_K2DTimeLeft[udg_UDex]=udg_Knockback2DTime
    set udg_K2DUnbiasedCollision[udg_UDex]=udg_Knockback2DUnbiasedCollision
    set udg_Knockback2DAmphibious=false
    set udg_Knockback2DBounces=udg_Knockback2DDefaultBounce
    set udg_Knockback2DCollision=0.00
    set udg_Knockback2DFriction=udg_Knockback2DDefaultFriction
    set udg_Knockback2DFXRate=udg_Knockback2DDefaultFXRate
    set udg_Knockback2DGravity=udg_Knockback2DDefaultGravity
    set udg_Knockback2DKillTrees=udg_Knockback2DDefaultKillTrees
    set udg_Knockback2DLoopFX=udg_Knockback2DDefaultFX
    set udg_Knockback2DOnImpact=null
    set udg_Knockback2DOnCollide=null
    set udg_Knockback2DOnEnd=null
    set udg_Knockback2DOverride=false
    set udg_Knockback2DPause=udg_Knockback2DDefaultPause
    set udg_Knockback2DSimple=false
    set udg_Knockback2DSource=null
    set udg_Knockback2DUnbiasedCollision=false
    set udg_UDex=pdex
endfunction

//===========================================================================
function InitTrig_Knockback_2D takes nothing returns nothing
    set gg_trg_Knockback_2D=CreateTrigger()
    call TriggerAddCondition(gg_trg_Knockback_2D, Condition(function Trig_Knockback_2D_Conditions))
    call TriggerAddAction(gg_trg_Knockback_2D, function Trig_Knockback_2D_Actions)
endfunction

//===========================================================================
// Trigger: Knockback 2D System
//===========================================================================
function K2DItemCheckXY takes real x,real y returns boolean
    local real newX
    local real newY
    call SetItemPosition(udg_K2DItem, x, y)
    set newX=GetWidgetX(udg_K2DItem)
    set newY=GetWidgetY(udg_K2DItem)
    return ( newX >= x - 0.05 and newX <= x + 0.05 ) and ( newY >= y - 0.05 and newY <= y + 0.05 )
endfunction

function K2DItemCheckAxis takes real x,real y returns boolean
    local real x2= x * udg_K2DRadius[udg_UDex]
    local real y2= y * udg_K2DRadius[udg_UDex]
    set x=udg_K2DX + x2
    set y=udg_K2DY + y2
    if K2DItemCheckXY(x , y) and not IsTerrainPathable(x, y, PATHING_TYPE_WALKABILITY) then
        set x=udg_K2DX - x2
        set y=udg_K2DY - y2
        return K2DItemCheckXY(x , y) and not IsTerrainPathable(x, y, PATHING_TYPE_WALKABILITY)
    endif
    return false
endfunction

function K2DItemCheck takes nothing returns boolean
    local boolean result= K2DItemCheckXY(udg_K2DX , udg_K2DY)
    
    //Only perform additional pathing checks if the unit has a larger collision.
    if result and udg_Knockback2DRobustPathing > 0 and udg_K2DRadius[udg_UDex] > 0 then

        //Check horizontal axis of unit to make sure nothing is going to collide
        set result=K2DItemCheckAxis(udg_K2DCosH[udg_UDex] , udg_K2DSinH[udg_UDex])
        
        //Check vertical axis of unit to ensure nothing will collide
        set result=result and K2DItemCheckAxis(udg_K2DCos[udg_UDex] , udg_K2DSin[udg_UDex])
        
        if result and udg_Knockback2DRobustPathing == 2 and udg_K2DRadius[udg_UDex] > 16 then

            //Check diagonal axis of unit if more thorough pathing is desired
            set result=K2DItemCheckAxis(udg_K2DCosD1[udg_UDex] , udg_K2DSinD1[udg_UDex])
            set result=result and K2DItemCheckAxis(udg_K2DCosD2[udg_UDex] , udg_K2DSinD2[udg_UDex])
        endif
    endif
    
    //Reset item so it won't interfere with the map
    call SetItemPosition(udg_K2DItem, udg_K2DMaxX, udg_K2DMaxY)
    call SetItemVisible(udg_K2DItem, false)
    
    return result
endfunction

function K2DItemFilter takes nothing returns boolean
    //Check for visible items, temporarily hide them and add them to the filter.
    if IsItemVisible(GetFilterItem()) then
        call SetItemVisible(GetFilterItem(), false)
        return true
    endif
    return false
endfunction
function K2DItemCode takes nothing returns nothing
    //Perform the item-pathing check only once, then unhide those filtered items
    if not udg_K2DItemsFound then
        set udg_K2DItemsFound=true
        set udg_K2DItemOffset=K2DItemCheck()
    endif
    call SetItemVisible(GetEnumItem(), true)
endfunction

function K2DKillDest takes nothing returns nothing
    local real x
    local real y
    //Handle destruction of debris
    set bj_destRandomCurrentPick=GetEnumDestructable()
    if GetWidgetLife(bj_destRandomCurrentPick) > 0.405 and IssueTargetOrder(udg_K2DDebrisKiller, udg_Knockback2DTreeOrDebris, bj_destRandomCurrentPick) then
        set x=GetWidgetX(bj_destRandomCurrentPick) - udg_K2DX
        set y=GetWidgetY(bj_destRandomCurrentPick) - udg_K2DY
        if x * x + y * y <= udg_K2DDestRadius[udg_UDex] then
            call KillDestructable(bj_destRandomCurrentPick)
        endif
    endif
endfunction

function K2DEnumDests takes nothing returns nothing
    call MoveRectTo(udg_K2DRegion, udg_K2DX, udg_K2DY)
    if udg_K2DKillTrees[udg_UDex] then
        call SetUnitX(udg_K2DDebrisKiller, udg_K2DX)
        call SetUnitY(udg_K2DDebrisKiller, udg_K2DY)
        call EnumDestructablesInRect(udg_K2DRegion, null, function K2DKillDest)
    endif
endfunction

function Knockback2DCheckXY takes real x,real y returns boolean
    set udg_K2DX=x + udg_K2DVelocity[udg_UDex] * udg_K2DCos[udg_UDex]
    set udg_K2DY=y + udg_K2DVelocity[udg_UDex] * udg_K2DSin[udg_UDex]
    if udg_K2DSimple[udg_UDex] then
        //A "pull" effect or a missile system does not require complex pathing.
        if udg_K2DX <= udg_K2DMaxX and udg_K2DX >= udg_K2DMinX and udg_K2DY <= udg_K2DMaxY and udg_K2DY >= udg_K2DMinY then
            call K2DEnumDests()
            return true
        endif
        return false
    elseif udg_K2DFlying[udg_UDex] then
        return not IsTerrainPathable(udg_K2DX, udg_K2DY, PATHING_TYPE_FLYABILITY)
    elseif not IsTerrainPathable(udg_K2DX, udg_K2DY, PATHING_TYPE_WALKABILITY) then
        call K2DEnumDests()
        set udg_K2DItemOffset=false
        call EnumItemsInRect(udg_K2DRegion, Filter(function K2DItemFilter), function K2DItemCode)
        if udg_K2DItemsFound then
            //If items were found, the check was already performed.
            set udg_K2DItemsFound=false
        else
            //Otherwise, perform the check right now.
            set udg_K2DItemOffset=K2DItemCheck()
        endif
        return udg_K2DItemOffset
    endif
    return udg_K2DAmphibious[udg_UDex] and not IsTerrainPathable(udg_K2DX, udg_K2DY, PATHING_TYPE_FLOATABILITY)
endfunction

function Knockback2DApplyAngle takes real angle returns nothing
    set angle=ModuloReal(angle, udg_Radians_Turn)
    set udg_K2DCos[udg_UDex]=Cos(angle)
    set udg_K2DSin[udg_UDex]=Sin(angle)
    set udg_K2DAngle[udg_UDex]=angle
    if udg_Knockback2DRobustPathing > 0 then
        set angle=ModuloReal(angle + udg_Radians_QuarterTurn, udg_Radians_Turn)
        set udg_K2DCosH[udg_UDex]=Cos(angle)
        set udg_K2DSinH[udg_UDex]=Sin(angle)
        if udg_Knockback2DRobustPathing == 2 and udg_K2DRadius[udg_UDex] > 16 then
            set angle=ModuloReal(angle + udg_Radians_QuarterPi, udg_Radians_Turn)
            set udg_K2DCosD1[udg_UDex]=Cos(angle)
            set udg_K2DSinD1[udg_UDex]=Sin(angle)
            set angle=ModuloReal(angle + udg_Radians_QuarterTurn, udg_Radians_Turn)
            set udg_K2DCosD2[udg_UDex]=Cos(angle)
            set udg_K2DSinD2[udg_UDex]=Sin(angle)
        endif
    endif
endfunction

function Knockback2DLooperLoop takes nothing returns nothing
    local integer i= udg_UDex
    local unit u
    local real x
    local real y
    
set udg_UDex=i
    set udg_K2DTimeLeft[i]=udg_K2DTimeLeft[i] - udg_K2DTimeout
    set udg_K2DDistanceLeft[i]=udg_K2DDistanceLeft[i] - udg_K2DVelocity[i]
    set u=udg_UDexUnits[i]
    
    if udg_K2DTimeLeft[i] > 0.00 then
        if udg_K2DTimeLeft[i] < udg_K2DHeightThreshold[i] and udg_K2DHeightThreshold[i] != 0.00 then
            call SetUnitFlyHeight(u, GetUnitDefaultFlyHeight(u), GetUnitFlyHeight(u) - GetUnitDefaultFlyHeight(u) / udg_K2DHeightThreshold[i])
            set udg_K2DHeightThreshold[i]=0.00
        endif
        if udg_K2DPause[i] then
            set x=udg_K2DLastX[i]
            set y=udg_K2DLastY[i]
        else
            set x=GetUnitX(u)
            set y=GetUnitY(u)
        endif
    
        if not Knockback2DCheckXY(x , y) then
            if not udg_K2DFreeze[i] and IsTriggerEnabled(udg_K2DImpact[i]) and TriggerEvaluate(udg_K2DImpact[i]) then
                call TriggerExecute(udg_K2DImpact[i])
            endif
            if udg_K2DBounce[i] then
                call Knockback2DApplyAngle(udg_Radians_Turn - udg_K2DAngle[i])
                if not Knockback2DCheckXY(x , y) then
                    call Knockback2DApplyAngle(udg_K2DAngle[i] + bj_PI)
                    if not Knockback2DCheckXY(x , y) then
                        call Knockback2DApplyAngle(udg_Radians_Turn - udg_K2DAngle[i])
                        set udg_K2DX=x
                        set udg_K2DY=y
                    endif
                endif
            else
                set udg_K2DX=x
                set udg_K2DY=y
                set udg_K2DFreeze[i]=true
            endif
        endif
        call SetUnitX(u, udg_K2DX)
        call SetUnitY(u, udg_K2DY)
        set udg_K2DLastX[i]=udg_K2DX
        set udg_K2DLastY[i]=udg_K2DY
        if udg_K2DFXModel[i] != "" then
            set udg_K2DFXTimeLeft[i]=udg_K2DFXTimeLeft[i] - udg_K2DTimeout
            if udg_K2DFXTimeLeft[i] <= 0.00 then
                set udg_K2DFXTimeLeft[i]=udg_K2DFXRate[i]
                if udg_K2DFlying[i] then
                    call DestroyEffect(AddSpecialEffectTarget(udg_K2DFXModel[i], u, "origin"))
                else
                    call DestroyEffect(AddSpecialEffect(udg_K2DFXModel[i], udg_K2DX, udg_K2DY))
                endif
            endif
        endif
        if udg_K2DCollision[i] >= 0.00 then
            set udg_Knockback2DSource=u
            call GroupEnumUnitsInRange(bj_lastCreatedGroup, udg_K2DX, udg_K2DY, 200.00, null)
            call GroupRemoveUnit(bj_lastCreatedGroup, u)
            loop
                set udg_Knockback2DUnit=FirstOfGroup(bj_lastCreatedGroup)
                exitwhen udg_Knockback2DUnit == null
                call GroupRemoveUnit(bj_lastCreatedGroup, udg_Knockback2DUnit)
                
                if IsUnitInRange(udg_Knockback2DUnit, u, udg_K2DCollision[i]) and udg_K2DFlying[i] == IsUnitType(udg_Knockback2DUnit, UNIT_TYPE_FLYING) and ( not IsUnitType(udg_Knockback2DUnit, UNIT_TYPE_STRUCTURE) ) and not IsUnitType(udg_Knockback2DUnit, UNIT_TYPE_DEAD) and ( udg_K2DUnbiasedCollision[i] or IsUnitAlly(udg_Knockback2DUnit, GetOwningPlayer(u)) ) and TriggerEvaluate(gg_trg_Knockback_2D) then
                    set udg_Knockback2DAngle=bj_RADTODEG * Atan2(GetUnitY(udg_Knockback2DUnit) - udg_K2DY, GetUnitX(udg_Knockback2DUnit) - udg_K2DX)
                    set udg_Knockback2DDistance=udg_K2DDistanceLeft[i]
                    set udg_Knockback2DBounces=udg_K2DBounce[i]
                    set udg_Knockback2DCollision=udg_K2DCollision[i]
                    if udg_K2DHeight[i] != 0.00 then
                        set udg_Knockback2DHeight=GetUnitFlyHeight(u) - GetUnitDefaultFlyHeight(u)
                    endif
                    set udg_Knockback2DLoopFX=udg_K2DFXModel[i]
                    set udg_Knockback2DTime=udg_K2DTimeLeft[i]
                    set udg_Knockback2DUnbiasedCollision=udg_K2DUnbiasedCollision[i]
                    
                    if udg_K2DCollide[i] != null then
                        call TriggerExecute(udg_K2DCollide[i])
                    endif
                    
                    //call BJDebugMsg(R2S(udg_Knockback2DDistance))

                    call TriggerExecute(gg_trg_Knockback_2D)
                    set udg_Knockback2DSource=u //in case of a recursive knockback
                endif
            endloop
        endif
        set udg_K2DVelocity[i]=udg_K2DVelocity[i] - udg_K2DFriction[i]
    else
        if udg_K2DEnd[i] != null then
            set udg_Knockback2DUnit=u
            call TriggerExecute(udg_K2DEnd[i])
        endif
        call TriggerExecute(gg_trg_Knockback_2D_Destroy)
    endif
    
    set u=null
endfunction

function Knockback2DLooper takes nothing returns nothing
    local integer i= 0
    
    call PauseUnit(udg_K2DDebrisKiller, false)
    
    loop
        set i=udg_K2DNext[i]
        exitwhen i == 0
        set udg_UDex=i
        call ForForce(udg_FORCES_PLAYER[1], function Knockback2DLooperLoop)
    endloop
    
    //Disable dummy after the loop finishes so it doesn't interfere with the map
    call PauseUnit(udg_K2DDebrisKiller, true)
endfunction

//===========================================================================
function StartKnockback2DTimer takes nothing returns nothing
    call TimerStart(udg_K2DTimer, udg_K2DTimeout, true, function Knockback2DLooper)
endfunction
function InitTrig_Knockback_2D_System takes nothing returns nothing
endfunction//===========================================================================
// Trigger: SaveLoad Setup
//===========================================================================
function Trig_SaveLoad_Setup_Func004A takes nothing returns nothing
    local integer l__udg_temp_integer
    set l__udg_temp_integer=GetConvertedPlayerId(GetEnumPlayer())
    call TriggerRegisterPlayerChatEvent(gg_trg_LoadRequest, ConvertedPlayer(l__udg_temp_integer), "-request ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_LoadRequest, ConvertedPlayer(l__udg_temp_integer), "-load ini", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_LoadRequest, ConvertedPlayer(l__udg_temp_integer), "-load end", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_SaveLoad_Commands, ConvertedPlayer(l__udg_temp_integer), "-load limit", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_SaveLoad_Commands, ConvertedPlayer(l__udg_temp_integer), "-load center", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_SaveCall, ConvertedPlayer(l__udg_temp_integer), "-save ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_SaveLoop_Dest, ConvertedPlayer(l__udg_temp_integer), "-dsav ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_SaveLoop_Terrain, ConvertedPlayer(l__udg_temp_integer), "-tsav ", false)
    // PLEASE DO NOT TOUCH BELOW
    call TriggerRegisterPlayerChatEvent(gg_trg_LoadUnit, ConvertedPlayer(l__udg_temp_integer), ",", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_LoadUnit_Extra, ConvertedPlayer(l__udg_temp_integer), "=", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_LoadDest, ConvertedPlayer(l__udg_temp_integer), "|", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_LoadTerrain, ConvertedPlayer(l__udg_temp_integer), "@", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_SaveLoad_Set_Center_Numbers, ConvertedPlayer(l__udg_temp_integer), "-load center ", false)
endfunction

function Trig_SaveLoad_Setup_Actions takes nothing returns nothing
    set udg_load_limit=200
    set udg_save_WholeMapRect=GetEntireMapRect()
    call ForForce(GetPlayersAll(), function Trig_SaveLoad_Setup_Func004A)
    // LISTING ALL VARIABLES FOR IMPORTING
    // LISTING ALL VARIABLES FOR IMPORTING
endfunction

//===========================================================================
function InitTrig_SaveLoad_Setup takes nothing returns nothing
    set gg_trg_SaveLoad_Setup=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_SaveLoad_Setup, 0.00)
    call TriggerAddAction(gg_trg_SaveLoad_Setup, function Trig_SaveLoad_Setup_Actions)
endfunction

//===========================================================================
// Trigger: SaveLoad Commands
//
// Putting everything in one trigger is less readable but  more efficient for player chat event performance
//===========================================================================
function Trig_SaveLoad_Commands_Func008Func023Func006C takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_GAME_MASTER ) ) then
        return false
    endif
    return true
endfunction

function Trig_SaveLoad_Commands_Func008Func023C takes nothing returns boolean
    if ( not ( GetEventPlayerChatString() == "-nosave units" ) ) then
        return false
    endif
    return true
endfunction

function Trig_SaveLoad_Commands_Func008C takes nothing returns boolean
    if ( not ( GetEventPlayerChatString() == "-load center" ) ) then
        return false
    endif
    return true
endfunction

function Trig_SaveLoad_Commands_Actions takes nothing returns nothing
    // LOCALS
    local group l__udg_temp_group= CreateGroup()
    local unit l__udg_temp_unit
    local location l__udg_temp_point
    local integer l__udg_temp_integer
    local integer l__udg_temp_integer2= bj_MAX_PLAYERS
    // LOCALS
    if ( Trig_SaveLoad_Commands_Func008C() ) then
        // CENTER COMMAND
        set l__udg_temp_integer=GetConvertedPlayerId(GetTriggerPlayer())
        call GroupEnumUnitsSelected(l__udg_temp_group, GetTriggerPlayer(), null)
        set l__udg_temp_unit=GroupPickRandomUnit(l__udg_temp_group)
        if IsUnitType(l__udg_temp_unit, UNIT_TYPE_STRUCTURE) then
        set l__udg_temp_point=GetUnitRallyPoint(l__udg_temp_unit)
        if l__udg_temp_point == null then
        set l__udg_temp_point=GetUnitLoc(GetUnitRallyUnit(l__udg_temp_unit))
        endif
        else
        set l__udg_temp_point=GetUnitLoc(l__udg_temp_unit)
        endif
        set udg_load_center[l__udg_temp_integer]=GetLocationX(l__udg_temp_point)
        set udg_load_center[( l__udg_temp_integer + l__udg_temp_integer2 )]=GetLocationY(l__udg_temp_point)
        call DisplayTextToForce(udg_FORCES_PLAYER[( GetConvertedPlayerId(GetTriggerPlayer()) - 1 )], ( "Successfully set the center of future unit loads to " + ( "(" + ( ( R2S(udg_load_center[l__udg_temp_integer]) + "|" ) + ( R2S(udg_load_center[( l__udg_temp_integer + l__udg_temp_integer2 )]) + ")" ) ) ) ))
        call RemoveLocation(l__udg_temp_point)
        call DestroyGroup(l__udg_temp_group)
        set l__udg_temp_group=null
        set l__udg_temp_unit=null
        set l__udg_temp_point=null
        // CENTER COMMAND
    else
        if ( Trig_SaveLoad_Commands_Func008Func023C() ) then
        else
            // SET LOAD LIMIT COMMAND
            if ( Trig_SaveLoad_Commands_Func008Func023Func006C() ) then
                set udg_load_limit=S2I(SubStringBJ(GetEventPlayerChatString(), 13, 16))
                call DisplayTextToForce(GetPlayersAll(), ( "Unit Load Limit has been set to " + I2S(udg_load_limit) ))
                // Double conversion ensures that, if for some reason the first conversion did not work out, the players won't receive the correct message
            else
            endif
            // SET LOAD LIMIT COMMAND
        endif
    endif
endfunction

//===========================================================================
function InitTrig_SaveLoad_Commands takes nothing returns nothing
    set gg_trg_SaveLoad_Commands=CreateTrigger()
    call TriggerAddAction(gg_trg_SaveLoad_Commands, function Trig_SaveLoad_Commands_Actions)
endfunction

//===========================================================================
// Trigger: SaveLoad Set Center Numbers
//
// -load center 1,2
//===========================================================================
function Trig_SaveLoad_Set_Center_New_Actions takes nothing returns nothing
    local string chatStr= SubString(GetEventPlayerChatString(), 13, StringLength(GetEventPlayerChatString()) + 1)
    local integer playerNumber= GetPlayerId(GetTriggerPlayer()) + 1
    local integer cutToComma= CutToComma(chatStr)
    local real newX= S2R(SubString(chatStr, 0, cutToComma))
    local real newY= S2R(SubString(chatStr, cutToComma + 1, StringLength(chatStr)))
    
    set udg_load_center[playerNumber]=newX
    set udg_load_center[playerNumber + bj_MAX_PLAYERS]=newY

    call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "Save/Load Center set to: (" + R2S(newX) + " | " + R2S(newY) + ")")
endfunction

//===========================================================================
function InitTrig_SaveLoad_Set_Center_Numbers takes nothing returns nothing
    set gg_trg_SaveLoad_Set_Center_Numbers=CreateTrigger()
    call TriggerAddAction(gg_trg_SaveLoad_Set_Center_Numbers, function Trig_SaveLoad_Set_Center_New_Actions)
endfunction

//===========================================================================
// Trigger: SaveCall
//===========================================================================
function Trig_SaveCall_Conditions takes nothing returns boolean
    if ( not ( SubStringBJ(GetEventPlayerChatString(), 1, 6) == "-save " ) ) then
        return false
    endif
    return true
endfunction

function Trig_SaveCall_Func016Func001Func001C takes nothing returns boolean
    if ( ( RectContainsUnit(gg_rct_Titan_Palace, GetEnumUnit()) == true ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h07Q' ) ) then
        return true
    endif
    return false
endfunction

function Trig_SaveCall_Func016Func001C takes nothing returns boolean
    if ( not Trig_SaveCall_Func016Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_SaveCall_Func016A takes nothing returns nothing
    if ( Trig_SaveCall_Func016Func001C() ) then
        call GroupRemoveUnitSimple(GetEnumUnit(), udg_save_grp[GetConvertedPlayerId(GetTriggerPlayer())])
    else
    endif
endfunction

function Trig_SaveCall_Actions takes nothing returns nothing
    local integer l__udg_temp_integer
    call SaveLoopStartTimer()
    set l__udg_temp_integer=GetConvertedPlayerId(GetTriggerPlayer())
    set udg_save_password[GetConvertedPlayerId(GetTriggerPlayer())]=SubStringBJ(GetEventPlayerChatString(), 7, 128)
    call DestroyGroup(udg_save_grp[l__udg_temp_integer])
    // ------------
    // Don't use GUI Unit Group functions because they have handle reference leaks
    set udg_save_grp[l__udg_temp_integer]=CreateGroup()
    call GroupEnumUnitsOfPlayer(udg_save_grp[l__udg_temp_integer], GetTriggerPlayer(), null)
    // ------------
    call GroupAddGroup(udg_System_NeutralUnits[( l__udg_temp_integer - 1 )], udg_save_grp[l__udg_temp_integer])
    set udg_save_unit_nmbr[l__udg_temp_integer]=0
    set udg_save_load_boolean[l__udg_temp_integer]=true
    call DisplayTextToForce(GetPlayersAll(), ( udg_RealNames[l__udg_temp_integer] + ( " has started saving. Expected save time: " + R2S(( I2R(CountUnitsInGroup(udg_save_grp[l__udg_temp_integer])) / 10.00 )) ) ))
    call ForGroupBJ(udg_save_grp[l__udg_temp_integer], function Trig_SaveCall_Func016A)
endfunction

//===========================================================================
function InitTrig_SaveCall takes nothing returns nothing
    set gg_trg_SaveCall=CreateTrigger()
    call TriggerAddCondition(gg_trg_SaveCall, Condition(function Trig_SaveCall_Conditions))
    call TriggerAddAction(gg_trg_SaveCall, function Trig_SaveCall_Actions)
endfunction

//===========================================================================
// Trigger: SaveLoop Dest
//===========================================================================
function SaveFilter takes nothing returns boolean
    local destructable dest= GetFilterDestructable()
    if IsDestructableTree(dest) and udg_save_localPlayerBool then
        call Preload(I2S(GetDestructableTypeId(dest)) + "|" + R2S(GetDestructableX(dest) - (udg_load_center[(udg_temp_integer) + 1])) + "|" + R2S(GetDestructableY(dest) - (udg_load_center[(udg_temp_integer) + 1 + bj_MAX_PLAYERS])) + "|") // INLINED!!
    endif
    set dest=null
    return false
endfunction

function SaveLoopActions2 takes nothing returns nothing
    local player saver= GetTriggerPlayer()
    local integer genId
    local rect rectangle
    local integer playerNumber= GetPlayerId(saver)
    local integer tempInteger
    
    if SubString(GetEventPlayerChatString(), 0, 6) != "-dsav " then
        return
    endif
    
    set udg_save_password[playerNumber + 1]=SubString(GetEventPlayerChatString(), 6, 129)
    
    set genId=GUDR_PlayerGetSelectedGeneratorId(saver)
    if genId == 0 then
        return
    endif

    
    
    set rectangle=(LoadRectHandle(UserDefinedRects___hashTable, (genId), (0))) // INLINED!!
    if GetLocalPlayer() == saver then
        call PreloadGenClear()
        call PreloadGenStart()
        call Preload("-load dest")
        set udg_save_localPlayerBool=true
        set tempInteger=udg_temp_integer
        set udg_temp_integer=playerNumber
    endif
    call EnumDestructablesInRect(rectangle, Condition(function SaveFilter), null)
    if GetLocalPlayer() == saver then
        call PreloadGenEnd("DataManager\\" + udg_save_password[playerNumber + 1] + "\\0.txt")
        call SaveSize(udg_save_password[playerNumber + 1] , 1)
        set udg_save_localPlayerBool=false
        set udg_temp_integer=tempInteger
    endif
    call DisplayTextToPlayer(saver, 0, 0, "Finished Saving")
    
    set rectangle=null
endfunction

//===========================================================================
function InitTrig_SaveLoop_Dest takes nothing returns nothing
    set gg_trg_SaveLoop_Dest=CreateTrigger()
    call TriggerAddAction(gg_trg_SaveLoop_Dest, function SaveLoopActions2)
endfunction

//===========================================================================
// Trigger: SaveLoop Terrain
//===========================================================================
function SaveTiles takes nothing returns boolean
        local integer i
        local string saveStr
        local integer playerNumber= GetPlayerId(GetTriggerPlayer())
        set i=0
        set saveStr="@"
        loop
        exitwhen i >= 60
            if udg_save_XYminmaxcur[playerNumber + 5 * bj_MAX_PLAYERS] > udg_save_XYminmaxcur[playerNumber + 4 * bj_MAX_PLAYERS] then
                set i=121
            else
                set saveStr=saveStr + LoadD2H((LoadInteger((UnitVisualMods___hashTable), (((s__TerrainType2Id_KEY))), (((GetTerrainType(udg_save_XYminmaxcur[playerNumber + 2 * bj_MAX_PLAYERS], udg_save_XYminmaxcur[playerNumber + 5 * bj_MAX_PLAYERS]))))))) + LoadD2H(GetTerrainVariance(udg_save_XYminmaxcur[playerNumber + 2 * bj_MAX_PLAYERS], udg_save_XYminmaxcur[playerNumber + 5 * bj_MAX_PLAYERS])) // INLINED!!
            endif
            set i=i + 1
            if udg_save_XYminmaxcur[playerNumber + 2 * bj_MAX_PLAYERS] > udg_save_XYminmaxcur[playerNumber + bj_MAX_PLAYERS] then
                set udg_save_XYminmaxcur[playerNumber + 5 * bj_MAX_PLAYERS]=udg_save_XYminmaxcur[playerNumber + 5 * bj_MAX_PLAYERS] + 128
                set udg_save_XYminmaxcur[playerNumber + 2 * bj_MAX_PLAYERS]=udg_save_XYminmaxcur[playerNumber]
                //call BJDebugMsg("Switch")
            else
                set udg_save_XYminmaxcur[playerNumber + 2 * bj_MAX_PLAYERS]=udg_save_XYminmaxcur[playerNumber + 2 * bj_MAX_PLAYERS] + 128
            endif
        endloop

        if GetLocalPlayer() == GetTriggerPlayer() then
            call Preload(saveStr)
        endif
    return false
endfunction

function SaveTerrain takes nothing returns nothing
    local integer i
    local integer playerNumber= GetPlayerId(GetTriggerPlayer())
    local string saveStr
    local triggercondition cond
    local rect saveRect
    local integer genId
    
    if SubString(GetEventPlayerChatString(), 0, 6) != "-tsav " then
        return
    endif
    
    set genId=GUDR_PlayerGetSelectedGeneratorId(GetTriggerPlayer())
    if genId == 0 then
        return
    endif
    
    set saveRect=(LoadRectHandle(UserDefinedRects___hashTable, (genId), (0))) // INLINED!!
    set udg_save_XYminmaxcur[playerNumber]=GetRectMinX(saveRect)
    set udg_save_XYminmaxcur[playerNumber + bj_MAX_PLAYERS]=GetRectMaxX(saveRect)
    set udg_save_XYminmaxcur[playerNumber + 3 * bj_MAX_PLAYERS]=GetRectMinY(saveRect)
    set udg_save_XYminmaxcur[playerNumber + 4 * bj_MAX_PLAYERS]=GetRectMaxY(saveRect)
    set udg_save_XYminmaxcur[playerNumber + 2 * bj_MAX_PLAYERS]=udg_save_XYminmaxcur[playerNumber]
    set udg_save_XYminmaxcur[playerNumber + 5 * bj_MAX_PLAYERS]=udg_save_XYminmaxcur[playerNumber + 3 * bj_MAX_PLAYERS]
    if GetLocalPlayer() == GetTriggerPlayer() then
        call PreloadGenClear()
        call PreloadGenStart()
        call Preload("-load ter")
        call Preload(R2S(udg_save_XYminmaxcur[playerNumber]) + "@" + R2S(udg_save_XYminmaxcur[playerNumber + bj_MAX_PLAYERS]) + "@" + R2S(udg_save_XYminmaxcur[playerNumber + 3 * bj_MAX_PLAYERS]) + "@" + R2S(udg_save_XYminmaxcur[playerNumber + 4 * bj_MAX_PLAYERS]) + "@")
        //call BJDebugMsg("Saving Terrain")
    endif
    set udg_save_password[playerNumber + 1]=SubString(GetEventPlayerChatString(), 6, 129)
    set cond=TriggerAddCondition(gg_trg_SaveLoop_Terrain, Condition(function SaveTiles))
    loop
    exitwhen udg_save_XYminmaxcur[playerNumber + 5 * bj_MAX_PLAYERS] > udg_save_XYminmaxcur[playerNumber + 4 * bj_MAX_PLAYERS]
        
        call TriggerEvaluate(gg_trg_SaveLoop_Terrain)
        
    endloop
    call TriggerRemoveCondition(gg_trg_SaveLoop_Terrain, cond)
    
    if GetLocalPlayer() == GetTriggerPlayer() then
        call PreloadGenEnd("DataManager\\" + udg_save_password[playerNumber + 1] + "\\0.txt")
        call SaveSize(udg_save_password[playerNumber + 1] , 1)
        //call BJDebugMsg("Finished Saving")
    endif
    call DisplayTextToPlayer(Player(playerNumber), 0, 0, "Finished Saving")
    
    set cond=null
    set saveRect=null
endfunction


//===========================================================================
function InitTrig_SaveLoop_Terrain takes nothing returns nothing
    set gg_trg_SaveLoop_Terrain=CreateTrigger()
    call TriggerAddAction(gg_trg_SaveLoop_Terrain, function SaveTerrain)
endfunction

//===========================================================================
// Trigger: LoadRequest
//===========================================================================
function Trig_LoadRequest_Actions takes nothing returns nothing
    local integer playerId= GetPlayerId(GetTriggerPlayer())
    local integer i
    local string chatStr= GetEventPlayerChatString()
    if chatStr == "-load ini" then
        set udg_save_load_boolean[(playerId ) + 1 + bj_MAX_PLAYERS]=( true) // INLINED!!
        set udg_load_number[playerId + 1]=0
        call EnableTrigger(gg_trg_LoadUnit)
        call EnableTrigger(gg_trg_LoadUnit_Extra)
        
    elseif chatStr == "-load end" then
        set udg_save_load_boolean[(playerId ) + 1 + bj_MAX_PLAYERS]=( false) // INLINED!!
        set i=0
        loop
        exitwhen (udg_save_load_boolean[(i) + 1 + bj_MAX_PLAYERS]) or i == bj_MAX_PLAYERS // INLINED!!
            set i=i + 1
        endloop
        if i == bj_MAX_PLAYERS then
            call DisableTrigger(gg_trg_LoadUnit)
            call DisableTrigger(gg_trg_LoadUnit_Extra)
        endif
        
    else
        if GetLocalPlayer() == GetTriggerPlayer() then
            call LoadRequest(SubString(GetEventPlayerChatString(), 9, 129))
        endif
    endif
endfunction

//===========================================================================
function InitTrig_LoadRequest takes nothing returns nothing
    set gg_trg_LoadRequest=CreateTrigger()
    call TriggerAddAction(gg_trg_LoadRequest, function Trig_LoadRequest_Actions)
endfunction

//===========================================================================
// Trigger: LoadUnit
//
// save_LoadUnitType refers to the unit that is being loaded.
// Use the conditions in this trigger to filter which units can or cannot be loaded (by comparing unit types)
//===========================================================================
function Trig_LoadUnit_Conditions takes nothing returns boolean
    if ( not ( udg_save_LoadUnitType != 'H00V' ) ) then
        return false
    endif
    return true
endfunction

function Trig_LoadUnit_Actions takes nothing returns nothing
    local integer playerId= GetPlayerId(GetTriggerPlayer())
    local integer playerNumber= playerId + 1
    if (udg_save_load_boolean[(playerId) + 1 + bj_MAX_PLAYERS]) then // INLINED!!
        if udg_load_number[playerNumber] < udg_load_limit then
            set udg_load_number[playerNumber]=( udg_load_number[playerNumber] + 1 )
            call LoadUnit(GetEventPlayerChatString() , GetTriggerPlayer())
        endif
    else
    endif
endfunction

//===========================================================================
function InitTrig_LoadUnit takes nothing returns nothing
    set gg_trg_LoadUnit=CreateTrigger()
    call DisableTrigger(gg_trg_LoadUnit)
    call TriggerAddCondition(gg_trg_LoadUnit, Condition(function Trig_LoadUnit_Conditions))
    call TriggerAddAction(gg_trg_LoadUnit, function Trig_LoadUnit_Actions)
endfunction

//===========================================================================
// Trigger: LoadUnit Extra
//===========================================================================

    function Load_RestorePatrolPoints takes unit whichUnit,string chatStr returns nothing
        local integer cutToComma= CutToCharacter(chatStr , "=")
        local real x= S2R((SubString((chatStr ), 0, ( cutToComma)))) // INLINED!!
        local real y
        
        set chatStr=CutToCommaShorten(chatStr , cutToComma)
        set cutToComma=CutToCharacter(chatStr , "=")
        set y=S2R((SubString((chatStr ), 0, ( cutToComma)))) // INLINED!!
        
        
        // TODO: Create function to set first patrol in the GPS library
        if not ((LoadInteger(MultiPatrol___data, - ((GetHandleId((whichUnit)))), (9996))) != 0) then // INLINED!!
            call SetUnitPosition(whichUnit, x, y)
            call SaveInteger(MultiPatrol___data, - (GetHandleId(whichUnit) ), (9996), ( 1)) // INLINED!!
        else
            call Patrol_RegisterPoint(whichUnit , x , y)
        endif
        
    endfunction


function Load_RestoreWaygate takes string ha,unit whichGate returns nothing
    local integer cutToComma= CutToCharacter(ha , "=")
    local real wayGateX= S2R((SubString((ha ), 0, ( cutToComma)))) // INLINED!!
    local real wayGateY
    local string activate

    set ha=CutToCommaShorten(ha , cutToComma)
    set cutToComma=CutToCharacter(ha , "=")
    set wayGateY=S2R((SubString((ha ), 0, ( cutToComma)))) // INLINED!!
    set ha=CutToCommaShorten(ha , cutToComma)
    set cutToComma=CutToCharacter(ha , "=")
    set activate=(SubString((ha ), 0, ( cutToComma))) // INLINED!!
    
    call WaygateSetDestination(whichGate, wayGateX, wayGateY)
    if activate == "T" then
        call WaygateActivate(whichGate, true)
    else
        call WaygateActivate(whichGate, false)
    endif
endfunction

function Trig_LoadUnit_Extra_Actions takes nothing returns nothing
    local integer playerId= GetPlayerId(GetTriggerPlayer())
    local string eventStr= GetEventPlayerChatString()
    local string cmdStr= SubStringBJ(eventStr, 1, 3)
    
    if not (udg_save_load_boolean[(playerId) + 1 + bj_MAX_PLAYERS]) then // INLINED!!
        return
    endif
    
    
    
    if cmdStr == "=n " then
        call GUMSSetUnitName(udg_save_LastLoadedUnit[playerId] , SubString(eventStr, 3, StringLength(eventStr)))
    elseif cmdStr == "=w " then
        call Load_RestoreWaygate(SubString(eventStr, 3, StringLength(eventStr)) , udg_save_LastLoadedUnit[playerId])
    elseif cmdStr == "=p " then

            call Load_RestorePatrolPoints(udg_save_LastLoadedUnit[playerId] , SubString(eventStr, 3, StringLength(eventStr)))

    else

            call Load_RestoreGUDR(udg_save_LastLoadedUnit[playerId] , eventStr)

    endif
endfunction

//===========================================================================
function InitTrig_LoadUnit_Extra takes nothing returns nothing
    set gg_trg_LoadUnit_Extra=CreateTrigger()
    call DisableTrigger(gg_trg_LoadUnit_Extra)
    call TriggerAddAction(gg_trg_LoadUnit_Extra, function Trig_LoadUnit_Extra_Actions)
endfunction

//===========================================================================
// Trigger: LoadDest
//
// save_LoadUnitType refers to the unit that is being loaded.
// Use the conditions in this trigger to filter which units can or cannot be loaded (by comparing unit types)
//===========================================================================
function Trig_LoadDest_Actions takes nothing returns nothing
    local integer playerId= GetPlayerId(GetTriggerPlayer())
    local integer playerNumber= playerId + 1
    if (udg_save_load_boolean[(playerId) + 1 + bj_MAX_PLAYERS]) then // INLINED!!
        if udg_load_number[playerNumber] < udg_load_limit then
            set udg_load_number[playerNumber]=udg_load_number[playerNumber] + 1
            call LoadDestructable(GetEventPlayerChatString())
        endif
    endif
endfunction

//===========================================================================
function InitTrig_LoadDest takes nothing returns nothing
    set gg_trg_LoadDest=CreateTrigger()
    call TriggerAddAction(gg_trg_LoadDest, function Trig_LoadDest_Actions)
endfunction

//===========================================================================
// Trigger: LoadTerrain
//
// save_LoadUnitType refers to the unit that is being loaded.
// Use the conditions in this trigger to filter which units can or cannot be loaded (by comparing unit types)
//===========================================================================
function Trig_LoadTerrain_Actions takes nothing returns nothing
    local integer playerId= GetPlayerId(GetTriggerPlayer())
    local integer playerNumber= playerId + 1
    if (udg_save_load_boolean[(playerId) + 1 + bj_MAX_PLAYERS]) then // INLINED!!
        if udg_load_number[playerNumber] < udg_load_limit then
            set udg_load_number[playerNumber]=udg_load_number[playerNumber] + 1
            call LoadTerrain(GetEventPlayerChatString())
        endif
    endif
endfunction


//===========================================================================
function InitTrig_LoadTerrain takes nothing returns nothing
    set gg_trg_LoadTerrain=CreateTrigger()
    call TriggerAddAction(gg_trg_LoadTerrain, function Trig_LoadTerrain_Actions)
endfunction

//===========================================================================
// Trigger: SaveNLoad
//===========================================================================

// Trigger: GCOS Init Copy
//
// Hashtable
// Key:
// 0>Default Angle
// 1>x Center
// 2>y Center
// 3>x Radius
// 4>y Radius
// 5>Number of Points
// 6>Tilt
// 7>Rotation
// -Key:
// positive >x
// negative>y
// 0>Current Angle
//===========================================================================
function Trig_GCOS_Init_Copy_Actions takes nothing returns nothing
    call InitHashtableBJ()
    set udg_GCOS_Hashtable=GetLastCreatedHashtableBJ()
    set udg_GCOS_InstanceArray[0]=1
endfunction

//===========================================================================
function InitTrig_GCOS_Init_Copy takes nothing returns nothing
    set gg_trg_GCOS_Init_Copy=CreateTrigger()
    call TriggerAddAction(gg_trg_GCOS_Init_Copy, function Trig_GCOS_Init_Copy_Actions)
endfunction

//===========================================================================
// Trigger: Circle Object System
//===========================================================================
// Trigger: GDS Setup
//
// Set each GDS_ABIL to the correct ability.
// Set each GDS_BUFF to the correct buff.
// Set the created unit type to GDS_Dummy (in Custom->Human->Melee->Buildings).
//===========================================================================
function Trig_GDS_Setup_Actions takes nothing returns nothing
    call InitHashtableBJ()
    set udg_GDS_Hashtable=GetLastCreatedHashtableBJ()
    call SaveLocationHandle(udg_GDS_Hashtable, 2, 99, GetRectCenter(bj_mapInitialPlayableArea))
    set udg_GDS_cSTUN=0
    set udg_GDS_cSILENCE=1
    set udg_GDS_cDISARM_R=2
    set udg_GDS_cDISARM_M=3
    set udg_GDS_cDISARM_B=4
    set udg_GDS_cSNARE=5
    set udg_GDS_cSUPERSILENCE=6
    set udg_GDS_cSLEEP=7
    set udg_GDS_cENTANGLE=8
    set udg_GDS_cETHEREAL=9
    // -
    // SET THE CORRECT PARAMETERS HERE
    // -
    set udg_GDS_ABIL[udg_GDS_cSTUN]='A00Q'
    set udg_GDS_BUFF[udg_GDS_cSTUN]='B00K'
    // -
    set udg_GDS_ABIL[udg_GDS_cSILENCE]='A00U'
    set udg_GDS_BUFF[udg_GDS_cSILENCE]='B01K'
    // -
    set udg_GDS_ABIL[udg_GDS_cDISARM_R]='A01E'
    set udg_GDS_BUFF[udg_GDS_cDISARM_R]='B01J'
    // -
    set udg_GDS_ABIL[udg_GDS_cDISARM_M]='A01H'
    set udg_GDS_BUFF[udg_GDS_cDISARM_M]='B00W'
    // -
    set udg_GDS_ABIL[udg_GDS_cDISARM_B]='A01I'
    set udg_GDS_BUFF[udg_GDS_cDISARM_B]='B00L'
    // -
    set udg_GDS_ABIL[udg_GDS_cSNARE]='A00S'
    set udg_GDS_BUFF[udg_GDS_cSNARE]='B01R'
    // -
    set udg_GDS_ABIL[udg_GDS_cSUPERSILENCE]='A00R'
    set udg_GDS_BUFF[udg_GDS_cSUPERSILENCE]='B01S'
    // -
    set udg_GDS_ABIL[udg_GDS_cSLEEP]='A03L'
    set udg_GDS_BUFF[udg_GDS_cSLEEP]='B02W'
    // -
    set udg_GDS_ABIL[udg_GDS_cENTANGLE]='A03M'
    set udg_GDS_BUFF[udg_GDS_cENTANGLE]='B02S'
    // -
    set udg_GDS_ABIL[udg_GDS_cETHEREAL]='A03K'
    set udg_GDS_BUFF[udg_GDS_cETHEREAL]='B02V'
    // -
    set bj_forLoopAIndex=0
    set bj_forLoopAIndexEnd=9
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call CreateNUnitsAtLoc(1, 'h07Q', Player(bj_PLAYER_NEUTRAL_EXTRA), LoadLocationHandleBJ(99, 2, udg_GDS_Hashtable), bj_UNIT_FACING)
        call UnitAddAbilityBJ(udg_GDS_ABIL[GetForLoopIndexA()], GetLastCreatedUnit())
        set udg_GDS_DUMMY[GetForLoopIndexA()]=GetLastCreatedUnit()
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveLocation(LoadLocationHandle(udg_GDS_Hashtable, 2, 99))
    // -
    // YOU SHOULDN'T TOUCH ANYTHING BELOW THIS
    // -
    // Order Strings
    set udg_GDS_ORDERS[0]="thunderbolt"
    set udg_GDS_ORDERS[1]="soulburn"
    set udg_GDS_ORDERS[2]="drunkenhaze"
    set udg_GDS_ORDERS[3]="drunkenhaze"
    set udg_GDS_ORDERS[4]="drunkenhaze"
    set udg_GDS_ORDERS[5]="ensnare"
    set udg_GDS_ORDERS[6]="doom"
    set udg_GDS_ORDERS[7]="sleep"
    set udg_GDS_ORDERS[8]="entanglingroots"
    set udg_GDS_ORDERS[9]="banish"
    // -
    call SetForceAllianceStateBJ(GetPlayersAll(), GetForceOfPlayer(GetOwningPlayer(udg_GDS_DUMMY[0])), bj_ALLIANCE_UNALLIED_VISION)
    call SetForceAllianceStateBJ(GetForceOfPlayer(GetOwningPlayer(udg_GDS_DUMMY[0])), GetPlayersAll(), bj_ALLIANCE_UNALLIED)
    set udg_GDS_DebuffEvent=0.40
    set udg_GDS_zMIN=0.006
    return
    set udg_GDS_Duration=0.00
    set udg_GDS_Remaining=0.00
    set udg_GDS_Target=null
    set udg_GDS_Type=0
    set udg_GDS_zMIN=0.00
    set udg_GDS_Permanent=false
    set udg_GDS_RegisterDisable=false
endfunction

//===========================================================================
function InitTrig_GDS_Setup takes nothing returns nothing
    set gg_trg_GDS_Setup=CreateTrigger()
    call TriggerAddAction(gg_trg_GDS_Setup, function Trig_GDS_Setup_Actions)
endfunction

//===========================================================================
// Trigger: GDS Main Modifier
//
// This trigger . This makes it easy to declare conditions that change the behaviour of effetcs, allowing you to make stun resistance abilities, snare resistance abiltiies, etc.
// To have an effect ignore your conditions, simply run the Main trigger instead of running this modifier trigger.
//     set udg_GDS_cSTUN = 0
//     set udg_GDS_cSILENCE = 1
//     set udg_GDS_cDISARM_R = 2
//     set udg_GDS_cDISARM_M = 3
//     set udg_GDS_cDISARM_B = 4
//     set udg_GDS_cSNARE = 5
//     set udg_GDS_cSUPERSILENCE = 6
//     set udg_GDS_cSLEEP = 7
//     set udg_GDS_cENTANGLE = 8
//     set udg_GDS_cETHEREAL = 9
//===========================================================================
function GDSModifier0 takes nothing returns nothing

//Greater Frost Armor
if GetUnitAbilityLevel(udg_GDS_Target, 'B02R') > 0 then
    set udg_GDS_DurAdd=udg_GDS_DurAdd - 3
endif
//--------------
endfunction

function GDSModifier1 takes nothing returns nothing
endfunction

function GDSModifier2 takes nothing returns nothing
endfunction

function GDSModifier3 takes nothing returns nothing
endfunction

function GDSModifier4 takes nothing returns nothing
endfunction

function GDSModifier5 takes nothing returns nothing
endfunction

function GDSModifier6 takes nothing returns nothing
endfunction

function GDSModifier7 takes nothing returns nothing
endfunction

function GDSModifier8 takes nothing returns nothing
endfunction

function GDSModifier9 takes nothing returns nothing
endfunction

function GDSChooseMod takes nothing returns nothing
    if udg_GDS_Type == 0 then
        call GDSModifier0()
    endif
    if udg_GDS_Type == 1 then
        call GDSModifier1()
    endif
    if udg_GDS_Type == 2 then
        call GDSModifier2()
    endif
    if udg_GDS_Type == 3 then
        call GDSModifier3()
    endif
    if udg_GDS_Type == 4 then
        call GDSModifier4()
    endif
    if udg_GDS_Type == 5 then
        call GDSModifier5()
    endif
    if udg_GDS_Type == 6 then
        call GDSModifier6()
    endif
    if udg_GDS_Type == 7 then
        call GDSModifier7()
    endif
    if udg_GDS_Type == 8 then
        call GDSModifier8()
    endif
    if udg_GDS_Type == 9 then
        call GDSModifier9()
    endif
endfunction

function GDSGeneral takes nothing returns nothing
    //if IsUnitType(udg_GDS_Target , UNIT_TYPE_HERO) then
        //set udg_GDS_DurMul = udg_GDS_DurMul * 0.80
    //endif    

endfunction

function Trig_GDS_Main_Modifier_Actions takes nothing returns nothing
    local real storeDur= udg_GDS_Duration

    // Declare your modifying conditions here
    
    set udg_GDS_DurAdd=0
    set udg_GDS_DurMul=1
    set udg_GDS_DurMin=0

    call GDSChooseMod()
    call GDSGeneral()

    set udg_GDS_Duration=( udg_GDS_Duration + udg_GDS_DurAdd ) * udg_GDS_DurMul

    if udg_GDS_Duration < udg_GDS_DurMin then
        set udg_GDS_Duration=udg_GDS_DurMin
    endif

    // Run Main after your conditions have been checked
   
    call TriggerExecute(gg_trg_GDS_Main)

    // Restore duration to old duration (for unit group loops) and reset MinDuration
    //call BJDebugMsg(R2S(udg_GDS_Duration))
    //call BJDebugMsg(GetUnitName(udg_GDS_Target))
    set udg_GDS_Duration=storeDur
endfunction

//===========================================================================
function InitTrig_GDS_Main_Modifier takes nothing returns nothing
    set gg_trg_GDS_Main_Modifier=CreateTrigger()
    call TriggerAddAction(gg_trg_GDS_Main_Modifier, function Trig_GDS_Main_Modifier_Actions)
endfunction

//===========================================================================
// Trigger: GDS Main
//
// ====Disable System version 2.4.1==== (fixed timer cleanup)
// Created by Guhun
// Credits: 
// Menag for making the system that gave me the idea to make this one ("[WurstScript] Status Handler")
// Reventhous for thinking of the "Disable" name
//===========================================================================



function GDSDebuffApplied takes nothing returns nothing
    local timer t= GetExpiredTimer()
    local integer tHandle= GetHandleId(t)
    local integer stunType= LoadInteger(udg_GDS_Hashtable, tHandle, 1)
    local unit u= LoadUnitHandle(udg_GDS_Hashtable, tHandle, 0)

    if GetUnitAbilityLevel(u, udg_GDS_BUFF[stunType]) != 0 then
        
        call FlushChildHashtable(udg_GDS_Hashtable, GetHandleId(t))
        call PauseTimer(t)
        call DestroyTimer(t)

        set udg_GDS_DebuffEvent=stunType
        set udg_GDS_Target=u
        set udg_GDS_DebuffEvent=0.5
    else
        call TimerStart(t, udg_GDS_zMIN, false, function GDSDebuffApplied)
    endif
    set u=null
    set t=null
endfunction

function GDSDebuffEnd takes nothing returns nothing
    local timer t= GetExpiredTimer()
    local integer tHandle= GetHandleId(t)
    local integer stunType= LoadInteger(udg_GDS_Hashtable, tHandle, 2)
    local unit u= LoadUnitHandle(udg_GDS_Hashtable, tHandle, 0)
    local integer uHandle= LoadInteger(udg_GDS_Hashtable, tHandle, 1)

    call UnitRemoveAbility(u, udg_GDS_BUFF[stunType])

    call FlushChildHashtable(udg_GDS_Hashtable, GetHandleId(t))
    call RemoveSavedHandle(udg_GDS_Hashtable, uHandle, stunType)
    call PauseTimer(t)
    call DestroyTimer(t)

    set u=null
    set t=null
endfunction

function GDSMain takes nothing returns nothing
    local timer t
    local timer timerOld= LoadTimerHandle(udg_GDS_Hashtable, GetHandleId(udg_GDS_Target), udg_GDS_Type)
    local real duration= udg_GDS_Duration
    local boolean hadTimer= timerOld != null

    
    set udg_GDS_Remaining=TimerGetRemaining(timerOld)
//Check if user wants a permanent debuff
    if udg_GDS_Permanent then
        set udg_GDS_Permanent=false
        if hadTimer then

            call FlushChildHashtable(udg_GDS_Hashtable, GetHandleId(timerOld))
            call PauseTimer(timerOld)
            call DestroyTimer(timerOld)
            call RemoveSavedHandle(udg_GDS_Hashtable, GetHandleId(udg_GDS_Target), udg_GDS_Type)

            set timerOld=null
        else
            if IssueTargetOrder(udg_GDS_DUMMY[udg_GDS_Type], udg_GDS_ORDERS[udg_GDS_Type], udg_GDS_Target) or GetUnitAbilityLevel(udg_GDS_Target, udg_GDS_BUFF[udg_GDS_Type]) != 0 then
                set udg_GDS_Remaining=- 1
            else
                set udg_GDS_Remaining=0
            endif
        endif

        if udg_GDS_RegisterDisable then
            set t=CreateTimer()
            call SaveUnitHandle(udg_GDS_Hashtable, GetHandleId(t), 0, udg_GDS_Target)
            call SaveInteger(udg_GDS_Hashtable, GetHandleId(t), 1, udg_GDS_Type)
            call TimerStart(t, udg_GDS_zMIN, false, function GDSDebuffApplied)
            set t=null
        endif

        return
    endif
//Check if user wants to reduce duration of stun (check for negative duration)
    if duration < - udg_GDS_zMIN and udg_GDS_Remaining > udg_GDS_zMIN then //Check for reduction
        if - duration > udg_GDS_Remaining then //Check if reduction goes below 0
            call UnitRemoveAbility(udg_GDS_Target, udg_GDS_BUFF[udg_GDS_Type])
            set duration=0
        else
            set duration=udg_GDS_Remaining - duration //Change duration so it passes the checks
        endif
    endif

//Check if the desired duration is higher than remaining time
    if udg_GDS_Remaining < duration and duration > udg_GDS_zMIN and hadTimer then

        if hadTimer then
            set t=timerOld
        else
            set t=CreateTimer()
            set timerOld=null
        endif
 
    else
        //Check if unit has buff, clean hashtable, destroy timer and set remaining time to 0
        if GetUnitAbilityLevel(udg_GDS_Target, udg_GDS_BUFF[udg_GDS_Type]) == 0 then

            call FlushChildHashtable(udg_GDS_Hashtable, GetHandleId(timerOld))
            call PauseTimer(timerOld)
            call DestroyTimer(timerOld)
            call RemoveSavedHandle(udg_GDS_Hashtable, GetHandleId(udg_GDS_Target), udg_GDS_Type)

            set timerOld=null

            if duration < udg_GDS_zMIN then
                set udg_GDS_Remaining=0
                return
            endif

            set t=CreateTimer()

        else

            if hadTimer then
                set timerOld=null
            else
                set udg_GDS_Remaining=- 1
            endif
            return
        endif
    endif


//Check was successful, proceed to attempt to stun
    if not IssueTargetOrder(udg_GDS_DUMMY[udg_GDS_Type], udg_GDS_ORDERS[udg_GDS_Type], udg_GDS_Target) and GetUnitAbilityLevel(udg_GDS_Target, udg_GDS_BUFF[udg_GDS_Type]) == 0 then
        set timerOld=null
        set udg_GDS_Remaining=0
        //call BJDebugMsg("No stun")
        return //unable to stun, do nothing
    endif
//Check again for duration reduction (negative duration)    
    if udg_GDS_Duration < 0 then
        set duration=duration + 2 * udg_GDS_Duration //Change duration to reduced duration
    endif
//Save Hashtable values only if a new timer has been created    
    if not hadTimer then
        call SaveUnitHandle(udg_GDS_Hashtable, GetHandleId(t), 0, udg_GDS_Target)
        call SaveInteger(udg_GDS_Hashtable, GetHandleId(t), 1, GetHandleId(udg_GDS_Target))
        call SaveInteger(udg_GDS_Hashtable, GetHandleId(t), 2, udg_GDS_Type)
        call SaveTimerHandle(udg_GDS_Hashtable, GetHandleId(udg_GDS_Target), udg_GDS_Type, t)
    endif
    

    call TimerStart(t, duration, false, function GDSDebuffEnd)
   
    
    set udg_GDS_Remaining=duration
    

    if udg_GDS_RegisterDisable then
        set t=CreateTimer()
        call SaveUnitHandle(udg_GDS_Hashtable, GetHandleId(t), 0, udg_GDS_Target)
        call SaveInteger(udg_GDS_Hashtable, GetHandleId(t), 1, udg_GDS_Type)
        call TimerStart(t, 2 * udg_GDS_zMIN, false, function GDSDebuffApplied)
    endif
    
    set timerOld=null
    set t=null
    
endfunction



//===========================================================================
function InitTrig_GDS_Main takes nothing returns nothing
    set gg_trg_GDS_Main=CreateTrigger()
    call TriggerAddAction(gg_trg_GDS_Main, function GDSMain)
endfunction

//===========================================================================
// Trigger: Spell System Filter Decorations
//
// This trigger is used by spells that pick a group of units in range. It simply filters decoration units, preventing them from being added to the unit goup.
//===========================================================================
function Trig_Spell_System_Filter_Decorations_Conditions takes nothing returns boolean
    if GetUnitAbilityLevel(udg_Spell__InRangeUnit, 'A0C6') != 0 then
        return false
    endif
    return true
endfunction

//===========================================================================
function InitTrig_Spell_System_Filter_Decorations takes nothing returns nothing
    set gg_trg_Spell_System_Filter_Decorations=CreateTrigger()
    call TriggerAddCondition(gg_trg_Spell_System_Filter_Decorations, Condition(function Trig_Spell_System_Filter_Decorations_Conditions))
endfunction

//===========================================================================
// Trigger: Initialize Spells
//
// This trigger simply initializes all the spells. For mroe detail, check the Spell System Sample Config trigger below.
//===========================================================================
function Trig_Initialize_Spells_Actions takes nothing returns nothing
    //  
    // ---------------------------
    // MASS ENSNARE
    // ---------------------------
    set udg_Spell__Ability='A01J'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_AoE_Snare
    //  
    set udg_Spell__Filter_AllowEnemy=true
    set udg_Spell__Filter_AllowLiving=true
    set udg_Spell__Filter_AllowHero=true
    set udg_Spell__Filter_AllowNonHero=true
    set udg_Spell__Filter_AllowFlying=true
    set udg_Spell__Filter_AllowMechanical=true
    set udg_Spell__Filter_AllowMagicImmune=true
    set udg_Spell__Filter_AllowStructure=false
    //  
    set udg_Spell__Trigger_InRangeFilter=gg_trg_Spell_System_Filter_Decorations
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // ASTROLOGER TELEPORT (SPATIAL DSTORTION)
    // ---------------------------
    set udg_Spell__Ability='A02U'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Spatial_Distortion_Cast
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // MASS BANISH
    // ---------------------------
    set udg_Spell__Ability='A03J'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Mass_Banish
    //  
    set udg_Spell__Filter_AllowEnemy=true
    set udg_Spell__Filter_AllowLiving=true
    set udg_Spell__Filter_AllowHero=true
    set udg_Spell__Filter_AllowNonHero=true
    set udg_Spell__Filter_AllowFlying=true
    set udg_Spell__Filter_AllowMechanical=false
    set udg_Spell__Filter_AllowMagicImmune=false
    set udg_Spell__Filter_AllowStructure=false
    set udg_Spell__Filter_AllowAlly=false
    set udg_Spell__Filter_AllowDead=false
    //  
    set udg_Spell__Trigger_InRangeFilter=gg_trg_Spell_System_Filter_Decorations
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // MAKE UNITS SELECTABLE
    // ---------------------------
    set udg_Spell__Ability='A03N'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Make_Unit_Selectable
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // JUDGEMENT (ANGEL STUN)
    // ---------------------------
    set udg_Spell__Ability='A03T'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Angel_Judgement
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // JUDGEMENT (TYRAEL)
    // ---------------------------
    set udg_Spell__Ability='A03V'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Tyrael_Judgement
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // HOJ
    // ---------------------------
    set udg_Spell__Ability='A04B'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Tyrael_WotT_Cast
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // CHAIN SLOW
    // ---------------------------
    set udg_Spell__Ability='A04C'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Chain_Slow
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // STORMSTRIKE
    // ---------------------------
    set udg_Spell__Ability='A04P'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Stormstrike
    //  
    set udg_Spell__Filter_AllowEnemy=true
    set udg_Spell__Filter_AllowLiving=true
    set udg_Spell__Filter_AllowHero=true
    set udg_Spell__Filter_AllowNonHero=true
    set udg_Spell__Filter_AllowFlying=false
    set udg_Spell__Filter_AllowMechanical=true
    set udg_Spell__Filter_AllowMagicImmune=false
    set udg_Spell__Filter_AllowStructure=false
    set udg_Spell__Filter_AllowAlly=false
    set udg_Spell__Filter_AllowDead=false
    //  
    set udg_Spell__Trigger_InRangeFilter=gg_trg_Spell_System_Filter_Decorations
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // REPLENISH
    // ---------------------------
    set udg_Spell__Ability='Arpb'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Replenish
    //  
    set udg_Spell__Filter_AllowEnemy=false
    set udg_Spell__Filter_AllowLiving=true
    set udg_Spell__Filter_AllowHero=true
    set udg_Spell__Filter_AllowNonHero=true
    set udg_Spell__Filter_AllowFlying=true
    set udg_Spell__Filter_AllowMechanical=false
    set udg_Spell__Filter_AllowMagicImmune=true
    set udg_Spell__Filter_AllowStructure=false
    set udg_Spell__Filter_AllowAlly=true
    set udg_Spell__Filter_AllowDead=false
    //  
    set udg_Spell__Trigger_InRangeFilter=gg_trg_Spell_System_Filter_Decorations
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // DISARMING BLOW
    // ---------------------------
    set udg_Spell__Ability='A051'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Disarming_Blow
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // SCATTER SHOT
    // ---------------------------
    set udg_Spell__Ability='A054'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Scatter_Shot
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    set udg_Spell__Ability='A02E'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Scatter_Shot
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // LIGHT OF VALOR (IMPERIUS)
    // ---------------------------
    set udg_Spell__Ability='A057'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Imperius_Light_of_Valor
    //  
    set udg_Spell__Filter_AllowEnemy=false
    set udg_Spell__Filter_AllowLiving=true
    set udg_Spell__Filter_AllowHero=true
    set udg_Spell__Filter_AllowNonHero=true
    set udg_Spell__Filter_AllowFlying=true
    set udg_Spell__Filter_AllowMechanical=false
    set udg_Spell__Filter_AllowMagicImmune=true
    set udg_Spell__Filter_AllowStructure=false
    set udg_Spell__Filter_AllowAlly=true
    set udg_Spell__Filter_AllowDead=false
    //  
    set udg_Spell__Trigger_InRangeFilter=gg_trg_Spell_System_Filter_Decorations
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // WAR STOMP
    // ---------------------------
    set udg_Spell__Ability='A058'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_War_Stomp
    //  
    set udg_Spell__Filter_AllowEnemy=true
    set udg_Spell__Filter_AllowLiving=true
    set udg_Spell__Filter_AllowHero=true
    set udg_Spell__Filter_AllowNonHero=true
    set udg_Spell__Filter_AllowFlying=false
    set udg_Spell__Filter_AllowMechanical=false
    set udg_Spell__Filter_AllowMagicImmune=false
    set udg_Spell__Filter_AllowStructure=false
    set udg_Spell__Filter_AllowAlly=false
    set udg_Spell__Filter_AllowDead=false
    //  
    set udg_Spell__Trigger_InRangeFilter=gg_trg_Spell_System_Filter_Decorations
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // CARRION BURST
    // ---------------------------
    set udg_Spell__Ability='A029'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Carrion_Burst
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // BURST OF DESPAIR
    // ---------------------------
    set udg_Spell__Ability='A02A'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Burst_of_Despair
    //  
    set udg_Spell__Filter_AllowEnemy=true
    set udg_Spell__Filter_AllowLiving=true
    set udg_Spell__Filter_AllowHero=true
    set udg_Spell__Filter_AllowNonHero=true
    set udg_Spell__Filter_AllowFlying=false
    set udg_Spell__Filter_AllowMechanical=false
    set udg_Spell__Filter_AllowMagicImmune=false
    set udg_Spell__Filter_AllowStructure=false
    set udg_Spell__Filter_AllowAlly=false
    set udg_Spell__Filter_AllowDead=false
    //  
    set udg_Spell__Trigger_InRangeFilter=gg_trg_Spell_System_Filter_Decorations
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // GREATER SHOCKWAVE
    // ---------------------------
    set udg_Spell__Ability='A02R'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Greater_Shockwave
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // BURST OF DESPAIR
    // ---------------------------
    set udg_Spell__Ability='A03F'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Bladespin
    //  
    set udg_Spell__Filter_AllowEnemy=true
    set udg_Spell__Filter_AllowLiving=true
    set udg_Spell__Filter_AllowHero=true
    set udg_Spell__Filter_AllowNonHero=true
    set udg_Spell__Filter_AllowFlying=false
    set udg_Spell__Filter_AllowMechanical=true
    set udg_Spell__Filter_AllowMagicImmune=true
    set udg_Spell__Filter_AllowStructure=false
    set udg_Spell__Filter_AllowAlly=false
    set udg_Spell__Filter_AllowDead=false
    //  
    set udg_Spell__Trigger_InRangeFilter=gg_trg_Spell_System_Filter_Decorations
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // Charge
    // ---------------------------
    set udg_Spell__Ability='A059'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Charge_Cast
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // BURST OF DESPAIR
    // ---------------------------
    set udg_Spell__Ability='A05A'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Thunderstrike_Cast
    //  
    set udg_Spell__Filter_AllowEnemy=true
    set udg_Spell__Filter_AllowLiving=true
    set udg_Spell__Filter_AllowHero=true
    set udg_Spell__Filter_AllowNonHero=true
    set udg_Spell__Filter_AllowFlying=true
    set udg_Spell__Filter_AllowMechanical=true
    set udg_Spell__Filter_AllowMagicImmune=false
    set udg_Spell__Filter_AllowStructure=false
    set udg_Spell__Filter_AllowAlly=false
    set udg_Spell__Filter_AllowDead=false
    //  
    set udg_Spell__Trigger_InRangeFilter=gg_trg_Spell_System_Filter_Decorations
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // BURST OF DESPAIR
    // ---------------------------
    set udg_Spell__Ability='A05B'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Waterspout
    //  
    set udg_Spell__Filter_AllowEnemy=true
    set udg_Spell__Filter_AllowLiving=true
    set udg_Spell__Filter_AllowHero=true
    set udg_Spell__Filter_AllowNonHero=true
    set udg_Spell__Filter_AllowFlying=false
    set udg_Spell__Filter_AllowMechanical=true
    set udg_Spell__Filter_AllowMagicImmune=false
    set udg_Spell__Filter_AllowStructure=false
    set udg_Spell__Filter_AllowAlly=false
    set udg_Spell__Filter_AllowDead=false
    //  
    set udg_Spell__Trigger_InRangeFilter=gg_trg_Spell_System_Filter_Decorations
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // Battle Jump
    // ---------------------------
    set udg_Spell__Ability='A05P'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Battle_Jump_Cast
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // Ethereal Jaunt
    // ---------------------------
    set udg_Spell__Ability='A05S'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Ethereal_Jaunt
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // Power Surge
    // ---------------------------
    set udg_Spell__Ability='A050'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Power_Surge
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // Deco Waygate
    // ---------------------------
    set udg_Spell__Ability='A01Y'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Deco_Waygate
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // Deco Gate Open
    // ---------------------------
    set udg_Spell__Ability='A0B3'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Deco_Gates
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    // ---------------------------
    // Deco Gate Close
    // ---------------------------
    set udg_Spell__Ability='A0B5'
    //  
    set udg_Spell__Trigger_OnEffect=gg_trg_Deco_Gates
    //  
    call TriggerExecute(gg_trg_Spell_System)
    //  
    //  
    //  
    //  
    //  
    //  
    //  
    //  
    //  
endfunction

//===========================================================================
function InitTrig_Initialize_Spells takes nothing returns nothing
    set gg_trg_Initialize_Spells=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_Initialize_Spells, 0.00)
    call TriggerAddAction(gg_trg_Initialize_Spells, function Trig_Initialize_Spells_Actions)
endfunction

//===========================================================================
// Trigger: Spatial Distortion Cast
//===========================================================================
function Trig_Spatial_Distortion_Cast_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(udg_Spell__Caster) != 'H098' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Spatial_Distortion_Cast_Actions takes nothing returns nothing
    call UnitDamagePointLoc(udg_Spell__Caster, 0.20, 150.00, udg_Spell__CastPoint, 20.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
    call UnitDamagePointLoc(udg_Spell__Caster, 0.40, 150.00, udg_Spell__CastPoint, 20.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
    call UnitDamagePointLoc(udg_Spell__Caster, 0.60, 150.00, udg_Spell__CastPoint, 20.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
    call UnitDamagePointLoc(udg_Spell__Caster, 0.80, 150.00, udg_Spell__CastPoint, 20.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
    call UnitDamagePointLoc(udg_Spell__Caster, 1.00, 150.00, udg_Spell__CastPoint, 20.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
endfunction

//===========================================================================
function InitTrig_Spatial_Distortion_Cast takes nothing returns nothing
    set gg_trg_Spatial_Distortion_Cast=CreateTrigger()
    call TriggerAddCondition(gg_trg_Spatial_Distortion_Cast, Condition(function Trig_Spatial_Distortion_Cast_Conditions))
    call TriggerAddAction(gg_trg_Spatial_Distortion_Cast, function Trig_Spatial_Distortion_Cast_Actions)
endfunction

//===========================================================================
// Trigger: AoE Snare
//===========================================================================
function Trig_AoE_Snare_Func005A takes nothing returns nothing
    set udg_GDS_Target=GetEnumUnit()
    call TriggerExecute(gg_trg_GDS_Main_Modifier)
endfunction

function Trig_AoE_Snare_Actions takes nothing returns nothing
    set udg_GDS_Type=udg_GDS_cSNARE
    set udg_GDS_Duration=10.00
    set udg_Spell__InRangePoint=udg_Spell__CastPoint
    set udg_Spell__InRange=1000.00
    call ForGroupBJ(udg_Spell__InRangeGroup, function Trig_AoE_Snare_Func005A)
endfunction

//===========================================================================
function InitTrig_AoE_Snare takes nothing returns nothing
    set gg_trg_AoE_Snare=CreateTrigger()
    call TriggerAddAction(gg_trg_AoE_Snare, function Trig_AoE_Snare_Actions)
endfunction

//===========================================================================
// Trigger: Mass Banish
//===========================================================================
function Trig_Mass_Banish_Func004Func001Func001C takes nothing returns boolean
    if ( ( IsUnitType(GetEnumUnit(), UNIT_TYPE_HERO) == true ) ) then
        return true
    endif
    if ( ( IsUnitType(GetEnumUnit(), UNIT_TYPE_RESISTANT) == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_Mass_Banish_Func004Func001C takes nothing returns boolean
    if ( not Trig_Mass_Banish_Func004Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Mass_Banish_Func004A takes nothing returns nothing
    if ( Trig_Mass_Banish_Func004Func001C() ) then
        set udg_GDS_Duration=4.50
    else
        set udg_GDS_Duration=7.50
    endif
    set udg_GDS_Target=GetEnumUnit()
    call TriggerExecute(gg_trg_GDS_Main_Modifier)
endfunction

function Trig_Mass_Banish_Actions takes nothing returns nothing
    set udg_GDS_Type=udg_GDS_cETHEREAL
    set udg_Spell__InRangePoint=udg_Spell__TargetPoint
    set udg_Spell__InRange=300.00
    call ForGroupBJ(udg_Spell__InRangeGroup, function Trig_Mass_Banish_Func004A)
endfunction

//===========================================================================
function InitTrig_Mass_Banish takes nothing returns nothing
    set gg_trg_Mass_Banish=CreateTrigger()
    call TriggerAddAction(gg_trg_Mass_Banish, function Trig_Mass_Banish_Actions)
endfunction

//===========================================================================
// Trigger: Make Unit Selectable
//===========================================================================
function Trig_Make_Unit_Selectable_Func003A takes nothing returns nothing
    local unit enumUnit= GetEnumUnit()
    local real unitX= GetUnitX(enumUnit)
    local real unitY= GetUnitY(enumUnit)
    local real locX= GetLocationX(udg_Spell__TargetPoint)
    local real locY= GetLocationY(udg_Spell__TargetPoint)
    if SquareRoot(( unitX - locX ) * ( unitX - locX ) + ( unitY - locY ) * ( unitY - locY )) <= 300 then
        if (LoadInteger(UnitVisualMods___hashTable, GetHandleId((enumUnit)), UnitVisualMods___SELECT)) != 0 then // INLINED!!
            call GUMSMakeUnitSelectable(enumUnit)
            call KillUnit(enumUnit)
        endif
    endif
    
    set enumUnit=null
endfunction

function Trig_Make_Unit_Selectable_Actions takes nothing returns nothing
    local group l__udg_temp_group= CreateGroup()
    call GroupEnumUnitsOfPlayer(l__udg_temp_group, GetOwningPlayer(GetTriggerUnit()), null)
    call ForGroup(l__udg_temp_group, function Trig_Make_Unit_Selectable_Func003A)
    call DestroyGroup(l__udg_temp_group)
    set l__udg_temp_group=null
    return
endfunction

//===========================================================================
function InitTrig_Make_Unit_Selectable takes nothing returns nothing
    set gg_trg_Make_Unit_Selectable=CreateTrigger()
    call TriggerAddAction(gg_trg_Make_Unit_Selectable, function Trig_Make_Unit_Selectable_Actions)
endfunction

//===========================================================================
// Trigger: Angel Judgement
//===========================================================================
function Trig_Angel_Judgement_Func002Func001C takes nothing returns boolean
    if ( ( IsUnitType(udg_Spell__Target, UNIT_TYPE_HERO) == true ) ) then
        return true
    endif
    if ( ( IsUnitType(udg_Spell__Target, UNIT_TYPE_RESISTANT) == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_Angel_Judgement_Func002C takes nothing returns boolean
    if ( not Trig_Angel_Judgement_Func002Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Angel_Judgement_Actions takes nothing returns nothing
    set udg_GDS_Type=udg_GDS_cSTUN
    if ( Trig_Angel_Judgement_Func002C() ) then
        set udg_GDS_Duration=1.00
    else
        set udg_GDS_Duration=2.00
    endif
    set udg_GDS_Target=udg_Spell__Target
    call UnitDamageTargetBJ(udg_Spell__Caster, udg_Spell__Target, 100.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
    call TriggerExecute(gg_trg_GDS_Main_Modifier)
endfunction

//===========================================================================
function InitTrig_Angel_Judgement takes nothing returns nothing
    set gg_trg_Angel_Judgement=CreateTrigger()
    call TriggerAddAction(gg_trg_Angel_Judgement, function Trig_Angel_Judgement_Actions)
endfunction

//===========================================================================
// Trigger: Tyrael Judgement
//===========================================================================
function Trig_Tyrael_Judgement_Func002Func001C takes nothing returns boolean
    if ( ( IsUnitType(udg_Spell__Target, UNIT_TYPE_HERO) == true ) ) then
        return true
    endif
    if ( ( IsUnitType(udg_Spell__Target, UNIT_TYPE_RESISTANT) == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_Tyrael_Judgement_Func002C takes nothing returns boolean
    if ( not Trig_Tyrael_Judgement_Func002Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Tyrael_Judgement_Actions takes nothing returns nothing
    set udg_GDS_Type=udg_GDS_cSTUN
    if ( Trig_Tyrael_Judgement_Func002C() ) then
        set udg_GDS_Duration=( 3.00 * ( 2.00 - ( GetUnitStateSwap(UNIT_STATE_LIFE, udg_Spell__Caster) / GetUnitStateSwap(UNIT_STATE_MAX_LIFE, udg_Spell__Caster) ) ) )
    else
        set udg_GDS_Duration=( 5.00 * ( 2.00 - ( GetUnitStateSwap(UNIT_STATE_LIFE, udg_Spell__Caster) / GetUnitStateSwap(UNIT_STATE_MAX_LIFE, udg_Spell__Caster) ) ) )
    endif
    set udg_GDS_Target=udg_Spell__Target
    call UnitDamageTargetBJ(udg_Spell__Caster, udg_Spell__Target, ( 300.00 * ( 2.00 - ( GetUnitStateSwap(UNIT_STATE_LIFE, udg_Spell__Caster) / GetUnitStateSwap(UNIT_STATE_MAX_LIFE, udg_Spell__Caster) ) ) ), ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
    call TriggerExecute(gg_trg_GDS_Main_Modifier)
endfunction

//===========================================================================
function InitTrig_Tyrael_Judgement takes nothing returns nothing
    set gg_trg_Tyrael_Judgement=CreateTrigger()
    call TriggerAddAction(gg_trg_Tyrael_Judgement, function Trig_Tyrael_Judgement_Actions)
endfunction

//===========================================================================
// Trigger: Tyrael WotT Cast
//===========================================================================
//===========================================================================
// CONFIG (some of it is in the Object Editor ability)
//===========================================================================
function WotT_ATTACK_SPEED_REDUCTION takes nothing returns integer
    return - 20
endfunction

function WotT_MOVE_SPEED_REDUCTION takes nothing returns real
    return 0.5
endfunction

function WotT_BASE_ORDER_ID takes nothing returns string
    return "corporealform"
endfunction

//===========================================================================
// CODE
//===========================================================================
// Spell end and cleanup
function WotTSlowGroupRemoveDebuff takes nothing returns nothing
    local unit u= GetEnumUnit()
    call CSS_AddBonus(u , - (- 20) , 1) // INLINED!!
    call GMSS_UnitMultiplyMoveSpeedEx(((u ) ) , (( (( 1. / (0.5))*1.0))*1.0) , (0.000) , (522.0)) // INLINED!!
    set u=null
endfunction

function WotTFinish takes timer t,integer tKey,unit dummy,integer circleId returns nothing
    local group slowGroup= (LoadGroupHandle(ArrayAgent_hashTable, ((GetHandleId((dummy))) ), ( 0))) // INLINED!!
    call ForGroup(slowGroup, function WotTSlowGroupRemoveDebuff)
    
    call DestroyGroup(slowGroup)
    call DestroyGCOS(circleId)
    call RemoveUnit(dummy)
    call FlushChildHashtable(ArrayAgent_hashTable, (tKey)) // INLINED!!
    call FlushChildHashtable(ArrayAgent_hashTable, ((GetHandleId((dummy))))) // INLINED!!
    call PauseTimer(t)
    call DestroyTimer(t)

    set slowGroup=null
endfunction

//===========================================================================
// Spell Main Loop
function WotTTimerAction takes nothing returns nothing
    local timer t= GetExpiredTimer()
    local integer tKey= (GetHandleId((GetExpiredTimer()))) // INLINED!!
    local integer circleId= (LoadInteger(ArrayAgent_hashTable, (tKey ), ( 0))) // INLINED!!
    local unit dummy= (LoadUnitHandle(ArrayAgent_hashTable, (tKey ), ( 1))) // INLINED!!
    local integer i= 0

    if OrderId2String(GetUnitCurrentOrder((LoadUnitHandle(ArrayAgent_hashTable, (tKey ), ( 2))))) == ("corporealform") then // INLINED!!
        call UpdateGCOS(circleId)
        loop
        exitwhen i > 8
            call IssuePointOrder(dummy, "carrionswarm", (LoadReal(udg_GCOS_Hashtable, - (circleId ), ( i))), (LoadReal(udg_GCOS_Hashtable, - (circleId ), - ( i)))) // INLINED!!
            set i=i + 1
        endloop
    else
        call WotTFinish(GetExpiredTimer() , tKey , dummy , circleId)
    endif
    
    set dummy=null
    set t=null
endfunction

//===========================================================================
// Spell Cast Event Response
function WotTCastAction takes nothing returns nothing
    local integer circleId= CreateGCOS(0 , GetLocationX(udg_Spell__TargetPoint) , GetLocationY(udg_Spell__TargetPoint) , 200 , 200 , 16 , 0 , bj_PI / 4)
    local timer t= CreateTimer()
    local integer tKey= (GetHandleId((t))) // INLINED!!
    local group slowGroup= CreateGroup()
    local unit dummy= CreateUnit(udg_Spell__CasterOwner, 'h07Q', GetLocationX(udg_Spell__TargetPoint), GetLocationY(udg_Spell__TargetPoint), 270)

    call UnitAddAbility(dummy, 'A045')
    call SaveInteger(ArrayAgent_hashTable, (tKey ), ( 0 ), ( circleId)) // INLINED!!
    call SaveAgentHandle(ArrayAgent_hashTable, (tKey ), ( 1 ), ( dummy)) // INLINED!!
    call SaveAgentHandle(ArrayAgent_hashTable, (tKey ), ( 2 ), ( udg_Spell__Caster)) // INLINED!!
    call SaveAgentHandle(ArrayAgent_hashTable, ((GetHandleId((dummy))) ), ( 0 ), ( slowGroup)) // INLINED!!
    call SaveInteger((ArrayAgent_hashTable), ((- GetHandleId((dummy))) ), 1, ( 'A04B')) // INLINED!!
    call SaveUnitHandle((ArrayAgent_hashTable), ((- GetHandleId((dummy))) ), 0, ( udg_Spell__Caster)) // INLINED!!
    
    call TimerStart(t, 1, true, function WotTTimerAction)
    set t=null
    set slowGroup=null
    set dummy=null
endfunction

//===========================================================================
// Dummy on damage trigger
function HoJSlowAction takes nothing returns boolean
    local group slowGroup= (LoadGroupHandle(ArrayAgent_hashTable, ((GetHandleId((udg_DamageEventSource))) ), ( 0))) // INLINED!!
    if not IsUnitInGroup(udg_DamageEventTarget, slowGroup) then
        call CSS_AddBonus(udg_DamageEventTarget , (- 20) , 1) // INLINED!!
        call GMSS_UnitMultiplyMoveSpeedEx(((udg_DamageEventTarget ) ) , (( (( (0.5))*1.0))*1.0) , (0.000) , (522.0)) // INLINED!!
        call GroupAddUnit(slowGroup, udg_DamageEventTarget)
        
    endif
    
    set slowGroup=null
    return false
endfunction

//===========================================================================
function InitTrig_Tyrael_WotT_Cast takes nothing returns nothing
    set gg_trg_Tyrael_WotT_Cast=CreateTrigger()
    call TriggerAddAction(gg_trg_Tyrael_WotT_Cast, function WotTCastAction)
    
    //Tyrael - Will of the Tribunal: Slow damaged Units 
    call InitializeOnDamageTrigger(CreateTrigger() , 'A04B' , function HoJSlowAction)
    //-------------------------------------------------
endfunction

//===========================================================================
// Trigger: Chain Slow
//===========================================================================
function SpellId_CHAINSLOW takes nothing returns integer
    return 'A04C'
endfunction

function ChainSlowCastAction takes nothing returns nothing
    local unit dummy= DummyDmg_CreateDummy(udg_Spell__Caster , ('A04C') , 3.) // INLINED!!
    local integer dummyKey= (- GetHandleId((dummy))) // INLINED!!

    call UnitAddAbility(dummy, 'A04E')
    call UnitAddAbility(dummy, 'A04F')
    call IssueTargetOrder(dummy, "chainlightning", udg_Spell__Target)
        
    set dummy=null
endfunction


//CreateUnit(udg_Spell__CasterOwner, 'h07Q', GetUnitX(udg_Spell__Caster), GetUnitY(udg_Spell__Caster), 270)//GetRecycledDummy(GetLocationX(udg_Spell__TargetPoint), GetLocationY(udg_Spell__TargetPoint), 0, 270)

//===========================================================================
function ChainSlowDamageAction takes nothing returns boolean
    call IssueTargetOrder(udg_DamageEventSource, "slow", udg_DamageEventTarget)
    return false
endfunction

function InitTrig_Chain_Slow takes nothing returns nothing
    set gg_trg_Chain_Slow=CreateTrigger()
    call TriggerAddAction(gg_trg_Chain_Slow, function ChainSlowCastAction)

    //Hero - Chain Slow: Cast Slow on damaged units
    call InitializeOnDamageTrigger(CreateTrigger() , ('A04C') , function ChainSlowDamageAction) // INLINED!!
    //-------------------------------------------------
endfunction

//===========================================================================
// Trigger: Stormstrike
//===========================================================================
function StormStrikeGroupAction takes nothing returns nothing
    local unit u= GetEnumUnit()

    call DestroyEffect(AddSpecialEffectTarget("Abilities\\Spells\\Orc\\LightningShield\\LightningShieldBuff.mdl", u, "origin"))
    
    set udg_TimerBonuses[CSS_ARMOR]=- 5
    set udg_TimerBonuses[CSS_ATKSPEED]=- 75
    call AddTimedBonus(u , 0 , 1 , 3)

    call UnitDamageTarget(udg_Spell__Caster, u, 300, true, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, WEAPON_TYPE_WHOKNOWS)
    
    set u=null
endfunction

function StormStrikeCastAction takes nothing returns nothing
    set udg_Spell__InRangePoint=udg_Spell__TargetPoint
    set udg_Spell__InRange=100.00
    
    call ForGroup(udg_Spell__InRangeGroup, function StormStrikeGroupAction)
    
    call DestroyEffect(AddSpecialEffectLoc("Abilities\\Weapons\\ChimaeraLightningMissile\\ChimaeraLightningMissile.mdl", udg_Spell__TargetPoint))
endfunction
//===========================================================================
function InitTrig_Stormstrike takes nothing returns nothing

    set gg_trg_Stormstrike=CreateTrigger()
    call TriggerAddAction(gg_trg_Stormstrike, function StormStrikeCastAction)

endfunction

//===========================================================================
// Trigger: Replenish
//===========================================================================
function Trig_Replenish_Func006Func002C takes nothing returns boolean
    if ( not ( GetUnitStateSwap(UNIT_STATE_LIFE, GetEnumUnit()) <= ( GetUnitStateSwap(UNIT_STATE_MAX_LIFE, GetEnumUnit()) - 22.50 ) ) ) then
        return false
    endif
    if ( not ( LoadIntegerBJ(0, udg_Spell__Index, udg_Spell__Hash) < 5 ) ) then
        return false
    endif
    if ( not ( GetUnitStateSwap(UNIT_STATE_MANA, udg_Spell__Caster) >= 2.50 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Replenish_Func006Func003C takes nothing returns boolean
    if ( not ( GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit()) <= ( GetUnitStateSwap(UNIT_STATE_MAX_MANA, GetEnumUnit()) - 10.00 ) ) ) then
        return false
    endif
    if ( not ( LoadIntegerBJ(1, udg_Spell__Index, udg_Spell__Hash) < 5 ) ) then
        return false
    endif
    if ( not ( GetUnitStateSwap(UNIT_STATE_MANA, udg_Spell__Caster) >= 2.50 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Replenish_Func006A takes nothing returns nothing
    set udg_GDS_Target=GetEnumUnit()
    if ( Trig_Replenish_Func006Func002C() ) then
        call SaveIntegerBJ(( LoadIntegerBJ(0, udg_Spell__Index, udg_Spell__Hash) + 1 ), 0, udg_Spell__Index, udg_Spell__Hash)
        call AddSpecialEffectTargetUnitBJ("overhead", GetEnumUnit(), "Abilities\\Spells\\Items\\ResourceItems\\ResourceEffectTarget.mdl")
        call DestroyEffectBJ(GetLastCreatedEffectBJ())
        call SetUnitLifeBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetEnumUnit()) + 45.00 ))
        call SetUnitManaBJ(udg_Spell__Caster, ( GetUnitStateSwap(UNIT_STATE_MANA, udg_Spell__Caster) - 2.50 ))
    else
    endif
    if ( Trig_Replenish_Func006Func003C() ) then
        call SaveIntegerBJ(( LoadIntegerBJ(1, udg_Spell__Index, udg_Spell__Hash) + 1 ), 1, udg_Spell__Index, udg_Spell__Hash)
        call AddSpecialEffectTargetUnitBJ("chest", GetEnumUnit(), "Abilities\\Spells\\Undead\\ReplenishMana\\SpiritTouchTarget.mdl")
        call DestroyEffectBJ(GetLastCreatedEffectBJ())
        call SetUnitManaBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit()) + 10.00 ))
        call SetUnitManaBJ(udg_Spell__Caster, ( GetUnitStateSwap(UNIT_STATE_MANA, udg_Spell__Caster) - 2.50 ))
    else
    endif
endfunction

function Trig_Replenish_Actions takes nothing returns nothing
    set udg_Spell__InRangePoint=udg_Spell__CastPoint
    set udg_Spell__InRange=700.00
    call SaveIntegerBJ(0, 0, udg_Spell__Index, udg_Spell__Hash)
    call SaveIntegerBJ(0, 1, udg_Spell__Index, udg_Spell__Hash)
    call SetUnitManaBJ(udg_Spell__Caster, ( GetUnitStateSwap(UNIT_STATE_MANA, udg_Spell__Caster) - 4.00 ))
    call ForGroupBJ(udg_Spell__InRangeGroup, function Trig_Replenish_Func006A)
endfunction

//===========================================================================
function InitTrig_Replenish takes nothing returns nothing
    set gg_trg_Replenish=CreateTrigger()
    call TriggerAddAction(gg_trg_Replenish, function Trig_Replenish_Actions)
endfunction

//===========================================================================
// Trigger: Disarming Blow
//===========================================================================
function Trig_Disarming_Blow_Actions takes nothing returns nothing
    set udg_GDS_Type=udg_GDS_cDISARM_M
    set udg_GDS_Duration=5.00
    set udg_GDS_Target=udg_Spell__Target
    call UnitDamageTargetBJ(udg_Spell__Caster, udg_Spell__Target, 150.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
    call TriggerExecute(gg_trg_GDS_Main_Modifier)
endfunction

//===========================================================================
function InitTrig_Disarming_Blow takes nothing returns nothing
    set gg_trg_Disarming_Blow=CreateTrigger()
    call TriggerAddAction(gg_trg_Disarming_Blow, function Trig_Disarming_Blow_Actions)
endfunction

//===========================================================================
// Trigger: Scatter Shot
//===========================================================================
function Trig_Scatter_Shot_Actions takes nothing returns nothing
    set udg_TimerBonuses[0]=- 7
    call UnitDamageTargetBJ(udg_Spell__Caster, udg_Spell__Target, 400.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
    call PlaySoundOnUnitBJ(gg_snd_RiflemanAttack1, 100, udg_Spell__Caster)
    call AddTimedBonus(udg_Spell__Target , 0 , 0.5 , 5)
    return
    call KillSoundWhenDoneBJ(GetLastPlayedSound())
endfunction

//===========================================================================
function InitTrig_Scatter_Shot takes nothing returns nothing
    set gg_trg_Scatter_Shot=CreateTrigger()
    call TriggerAddAction(gg_trg_Scatter_Shot, function Trig_Scatter_Shot_Actions)
endfunction

//===========================================================================
// Trigger: Imperius Light of Valor
//===========================================================================
function Trig_Imperius_Light_of_Valor_Func008A takes nothing returns nothing
    set udg_TimerBonuses[0]=5
    set udg_TimerBonuses[2]=50
    call SetUnitLifeBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetEnumUnit()) + 400.00 ))
    call AddTimedBonus(GetEnumUnit() , 0 , 1 , 5)
endfunction

function Trig_Imperius_Light_of_Valor_Actions takes nothing returns nothing
    local integer l__udg_temp_integer
    local integer circId
    set circId=CreateGCOS(0 , GetLocationX(udg_Spell__TargetPoint) , GetLocationY(udg_Spell__TargetPoint) , 100 , 100 , 8 , 0 , 0)
    set l__udg_temp_integer=1
    loop
        exitwhen l__udg_temp_integer > 8
        set bj_lastCreatedEffect=AddSpecialEffect("Abilities\\Spells\\Human\\HolyBolt\\HolyBoltSpecialArt.mdl", (LoadReal(udg_GCOS_Hashtable, - (circId ), ( l__udg_temp_integer))), (LoadReal(udg_GCOS_Hashtable, - (circId ), - ( l__udg_temp_integer)))) // INLINED!!
        call DestroyEffectBJ(GetLastCreatedEffectBJ())
        set l__udg_temp_integer=l__udg_temp_integer + 1
    endloop
    call DestroyGCOS(circId)
    set udg_Spell__InRangePoint=udg_Spell__TargetPoint
    set udg_Spell__InRange=200.00
    call ForGroupBJ(udg_Spell__InRangeGroup, function Trig_Imperius_Light_of_Valor_Func008A)
endfunction

//===========================================================================
function InitTrig_Imperius_Light_of_Valor takes nothing returns nothing
    set gg_trg_Imperius_Light_of_Valor=CreateTrigger()
    call TriggerAddAction(gg_trg_Imperius_Light_of_Valor, function Trig_Imperius_Light_of_Valor_Actions)
endfunction

//===========================================================================
// Trigger: War Stomp
//===========================================================================
function Trig_War_Stomp_Func003Func001Func001C takes nothing returns boolean
    if ( ( IsUnitType(GetEnumUnit(), UNIT_TYPE_HERO) == true ) ) then
        return true
    endif
    if ( ( IsUnitType(GetEnumUnit(), UNIT_TYPE_RESISTANT) == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_War_Stomp_Func003Func001C takes nothing returns boolean
    if ( not Trig_War_Stomp_Func003Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_War_Stomp_Func003A takes nothing returns nothing
    if ( Trig_War_Stomp_Func003Func001C() ) then
        set udg_GDS_Duration=4.50
    else
        set udg_GDS_Duration=6.00
    endif
    set udg_GDS_Type=udg_GDS_cSTUN
    set udg_GDS_Target=GetEnumUnit()
    call TriggerExecute(gg_trg_GDS_Main_Modifier)
    call UnitDamageTargetBJ(udg_Spell__Caster, GetEnumUnit(), 100.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
endfunction

function Trig_War_Stomp_Actions takes nothing returns nothing
    set udg_Spell__InRangePoint=udg_Spell__CastPoint
    set udg_Spell__InRange=350.00
    call ForGroupBJ(udg_Spell__InRangeGroup, function Trig_War_Stomp_Func003A)
endfunction

//===========================================================================
function InitTrig_War_Stomp takes nothing returns nothing
    set gg_trg_War_Stomp=CreateTrigger()
    call TriggerAddAction(gg_trg_War_Stomp, function Trig_War_Stomp_Actions)
endfunction

//===========================================================================
// Trigger: Carrion Burst
//===========================================================================
function CarrionBurstCastAction takes nothing returns nothing
    local integer circleId= CreateGCOS(0 , GetLocationX(udg_Spell__TargetPoint) , GetLocationY(udg_Spell__TargetPoint) , 200 , 200 , 4 , Atan2(GetLocationY(udg_Spell__TargetPoint) - GetUnitY(udg_Spell__Caster), GetLocationX(udg_Spell__TargetPoint) - GetUnitX(udg_Spell__Caster)) , bj_PI / 4)
    local unit dummy= CreateUnit(udg_Spell__CasterOwner, 'h07Q', GetLocationX(udg_Spell__TargetPoint), GetLocationY(udg_Spell__TargetPoint), 270)
    local integer i= 0

    call UnitAddAbility(dummy, 'A001')
    call UnitApplyTimedLife(dummy, 'BTLF', 2)
    call SaveUnitHandle((ArrayAgent_hashTable), ((- GetHandleId((dummy))) ), 0, ( udg_Spell__Caster)) // INLINED!!
    
    loop
    exitwhen i > 4
        call IssuePointOrder(dummy, "carrionswarm", (LoadReal(udg_GCOS_Hashtable, - (circleId ), ( i))), (LoadReal(udg_GCOS_Hashtable, - (circleId ), - ( i)))) // INLINED!!
        set i=i + 1
    endloop
    
    call DestroyGCOS(circleId)
    set dummy=null
endfunction
//===========================================================================
function InitTrig_Carrion_Burst takes nothing returns nothing

    set gg_trg_Carrion_Burst=CreateTrigger()
    call TriggerAddAction(gg_trg_Carrion_Burst, function CarrionBurstCastAction)

endfunction
//===========================================================================
// Trigger: Burst of Despair
//===========================================================================
function Trig_Burst_of_Despair_Func008A takes nothing returns nothing
    set udg_TimerBonuses[0]=- 3
    set udg_TimerBonuses[2]=- 25
    call UnitDamageTargetBJ(udg_Spell__Caster, GetEnumUnit(), 300.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
    call AddTimedBonus(GetEnumUnit() , 0 , 1 , 5)
endfunction

function Trig_Burst_of_Despair_Actions takes nothing returns nothing
    local integer l__udg_temp_integer
    local integer circId
    set circId=CreateGCOS(0 , GetLocationX(udg_Spell__TargetPoint) , GetLocationY(udg_Spell__TargetPoint) , 100 , 100 , 8 , 0 , 0)
    set l__udg_temp_integer=1
    loop
        exitwhen l__udg_temp_integer > 8
        set bj_lastCreatedEffect=AddSpecialEffect("Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl", (LoadReal(udg_GCOS_Hashtable, - (circId ), ( l__udg_temp_integer))), (LoadReal(udg_GCOS_Hashtable, - (circId ), - ( l__udg_temp_integer)))) // INLINED!!
        call DestroyEffectBJ(GetLastCreatedEffectBJ())
        set l__udg_temp_integer=l__udg_temp_integer + 1
    endloop
    call DestroyGCOS(circId)
    set udg_Spell__InRangePoint=udg_Spell__TargetPoint
    set udg_Spell__InRange=200.00
    call ForGroupBJ(udg_Spell__InRangeGroup, function Trig_Burst_of_Despair_Func008A)
endfunction

//===========================================================================
function InitTrig_Burst_of_Despair takes nothing returns nothing
    set gg_trg_Burst_of_Despair=CreateTrigger()
    call TriggerAddAction(gg_trg_Burst_of_Despair, function Trig_Burst_of_Despair_Actions)
endfunction

//===========================================================================
// Trigger: Greater Shockwave
//===========================================================================
function Trig_Greater_Shockwave_Actions takes nothing returns nothing
    local integer l__udg_temp_integer
    local integer circId
    local real startAngle= Atan2(GetLocationY(udg_Spell__TargetPoint) - GetUnitY(udg_Spell__Caster), GetLocationX(udg_Spell__TargetPoint) - GetUnitX(udg_Spell__Caster))
    local unit dummy= CreateUnitAtLoc(udg_Spell__CasterOwner, 'h07Q', udg_Spell__CastPoint, 270)
    
    set circId=CreateGCOS(0 , GetLocationX(udg_Spell__CastPoint) , GetLocationY(udg_Spell__CastPoint) , 200 , 200 , 16 , startAngle , 0)
    call UnitAddAbilityBJ('A02V', dummy)
    
    set l__udg_temp_integer=1
    loop
        exitwhen l__udg_temp_integer > 2
        call IssuePointOrder(dummy, "carrionswarm", (LoadReal(udg_GCOS_Hashtable, - (circId ), ( l__udg_temp_integer))), (LoadReal(udg_GCOS_Hashtable, - (circId ), - ( l__udg_temp_integer)))) // INLINED!!
        set l__udg_temp_integer=l__udg_temp_integer + 1
    endloop
    
    call IssuePointOrder(dummy, "carrionswarm", (LoadReal(udg_GCOS_Hashtable, - (circId ), ( 16))), (LoadReal(udg_GCOS_Hashtable, - (circId ), - ( 16)))) // INLINED!!
    call DestroyGCOS(circId)
    call SaveUnitHandle((ArrayAgent_hashTable), ((- GetHandleId((dummy))) ), 0, ( udg_Spell__Caster)) // INLINED!!
    call UnitApplyTimedLifeBJ(5.00, 'BTLF', dummy)
    
    set dummy=null
endfunction

//===========================================================================
function InitTrig_Greater_Shockwave takes nothing returns nothing
    set gg_trg_Greater_Shockwave=CreateTrigger()
    call TriggerAddAction(gg_trg_Greater_Shockwave, function Trig_Greater_Shockwave_Actions)
endfunction

//===========================================================================
// Trigger: Bladespin
//===========================================================================
function Trig_Bladespin_Func003Func003Func001C takes nothing returns boolean
    if ( ( IsUnitType(GetEnumUnit(), UNIT_TYPE_HERO) == true ) ) then
        return true
    endif
    if ( ( IsUnitType(GetEnumUnit(), UNIT_TYPE_RESISTANT) == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_Bladespin_Func003Func003C takes nothing returns boolean
    if ( not Trig_Bladespin_Func003Func003Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Bladespin_Func003A takes nothing returns nothing
    set udg_TimerBonuses[1]=- 50
    call UnitDamageTargetBJ(udg_Spell__Caster, GetEnumUnit(), 200.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_UNIVERSAL)
    if ( Trig_Bladespin_Func003Func003C() ) then
        call AddTimedBonus(GetEnumUnit() , 0 , 0.5 , 3)
    else
        call AddTimedBonus(GetEnumUnit() , 0 , 0.5 , 5)
    endif
endfunction

function Trig_Bladespin_Actions takes nothing returns nothing
    set udg_Spell__InRangePoint=udg_Spell__TargetPoint
    set udg_Spell__InRange=200.00
    call ForGroupBJ(udg_Spell__InRangeGroup, function Trig_Bladespin_Func003A)
endfunction

//===========================================================================
function InitTrig_Bladespin takes nothing returns nothing
    set gg_trg_Bladespin=CreateTrigger()
    call TriggerAddAction(gg_trg_Bladespin, function Trig_Bladespin_Actions)
endfunction

//===========================================================================
// Trigger: Charge Cast
//===========================================================================
function Trig_Charge_Cast_Actions takes nothing returns nothing
    set udg_Knockback2DAngle=AngleBetweenPoints(udg_Spell__CastPoint, udg_Spell__TargetPoint)
    set udg_Knockback2DDistance=DistanceBetweenPoints(udg_Spell__CastPoint, udg_Spell__TargetPoint)
    set udg_Knockback2DTime=( udg_Knockback2DDistance / 800.00 )
    set udg_Knockback2DUnit=udg_Spell__Caster
    set udg_Knockback2DPause=true
    set udg_Knockback2DSimple=true
    set udg_Knockback2DSource=udg_Spell__Caster
    set udg_Knockback2DFriction=0.00
    set udg_Knockback2DOnCollide=gg_trg_Charge_Collision
    set udg_Knockback2DOnEnd=gg_trg_Charge_End
    set udg_Knockback2DOverride=true
    set udg_Knockback2DUnbiasedCollision=true
    call AddSpecialEffectLocBJ(udg_Spell__TargetPoint, "Abilities\\Spells\\NightElf\\TrueshotAura\\TrueshotAura.mdl")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call ConditionalTriggerExecute(gg_trg_Knockback_2D)
    call IssuePointOrderLocBJ(udg_Spell__Caster, "attackground", udg_Spell__TargetPoint)
endfunction

//===========================================================================
function InitTrig_Charge_Cast takes nothing returns nothing
    set gg_trg_Charge_Cast=CreateTrigger()
    call TriggerAddAction(gg_trg_Charge_Cast, function Trig_Charge_Cast_Actions)
endfunction

//===========================================================================
// Trigger: Charge Collision
//===========================================================================
function Trig_Charge_Collision_Func001C takes nothing returns boolean
    if ( not ( IsPlayerAlly(GetOwningPlayer(udg_Knockback2DSource), GetOwningPlayer(udg_Knockback2DUnit)) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Charge_Collision_Actions takes nothing returns nothing
    if ( Trig_Charge_Collision_Func001C() ) then
        if not HaveSavedInteger(udg_Hashtable_2, - GetUnitUserData(udg_Knockback2DSource), - GetUnitUserData(udg_Knockback2DUnit)) then
        call UnitDamageTargetBJ(udg_Knockback2DSource, udg_Knockback2DUnit, 100.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
        call SaveInteger(udg_Hashtable_2, - GetUnitUserData(udg_Knockback2DSource), - GetUnitUserData(udg_Knockback2DUnit), 1)
        endif
    else
    endif
    set udg_Knockback2DDistance=100.00
endfunction

//===========================================================================
function InitTrig_Charge_Collision takes nothing returns nothing
    set gg_trg_Charge_Collision=CreateTrigger()
    call TriggerAddAction(gg_trg_Charge_Collision, function Trig_Charge_Collision_Actions)
endfunction

//===========================================================================
// Trigger: Charge End
//===========================================================================
function Trig_Charge_End_Func005C takes nothing returns boolean
    if ( not ( GetUnitCurrentOrder(udg_Knockback2DUnit) == String2OrderIdBJ("attackground") ) ) then
        return false
    endif
    return true
endfunction

function Trig_Charge_End_Func009Func001Func006Func001C takes nothing returns boolean
    if ( ( IsUnitType(GetEnumUnit(), UNIT_TYPE_HERO) == true ) ) then
        return true
    endif
    if ( ( IsUnitType(GetEnumUnit(), UNIT_TYPE_RESISTANT) == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_Charge_End_Func009Func001Func006C takes nothing returns boolean
    if ( not Trig_Charge_End_Func009Func001Func006Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Charge_End_Func009Func001C takes nothing returns boolean
    if ( not ( IsUnitType(GetEnumUnit(), UNIT_TYPE_STRUCTURE) == false ) ) then
        return false
    endif
    if ( not ( IsUnitType(GetEnumUnit(), UNIT_TYPE_FLYING) == false ) ) then
        return false
    endif
    if ( not ( GetUnitAbilityLevelSwapped('A0C6', GetEnumUnit()) == 0 ) ) then
        return false
    endif
    if ( not ( IsPlayerEnemy(GetOwningPlayer(GetEnumUnit()), GetOwningPlayer(udg_Knockback2DUnit)) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Charge_End_Func009A takes nothing returns nothing
    if ( Trig_Charge_End_Func009Func001C() ) then
        call UnitDamageTargetBJ(udg_Knockback2DUnit, GetEnumUnit(), 100.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
        if ( Trig_Charge_End_Func009Func001Func006C() ) then
            set udg_GDS_Duration=4.50
        else
            set udg_GDS_Duration=6.00
        endif
        set udg_GDS_Type=udg_GDS_cSTUN
        set udg_GDS_Target=GetEnumUnit()
        call TriggerExecute(gg_trg_GDS_Main_Modifier)
    else
    endif
endfunction

function Trig_Charge_End_Actions takes nothing returns nothing
    local group l__udg_temp_group= CreateGroup()
    local location l__udg_temp_point
    set l__udg_temp_point=GetUnitLoc(udg_Knockback2DUnit)
    call GroupEnumUnitsInRangeOfLoc(l__udg_temp_group, l__udg_temp_point, 200, null)
    if ( Trig_Charge_End_Func005C() ) then
        call IssueImmediateOrderBJ(udg_Knockback2DUnit, "stop")
    else
    endif
    call AddSpecialEffectLocBJ(l__udg_temp_point, "Abilities\\Spells\\Human\\Thunderclap\\ThunderClapCaster.mdl")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call FlushChildHashtable(udg_Hashtable_2, - GetUnitUserData(udg_Knockback2DUnit))
    call ForGroupBJ(l__udg_temp_group, function Trig_Charge_End_Func009A)
    call DestroyGroup(l__udg_temp_group)
    call RemoveLocation(l__udg_temp_point)
    set l__udg_temp_group=null
    set l__udg_temp_point=null
endfunction

//===========================================================================
function InitTrig_Charge_End takes nothing returns nothing
    set gg_trg_Charge_End=CreateTrigger()
    call TriggerAddAction(gg_trg_Charge_End, function Trig_Charge_End_Actions)
endfunction

//===========================================================================
// Trigger: Thunderstrike Cast
//===========================================================================
function Trig_Thunderstrike_Cast_Func007Func004Func001C takes nothing returns boolean
    if ( ( IsUnitType(GetEnumUnit(), UNIT_TYPE_HERO) == true ) ) then
        return true
    endif
    if ( ( IsUnitType(GetEnumUnit(), UNIT_TYPE_RESISTANT) == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_Thunderstrike_Cast_Func007Func004C takes nothing returns boolean
    if ( not Trig_Thunderstrike_Cast_Func007Func004Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Thunderstrike_Cast_Func007A takes nothing returns nothing
    local location l__udg_temp_point
    set l__udg_temp_point=GetUnitLoc(GetEnumUnit())
    call UnitDamageTargetBJ(udg_Spell__Caster, GetEnumUnit(), 200.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_UNIVERSAL)
    if ( Trig_Thunderstrike_Cast_Func007Func004C() ) then
        call AddTimedBonus(GetEnumUnit() , 0 , 0.5 , 3)
    else
        call AddTimedBonus(GetEnumUnit() , 0 , 0.5 , 5)
    endif
    set udg_Knockback2DAngle=AngleBetweenPoints(udg_Spell__CastPoint, l__udg_temp_point)
    set udg_Knockback2DDistance=750.00
    set udg_Knockback2DTime=1.00
    set udg_Knockback2DUnit=GetEnumUnit()
    set udg_Knockback2DPause=true
    set udg_Knockback2DBounces=false
    set udg_Knockback2DOnImpact=gg_trg_Thunderstrike_Impact
    set udg_Knockback2DSource=udg_Spell__Caster
    set udg_Knockback2DFriction=0.00
    call ConditionalTriggerExecute(gg_trg_Knockback_2D)
    call RemoveLocation(l__udg_temp_point)
    set l__udg_temp_point=null
endfunction

function Trig_Thunderstrike_Cast_Actions takes nothing returns nothing
    call AddSpecialEffectLocBJ(udg_Spell__CastPoint, "Abilities\\Spells\\Other\\Monsoon\\MonsoonBoltTarget.mdl")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call AddSpecialEffectLocBJ(udg_Spell__CastPoint, "Abilities\\Spells\\Human\\Thunderclap\\ThunderClapCaster.mdl")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    set udg_Spell__InRangePoint=udg_Spell__TargetPoint
    set udg_Spell__InRange=200.00
    call ForGroupBJ(udg_Spell__InRangeGroup, function Trig_Thunderstrike_Cast_Func007A)
endfunction

//===========================================================================
function InitTrig_Thunderstrike_Cast takes nothing returns nothing
    set gg_trg_Thunderstrike_Cast=CreateTrigger()
    call TriggerAddAction(gg_trg_Thunderstrike_Cast, function Trig_Thunderstrike_Cast_Actions)
endfunction

//===========================================================================
// Trigger: Thunderstrike Impact
//===========================================================================
function Trig_Thunderstrike_Impact_Actions takes nothing returns nothing
    call UnitDamageTargetBJ(udg_K2DSource[udg_UDex], udg_UDexUnits[udg_UDex], 100.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
    call AddTimedBonus(udg_UDexUnits[udg_UDex] , 0 , 0.5 , 5)
endfunction

//===========================================================================
function InitTrig_Thunderstrike_Impact takes nothing returns nothing
    set gg_trg_Thunderstrike_Impact=CreateTrigger()
    call TriggerAddAction(gg_trg_Thunderstrike_Impact, function Trig_Thunderstrike_Impact_Actions)
endfunction

//===========================================================================
// Trigger: Waterspout
//===========================================================================
function Trig_Waterspout_Func003Func002Func001C takes nothing returns boolean
    if ( ( IsUnitType(GetEnumUnit(), UNIT_TYPE_HERO) == true ) ) then
        return true
    endif
    if ( ( IsUnitType(GetEnumUnit(), UNIT_TYPE_RESISTANT) == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_Waterspout_Func003Func002C takes nothing returns boolean
    if ( not Trig_Waterspout_Func003Func002Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Waterspout_Func003A takes nothing returns nothing
    call UnitDamageTargetBJ(udg_Spell__Caster, GetEnumUnit(), 200.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
    if ( Trig_Waterspout_Func003Func002C() ) then
        set udg_GDS_Duration=2.00
    else
        set udg_GDS_Duration=3.00
    endif
    set udg_GDS_Type=udg_GDS_cSTUN
    set udg_GDS_Target=GetEnumUnit()
    call TriggerExecute(gg_trg_GDS_Main_Modifier)
endfunction

function Trig_Waterspout_Actions takes nothing returns nothing
    set udg_Spell__InRangePoint=udg_Spell__TargetPoint
    set udg_Spell__InRange=200.00
    call ForGroupBJ(udg_Spell__InRangeGroup, function Trig_Waterspout_Func003A)
endfunction

//===========================================================================
function InitTrig_Waterspout takes nothing returns nothing
    set gg_trg_Waterspout=CreateTrigger()
    call TriggerAddAction(gg_trg_Waterspout, function Trig_Waterspout_Actions)
endfunction

//===========================================================================
// Trigger: Battle Jump Cast
//===========================================================================
function Trig_Battle_Jump_Cast_Actions takes nothing returns nothing
    set udg_Knockback2DAngle=AngleBetweenPoints(udg_Spell__CastPoint, udg_Spell__TargetPoint)
    set udg_Knockback2DDistance=DistanceBetweenPoints(udg_Spell__CastPoint, udg_Spell__TargetPoint)
    set udg_Knockback2DTime=0.35
    set udg_Knockback2DUnit=udg_Spell__Caster
    set udg_Knockback2DPause=true
    set udg_Knockback2DSimple=true
    set udg_Knockback2DHeight=400.00
    set udg_Knockback2DSource=udg_Spell__Caster
    set udg_Knockback2DFriction=0.00
    set udg_Knockback2DOnEnd=gg_trg_Battle_Jump_End
    set udg_Knockback2DOverride=true
    set udg_Knockback2DCollision=0.00
    call AddSpecialEffectLocBJ(udg_Spell__TargetPoint, "Abilities\\Spells\\NightElf\\TrueshotAura\\TrueshotAura.mdl")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call ConditionalTriggerExecute(gg_trg_Knockback_2D)
    call SetUnitAnimation(udg_Knockback2DUnit, "attack slam")
endfunction

//===========================================================================
function InitTrig_Battle_Jump_Cast takes nothing returns nothing
    set gg_trg_Battle_Jump_Cast=CreateTrigger()
    call TriggerAddAction(gg_trg_Battle_Jump_Cast, function Trig_Battle_Jump_Cast_Actions)
endfunction

//===========================================================================
// Trigger: Battle Jump End
//===========================================================================
function Trig_Battle_Jump_End_Func005C takes nothing returns boolean
    if ( not ( GetUnitCurrentOrder(udg_Knockback2DUnit) == String2OrderIdBJ("attackground") ) ) then
        return false
    endif
    return true
endfunction

function Trig_Battle_Jump_End_Func008Func001Func006Func001C takes nothing returns boolean
    if ( ( IsUnitType(GetEnumUnit(), UNIT_TYPE_HERO) == true ) ) then
        return true
    endif
    if ( ( IsUnitType(GetEnumUnit(), UNIT_TYPE_RESISTANT) == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_Battle_Jump_End_Func008Func001Func006C takes nothing returns boolean
    if ( not Trig_Battle_Jump_End_Func008Func001Func006Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Battle_Jump_End_Func008Func001C takes nothing returns boolean
    if ( not ( IsUnitType(GetEnumUnit(), UNIT_TYPE_STRUCTURE) == false ) ) then
        return false
    endif
    if ( not ( IsUnitType(GetEnumUnit(), UNIT_TYPE_FLYING) == false ) ) then
        return false
    endif
    if ( not ( GetUnitAbilityLevelSwapped('A0C6', GetEnumUnit()) == 0 ) ) then
        return false
    endif
    if ( not ( IsPlayerEnemy(GetOwningPlayer(GetEnumUnit()), GetOwningPlayer(udg_Knockback2DUnit)) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Battle_Jump_End_Func008A takes nothing returns nothing
    if ( Trig_Battle_Jump_End_Func008Func001C() ) then
        call UnitDamageTargetBJ(udg_Knockback2DUnit, GetEnumUnit(), 250.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
        if ( Trig_Battle_Jump_End_Func008Func001Func006C() ) then
            set udg_GDS_Duration=4.50
        else
            set udg_GDS_Duration=6.00
        endif
        set udg_GDS_Type=udg_GDS_cSTUN
        set udg_GDS_Target=GetEnumUnit()
        call TriggerExecute(gg_trg_GDS_Main_Modifier)
    else
    endif
endfunction

function Trig_Battle_Jump_End_Actions takes nothing returns nothing
    local group l__udg_temp_group= CreateGroup()
    local location l__udg_temp_point
    set l__udg_temp_point=GetUnitLoc(udg_Knockback2DUnit)
    call GroupEnumUnitsInRangeOfLoc(l__udg_temp_group, l__udg_temp_point, 200, null)
    if ( Trig_Battle_Jump_End_Func005C() ) then
        call IssueImmediateOrderBJ(udg_Knockback2DUnit, "stop")
    else
    endif
    call AddSpecialEffectLocBJ(l__udg_temp_point, "Abilities\\Spells\\Human\\Thunderclap\\ThunderClapCaster.mdl")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call ForGroupBJ(l__udg_temp_group, function Trig_Battle_Jump_End_Func008A)
    call DestroyGroup(l__udg_temp_group)
    call RemoveLocation(l__udg_temp_point)
    set l__udg_temp_group=null
    set l__udg_temp_point=null
endfunction

//===========================================================================
function InitTrig_Battle_Jump_End takes nothing returns nothing
    set gg_trg_Battle_Jump_End=CreateTrigger()
    call TriggerAddAction(gg_trg_Battle_Jump_End, function Trig_Battle_Jump_End_Actions)
endfunction

//===========================================================================
// Trigger: Ethereal Jaunt
//===========================================================================
function Trig_Ethereal_Jaunt_Actions takes nothing returns nothing
    call AddTimedBonus(udg_Spell__Caster , 0 , 2 , 8)
    set udg_GDS_Duration=8.00
    set udg_GDS_Type=udg_GDS_cETHEREAL
    set udg_GDS_Target=udg_Spell__Caster
    call TriggerExecute(gg_trg_GDS_Main_Modifier)
endfunction

//===========================================================================
function InitTrig_Ethereal_Jaunt takes nothing returns nothing
    set gg_trg_Ethereal_Jaunt=CreateTrigger()
    call TriggerAddAction(gg_trg_Ethereal_Jaunt, function Trig_Ethereal_Jaunt_Actions)
endfunction

//===========================================================================
// Trigger: Power Surge
//===========================================================================
function Trig_Power_Surge_Actions takes nothing returns nothing
    call SetUnitManaBJ(udg_Spell__Caster, ( GetUnitStateSwap(UNIT_STATE_MANA, udg_Spell__Caster) + ( 0.67 * GetUnitStateSwap(UNIT_STATE_MAX_MANA, udg_Spell__Caster) ) ))
endfunction

//===========================================================================
function InitTrig_Power_Surge takes nothing returns nothing
    set gg_trg_Power_Surge=CreateTrigger()
    call TriggerAddAction(gg_trg_Power_Surge, function Trig_Power_Surge_Actions)
endfunction

//===========================================================================
// Trigger: FilterTransformations
//===========================================================================
// Trigger: Ability Cooldown
//===========================================================================
function Trig_Ability_Cooldown_Func007Func003C takes nothing returns boolean
    if ( not ( UnitHasBuffBJ(GetTriggerUnit(), 'B033') == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Ability_Cooldown_Func007C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A0C6', GetTriggerUnit()) == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Ability_Cooldown_Actions takes nothing returns nothing
    local integer l__udg_temp_integer
    local real l__udg_temp_real= 1.
    if (HaveSavedBoolean(ConstTable___ht, ((((s__FilterTransformations_Globals_data_impl)))), ((GetUnitCurrentOrder(GetTriggerUnit()))))) then // INLINED!!
    return
    endif
    if ( Trig_Ability_Cooldown_Func007C() ) then
        set l__udg_temp_integer=GetUnitAbilityLevelSwapped(GetSpellAbilityId(), GetTriggerUnit())
        if ( Trig_Ability_Cooldown_Func007Func003C() ) then
            set l__udg_temp_real=( l__udg_temp_real * 0.25 )
        else
        endif
        call BlzSetUnitAbilityCooldown(GetTriggerUnit(), GetSpellAbilityId(), l__udg_temp_integer, ( l__udg_temp_real * BlzGetAbilityCooldown(GetSpellAbilityId(), l__udg_temp_integer) ))
    else
    endif
endfunction

//===========================================================================
function InitTrig_Ability_Cooldown takes nothing returns nothing
    set gg_trg_Ability_Cooldown=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Ability_Cooldown, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddAction(gg_trg_Ability_Cooldown, function Trig_Ability_Cooldown_Actions)
endfunction

//===========================================================================
// Trigger: Summon
//
// This trigger is supposed to handle all summoning spells, regarding anything that is related to the actual unit summoned or the summoner.
//===========================================================================
function Trig_Summon_Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(udg_UDexUnits[udg_UDex]) == 'h0H7' ) ) then
        return false
    endif
    if ( not ( GetUnitAbilityLevelSwapped('A04O', udg_SummonerOfUnit[udg_UDex]) != 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Summon_Actions takes nothing returns nothing
    if ( Trig_Summon_Func002C() ) then
        call CSS_AddBonus(udg_UDexUnits[udg_UDex] , 4 , 0)
        call CSS_AddBonus(udg_UDexUnits[udg_UDex] , 25 , 1)
        call CSS_AddBonus(udg_UDexUnits[udg_UDex] , 20 , 2)
        call UnitRemoveAbilityBJ('A03O', udg_UDexUnits[udg_UDex])
    else
    endif
endfunction

//===========================================================================
function InitTrig_Summon takes nothing returns nothing
    set gg_trg_Summon=CreateTrigger()
    call TriggerRegisterVariableEvent(gg_trg_Summon, "udg_UnitIndexEvent", EQUAL, 0.50)
    call TriggerAddAction(gg_trg_Summon, function Trig_Summon_Actions)
endfunction

//===========================================================================
// Trigger: Sargeras Silence New
//===========================================================================
function Trig_Sargeras_Silence_New_Conditions takes nothing returns boolean
    if ( not ( UnitHasBuffBJ(GetTriggerUnit(), 'B01V') == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Sargeras_Silence_New_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
    set udg_GDS_Target=GetTriggerUnit()
    set udg_GDS_Duration=10.00
    set udg_GDS_Type=udg_GDS_cSILENCE
    call TriggerExecute(gg_trg_GDS_Main_Modifier)
endfunction

//===========================================================================
function InitTrig_Sargeras_Silence_New takes nothing returns nothing
    set gg_trg_Sargeras_Silence_New=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Sargeras_Silence_New, EVENT_PLAYER_UNIT_SPELL_CAST)
    call TriggerAddCondition(gg_trg_Sargeras_Silence_New, Condition(function Trig_Sargeras_Silence_New_Conditions))
    call TriggerAddAction(gg_trg_Sargeras_Silence_New, function Trig_Sargeras_Silence_New_Actions)
endfunction

//===========================================================================
// Trigger: Aura Of Restitution
//===========================================================================
function Trig_Aura_Of_Restitution_FilterAllies takes nothing returns boolean
    local unit filterUnit= GetFilterUnit()
    if not ( IsPlayerAlly(GetOwningPlayer(filterUnit), udg_temp_player) ) then
        return false
    endif
    if GetUnitState(filterUnit, UNIT_STATE_LIFE) >= GetUnitState(filterUnit, UNIT_STATE_MAX_LIFE) * 0.98 then
        return false
    endif
    set filterUnit=null
    return true
endfunction

function Trig_Aura_Of_Restitution_ForGroup_HealUnit takes nothing returns nothing
    call SetUnitState(GetEnumUnit(), UNIT_STATE_LIFE, ( udg_temp_real + GetUnitState(GetEnumUnit(), UNIT_STATE_LIFE) ))
endfunction

function Trig_Aura_Of_Restitution_ForGroup_HealNearbyAllies takes nothing returns nothing
    local group nearbyAlliesGroup= CreateGroup()
    local integer numberOfAllies
    local unit enumUnit= GetEnumUnit()
    local integer userData= GetUnitUserData(enumUnit)
    
    local real saveReal= udg_temp_real
    local player savePlayer= udg_temp_player
    
    //Remove unit from global group and clear damage dealt
    set udg_temp_real=udg_Abilities_AoRest_DmgDone[userData]
    call GroupRemoveUnit(udg_Abilities_AoRest_UnitGroup, enumUnit)
    set udg_Abilities_AoRest_DmgDone[userData]=0
    
    //Check if unit has actually dealt any damage
    if udg_temp_real != 0 then
        //Enumerate group and count units in it
        set udg_temp_player=GetOwningPlayer(enumUnit)
        call DestroyEffect(AddSpecialEffectTarget("Abilities\\Spells\\Human\\HolyBolt\\HolyBoltSpecialArt.mdl", enumUnit, "origin"))
        call GroupEnumUnitsInRange(nearbyAlliesGroup, GetUnitX(enumUnit), GetUnitY(enumUnit), 500, Filter(function Trig_Aura_Of_Restitution_FilterAllies))
        set numberOfAllies=CountUnitsInGroup(nearbyAlliesGroup)
        
        //Set value of the heal amount for each unit
        set udg_temp_real=RMinBJ(( udg_temp_real * 0.50 ), ( udg_temp_real / I2R(numberOfAllies) ))
        
        call ForGroup(nearbyAlliesGroup, function Trig_Aura_Of_Restitution_ForGroup_HealUnit)
        call DestroyGroup(nearbyAlliesGroup)
    endif
        
    //Restore global variable values
    set udg_temp_real=saveReal
    set udg_temp_player=savePlayer
    
    //Null locals
    set nearbyAlliesGroup=null
endfunction

function Trig_Aura_Of_Restitution_Actions takes nothing returns nothing
    call ForGroup(udg_Abilities_AoRest_UnitGroup, function Trig_Aura_Of_Restitution_ForGroup_HealNearbyAllies)
endfunction

//===========================================================================
function InitTrig_Aura_Of_Restitution takes nothing returns nothing
    set gg_trg_Aura_Of_Restitution=CreateTrigger()
    call TriggerRegisterTimerEvent(gg_trg_Aura_Of_Restitution, 1., true)
    call TriggerAddAction(gg_trg_Aura_Of_Restitution, function Trig_Aura_Of_Restitution_Actions)
endfunction

//===========================================================================
// Trigger: Cosmosis Stop Time
//===========================================================================
function Trig_Cosmosis_Stop_Time_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A015' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Cosmosis_Stop_Time_Func007A takes nothing returns nothing
    if (s__UnitVisuals_getAnimSpeed((GetHandleId(((GetEnumUnit())))))) == "D" then // INLINED!!
    call SetUnitTimeScalePercent(GetEnumUnit(), 0.00)
    endif
    call PauseUnitBJ(true, GetEnumUnit())
endfunction

function Trig_Cosmosis_Stop_Time_Func011001 takes nothing returns boolean
    return ( UnitHasBuffBJ(gg_unit_H00V_0359, 'B00C') == false )
endfunction

function Trig_Cosmosis_Stop_Time_Func012A takes nothing returns nothing
    if (s__UnitVisuals_getAnimSpeed((GetHandleId(((GetEnumUnit())))))) == "D" then // INLINED!!
    call SetUnitTimeScalePercent(GetEnumUnit(), 100.00)
    endif
    call PauseUnitBJ(false, GetEnumUnit())
endfunction

function Trig_Cosmosis_Stop_Time_Actions takes nothing returns nothing
    local group l__udg_temp_group
    set l__udg_temp_group=GetUnitsInRectAll(udg_WholeMapRegion)
    call GroupRemoveUnitSimple(gg_unit_H00V_0359, l__udg_temp_group)
    call GroupRemoveUnitSimple(gg_unit_H00S_0141, l__udg_temp_group)
    call ForGroupBJ(l__udg_temp_group, function Trig_Cosmosis_Stop_Time_Func007A)
    call EnableTrigger(gg_trg_Cosmosis_StTm_Noise)
    call TriggerSleepAction(1.00)
    loop
        exitwhen ( (UnitHasBuffBJ(gg_unit_H00V_0359, 'B00C') == false) ) // INLINED!!
        call TriggerSleepAction(RMaxBJ(bj_WAIT_FOR_COND_MIN_INTERVAL, 0.50))
    endloop
    call ForGroupBJ(l__udg_temp_group, function Trig_Cosmosis_Stop_Time_Func012A)
    call DisableTrigger(gg_trg_Cosmosis_StTm_Noise)
    call DestroyGroup(l__udg_temp_group)
    set l__udg_temp_group=null
endfunction

//===========================================================================
function InitTrig_Cosmosis_Stop_Time takes nothing returns nothing
    set gg_trg_Cosmosis_Stop_Time=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_Cosmosis_Stop_Time, gg_unit_H00V_0359, EVENT_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Cosmosis_Stop_Time, Condition(function Trig_Cosmosis_Stop_Time_Conditions))
    call TriggerAddAction(gg_trg_Cosmosis_Stop_Time, function Trig_Cosmosis_Stop_Time_Actions)
endfunction

//===========================================================================
// Trigger: Cosmosis StTm Noise
//===========================================================================
function Trig_Cosmosis_StTm_Noise_Actions takes nothing returns nothing
    call PlaySoundBJ(gg_snd_StopTimeTicTac)
endfunction

//===========================================================================
function InitTrig_Cosmosis_StTm_Noise takes nothing returns nothing
    set gg_trg_Cosmosis_StTm_Noise=CreateTrigger()
    call DisableTrigger(gg_trg_Cosmosis_StTm_Noise)
    call TriggerRegisterTimerEventPeriodic(gg_trg_Cosmosis_StTm_Noise, 1.00)
    call TriggerAddAction(gg_trg_Cosmosis_StTm_Noise, function Trig_Cosmosis_StTm_Noise_Actions)
endfunction

//===========================================================================
// Trigger: Cosmosis Give Item
//===========================================================================
function Trig_Cosmosis_Give_Item_Func002Func003Func003C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A01A' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Cosmosis_Give_Item_Func002Func003C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04I' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Cosmosis_Give_Item_Func002C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04Q' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Cosmosis_Give_Item_Actions takes nothing returns nothing
    if ( Trig_Cosmosis_Give_Item_Func002C() ) then
        call UnitAddItemByIdSwapped('I008', GetSpellTargetUnit())
    else
        if ( Trig_Cosmosis_Give_Item_Func002Func003C() ) then
            call UnitAddItemByIdSwapped('I009', GetSpellTargetUnit())
        else
            if ( Trig_Cosmosis_Give_Item_Func002Func003Func003C() ) then
                call UnitAddItemByIdSwapped('I001', GetSpellTargetUnit())
            else
            endif
        endif
    endif
endfunction

//===========================================================================
function InitTrig_Cosmosis_Give_Item takes nothing returns nothing
    set gg_trg_Cosmosis_Give_Item=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_Cosmosis_Give_Item, gg_unit_H00V_0359, EVENT_UNIT_SPELL_EFFECT)
    call TriggerAddAction(gg_trg_Cosmosis_Give_Item, function Trig_Cosmosis_Give_Item_Actions)
endfunction

//===========================================================================
// Trigger: TheCreator Invincibility
//===========================================================================
function Trig_TheCreator_Invincibility_Conditions takes nothing returns boolean
    if ( not ( GetDyingUnit() == gg_unit_H00S_0141 ) ) then
        return false
    endif
    return true
endfunction

function Trig_TheCreator_Invincibility_Actions takes nothing returns nothing
    local location temp_point
    call TriggerSleepAction(1.00)
    set udg_temp_point=GetUnitLoc(gg_unit_H00S_0141)
    call ReviveHeroLoc(GetDyingUnit(), udg_temp_point, false)
    call RemoveLocation(udg_temp_point)
    set udg_temp_point=null
endfunction

//===========================================================================
function InitTrig_TheCreator_Invincibility takes nothing returns nothing
    set gg_trg_TheCreator_Invincibility=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_TheCreator_Invincibility, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_TheCreator_Invincibility, Condition(function Trig_TheCreator_Invincibility_Conditions))
    call TriggerAddAction(gg_trg_TheCreator_Invincibility, function Trig_TheCreator_Invincibility_Actions)
endfunction

//===========================================================================
// Trigger: Silver Key Trigger
//===========================================================================
function Trig_Silver_Key_Trigger_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04M' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Silver_Key_Trigger_Actions takes nothing returns nothing
    local location l__udg_temp_point
    set l__udg_temp_point=GetRectCenter(gg_rct_WarpIn)
    call SetUnitPositionLoc(GetSpellAbilityUnit(), l__udg_temp_point)
    call RemoveLocation(l__udg_temp_point)
    set l__udg_temp_point=null
endfunction

//===========================================================================
function InitTrig_Silver_Key_Trigger takes nothing returns nothing
    set gg_trg_Silver_Key_Trigger=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Silver_Key_Trigger, EVENT_PLAYER_UNIT_SPELL_FINISH)
    call TriggerAddCondition(gg_trg_Silver_Key_Trigger, Condition(function Trig_Silver_Key_Trigger_Conditions))
    call TriggerAddAction(gg_trg_Silver_Key_Trigger, function Trig_Silver_Key_Trigger_Actions)
endfunction

//===========================================================================
// Trigger: Pure Water Effect
//===========================================================================
function Trig_Pure_Water_Effect_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04W' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Pure_Water_Effect_Actions takes nothing returns nothing
    local location l__udg_temp_point
    set l__udg_temp_point=GetSpellTargetLoc()
    call AddSpecialEffectLocBJ(l__udg_temp_point, "Objects\\Spawnmodels\\Naga\\NagaDeath\\NagaDeath.mdl")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call RemoveLocation(l__udg_temp_point)
    set l__udg_temp_point=null
endfunction

//===========================================================================
function InitTrig_Pure_Water_Effect takes nothing returns nothing
    set gg_trg_Pure_Water_Effect=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Pure_Water_Effect, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Pure_Water_Effect, Condition(function Trig_Pure_Water_Effect_Conditions))
    call TriggerAddAction(gg_trg_Pure_Water_Effect, function Trig_Pure_Water_Effect_Actions)
endfunction

//===========================================================================
// Trigger: ScrollSystem Learn Spell
//===========================================================================
function Trig_ScrollSystem_Learn_Spell_Actions takes nothing returns nothing
    local boolean isScroll
    local integer eventAbility= GetSpellAbilityId()
    local integer l__udg_temp_integer
    local integer abilNumber
    set l__udg_temp_integer=0
    loop
        exitwhen l__udg_temp_integer > 6
        if eventAbility == udg_ScrollSystem_learnAbilities[l__udg_temp_integer] then
        set isScroll=true
        set abilNumber=l__udg_temp_integer
        endif
        set l__udg_temp_integer=l__udg_temp_integer + 1
    endloop
    if isScroll then
    set l__udg_temp_integer=0
    loop
        exitwhen l__udg_temp_integer > 6
        if abilNumber == l__udg_temp_integer then
        call UnitAddAbilityBJ(udg_ScrollSystem_realAbilities[l__udg_temp_integer], GetTriggerUnit())
        else
        call UnitRemoveAbilityBJ(udg_ScrollSystem_realAbilities[l__udg_temp_integer], GetTriggerUnit())
        endif
        set l__udg_temp_integer=l__udg_temp_integer + 1
    endloop
    endif
endfunction

//===========================================================================
function InitTrig_ScrollSystem_Learn_Spell takes nothing returns nothing
    set gg_trg_ScrollSystem_Learn_Spell=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ScrollSystem_Learn_Spell, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddAction(gg_trg_ScrollSystem_Learn_Spell, function Trig_ScrollSystem_Learn_Spell_Actions)
endfunction

//===========================================================================
// Trigger: SaveLoop
//===========================================================================

//===========================================================================
function InitCustomTriggers takes nothing returns nothing
    //Function not found: call InitTrig_Init()
    //Function not found: call InitTrig_Init_Deco_Builders()
    //Function not found: call InitTrig_Init_Quests()
    call InitTrig_Init_Main()
    call InitTrig_Init_0_seconds()
    call InitTrig_Init_Create_Events()
    call InitTrig_System_Set_Unit_Color()
    call InitTrig_System_Level_Up_Heroes()
    call InitTrig_System_Autoname()
    call InitTrig_System_TPalace_Doors()
    call InitTrig_System_Detect_Leaver()
    call InitTrig_System_Player_Locations()
    call InitTrig_System_Give_Potion_to_Hero()
    call InitTrig_System_Cleanup_Death()
    call InitTrig_System_Cleanup_Removal()
    call InitTrig_System_Cleanup_Owner_Change()
    call InitTrig_System_Cleanup_UnitGroups()
    //Function not found: call InitTrig_System_Cleanup_Items()
    call InitTrig_System_Limit_Register()
    call InitTrig_System_Limit_Type_Change()
    call InitTrig_System_Titan_Palace_Item_Prot()
    call InitTrig_System_Titan_Palace_Prot()
    call InitTrig_System_Titan_GiveUnit()
    //Function not found: call InitTrig_System_Titan_Powers()
    call InitTrig_System_PreventSave_Catch()
    call InitTrig_System_PreventSave_Clear()
    call InitTrig_Commands_Set_Color()
    call InitTrig_Commands_Toggle_Autoname()
    call InitTrig_Commands_Name_Unit()
    call InitTrig_Commands_Give()
    call InitTrig_Commands_Deleteme()
    call InitTrig_Commands_Deco_Spawn()
    call InitTrig_Commands_Hide_Decos()
    call InitTrig_Commands_Select_Search()
    call InitTrig_Commands_Neutral()
    call InitTrig_Commands_Take()
    call InitTrig_Commands_Copy()
    call InitTrig_Commands_Remove_Kill()
    call InitTrig_Commands_StartRectCamera()
    call InitTrig_Commands_Set_Alliance()
    call InitTrig_Commands_Set_Name()
    call InitTrig_Commands_Real_Name()
    call InitTrig_CommandsR_Toggle_Prot()
    call InitTrig_CommandsR_Make_Titan()
    call InitTrig_CommandsR_Set_Limits_for_Units()
    call InitTrig_CommandsR_Delete()
    call InitTrig_CommandsR_Fog()
    call InitTrig_CommandsR_Water_Color()
    call InitTrig_CommandsR_Mind()
    call InitTrig_CommandsR_Kick()
    call InitTrig_CommandsR_The_Creator()
    call InitTrig_CommandsR_Toggle_Dmg_Tags()
    call InitTrig_CommandsD_Control()
    call InitTrig_CommandsD_Set_AoE()
    call InitTrig_CommandsD_Set_Tree_Space()
    call InitTrig_CommandsD_Set_Parameters()
    call InitTrig_CommandsD_Set_RGB()
    call InitTrig_CommandsD_Unit_Mods()
    call InitTrig_CommandsD_Add_Tag()
    call InitTrig_CommandsD_Locust()
    call InitTrig_CommandsD_Variation()
    call InitTrig_DecoBuilder_Movement()
    call InitTrig_DecoBuilder_Increase_Count()
    call InitTrig_DecoBuilder_RangedBuild()
    call InitTrig_DecoBuilder_Cast_Ability()
    call InitTrig_Deco_DisableMovement()
    call InitTrig_Deco_Instant_Upgrade()
    call InitTrig_Deco_Root_Anywhere()
    call InitTrig_Deco_Movement()
    call InitTrig_Deco_Waygate()
    call InitTrig_Deco_Gates()
    call InitTrig_TerrainSystem_Cast_Ability()
    call InitTrig_TreeSystem_Create_Trees()
    call InitTrig_TreeSystem_Cast_Ability()
    call InitTrig_TreeSystem_Choose_Tree()
    //Function not found: call InitTrig_Lists()
    //Function not found: call InitTrig_GLHS_Main()
    //Function not found: call InitTrig_GMUI_Main()
    //Function not found: call InitTrig_Table()
    //Function not found: call InitTrig_ConstTable()
    //Function not found: call InitTrig_HashtableWrapper()
    //Function not found: call InitTrig_TableStruct()
    //Function not found: call InitTrig_MultiPatrol()
    //Function not found: call InitTrig_MultiPatrol_Addons()
    //Function not found: call InitTrig_UserDefinedRects()
    //Function not found: call InitTrig_RectGenerator()
    //Function not found: call InitTrig_RectEnvironment()
    //Function not found: call InitTrig_AutoRectEnvironment()
    //Function not found: call InitTrig_TileDefinition()
    //Function not found: call InitTrig_StructureTileDefinition()
    //Function not found: call InitTrig_WorldBounds()
    //Function not found: call InitTrig_DestructableLib()
    //Function not found: call InitTrig_GroupTools()
    //Function not found: call InitTrig_DummyRecycler()
    //Function not found: call InitTrig_Id2String()
    //Function not found: call InitTrig_CutToComma()
    //Function not found: call InitTrig_UnitVisualMods()
    call InitTrig_Camera_System()
    //Function not found: call InitTrig_MoveSpeedBonus()
    //Function not found: call InitTrig_Move_Speed_Modification()
    //Function not found: call InitTrig_MultiBoard()
    //Function not found: call InitTrig_GameTime()
    //Function not found: call InitTrig_Debug()
    //Function not found: call InitTrig_ArrayAgent()
    //Function not found: call InitTrig_DummyDmg()
    //Function not found: call InitTrig_PlayerUnitLimit()
    //Function not found: call InitTrig_TimedBonus()
    //Function not found: call InitTrig_LoPHeader()
    //Function not found: call InitTrig_CustomStatSystem()
    call InitTrig_CSS_Standalone_Bonus()
    call InitTrig_Color_Code_Setting()
    call InitTrig_Unit_Event_Config()
    call InitTrig_Unit_Event()
    call InitTrig_Damage_Engine_Config()
    call InitTrig_Damage_Engine()
    call InitTrig_Life_Drain_Fix()
    call InitTrig_Damage_Tag()
    //Function not found: call InitTrig_Bash()
    //Function not found: call InitTrig_Combat_Tag()
    call InitTrig_Spell_System_Config()
    call InitTrig_Spell_System()
    call InitTrig_Knockback_2D_Config()
    call InitTrig_Knockback_2D_Destroy()
    call InitTrig_Knockback_2D()
    call InitTrig_Knockback_2D_System()
    call InitTrig_SaveLoad_Setup()
    call InitTrig_SaveLoad_Commands()
    call InitTrig_SaveLoad_Set_Center_Numbers()
    call InitTrig_SaveCall()
    call InitTrig_SaveLoop_Dest()
    call InitTrig_SaveLoop_Terrain()
    call InitTrig_LoadRequest()
    call InitTrig_LoadUnit()
    call InitTrig_LoadUnit_Extra()
    call InitTrig_LoadDest()
    call InitTrig_LoadTerrain()
    //Function not found: call InitTrig_SaveNLoad()
    call InitTrig_GCOS_Init_Copy()
    //Function not found: call InitTrig_Circle_Object_System()
    call InitTrig_GDS_Setup()
    call InitTrig_GDS_Main_Modifier()
    call InitTrig_GDS_Main()
    call InitTrig_Spell_System_Filter_Decorations()
    call InitTrig_Initialize_Spells()
    call InitTrig_Spatial_Distortion_Cast()
    call InitTrig_AoE_Snare()
    call InitTrig_Mass_Banish()
    call InitTrig_Make_Unit_Selectable()
    call InitTrig_Angel_Judgement()
    call InitTrig_Tyrael_Judgement()
    call InitTrig_Tyrael_WotT_Cast()
    call InitTrig_Chain_Slow()
    call InitTrig_Stormstrike()
    call InitTrig_Replenish()
    call InitTrig_Disarming_Blow()
    call InitTrig_Scatter_Shot()
    call InitTrig_Imperius_Light_of_Valor()
    call InitTrig_War_Stomp()
    call InitTrig_Carrion_Burst()
    call InitTrig_Burst_of_Despair()
    call InitTrig_Greater_Shockwave()
    call InitTrig_Bladespin()
    call InitTrig_Charge_Cast()
    call InitTrig_Charge_Collision()
    call InitTrig_Charge_End()
    call InitTrig_Thunderstrike_Cast()
    call InitTrig_Thunderstrike_Impact()
    call InitTrig_Waterspout()
    call InitTrig_Battle_Jump_Cast()
    call InitTrig_Battle_Jump_End()
    call InitTrig_Ethereal_Jaunt()
    call InitTrig_Power_Surge()
    //Function not found: call InitTrig_FilterTransformations()
    call InitTrig_Ability_Cooldown()
    call InitTrig_Summon()
    call InitTrig_Sargeras_Silence_New()
    call InitTrig_Aura_Of_Restitution()
    call InitTrig_Cosmosis_Stop_Time()
    call InitTrig_Cosmosis_StTm_Noise()
    call InitTrig_Cosmosis_Give_Item()
    call InitTrig_TheCreator_Invincibility()
    call InitTrig_Silver_Key_Trigger()
    call InitTrig_Pure_Water_Effect()
    call InitTrig_ScrollSystem_Learn_Spell()
    call InitTrig_SaveLoop()
endfunction

//===========================================================================
function RunInitializationTriggers takes nothing returns nothing
    call ConditionalTriggerExecute(gg_trg_Init_Main)
    call ConditionalTriggerExecute(gg_trg_Color_Code_Setting)
    call ConditionalTriggerExecute(gg_trg_Unit_Event_Config)
    call ConditionalTriggerExecute(gg_trg_GCOS_Init_Copy)
    call ConditionalTriggerExecute(gg_trg_GDS_Setup)
endfunction

//***************************************************************************
//*
//*  Upgrades
//*
//***************************************************************************

function InitUpgrades_Player0 takes nothing returns nothing
    call SetPlayerTechResearched(Player(0), 'Rhme', 3)
    call SetPlayerTechResearched(Player(0), 'Rhra', 3)
    call SetPlayerTechResearched(Player(0), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(0), 'Rhar', 3)
    call SetPlayerTechResearched(Player(0), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(0), 'Rhac', 3)
    call SetPlayerTechResearched(Player(0), 'Rhde', 1)
    call SetPlayerTechResearched(Player(0), 'Rhan', 1)
    call SetPlayerTechResearched(Player(0), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(0), 'Rhst', 2)
    call SetPlayerTechResearched(Player(0), 'Rhla', 3)
    call SetPlayerTechResearched(Player(0), 'Rhri', 1)
    call SetPlayerTechResearched(Player(0), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(0), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(0), 'Rhss', 1)
    call SetPlayerTechResearched(Player(0), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(0), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(0), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(0), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(0), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(0), 'Rome', 3)
    call SetPlayerTechResearched(Player(0), 'Rora', 3)
    call SetPlayerTechResearched(Player(0), 'Roar', 3)
    call SetPlayerTechResearched(Player(0), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(0), 'Ropg', 1)
    call SetPlayerTechResearched(Player(0), 'Robs', 1)
    call SetPlayerTechResearched(Player(0), 'Rows', 1)
    call SetPlayerTechResearched(Player(0), 'Roen', 1)
    call SetPlayerTechResearched(Player(0), 'Rowd', 2)
    call SetPlayerTechResearched(Player(0), 'Rost', 2)
    call SetPlayerTechResearched(Player(0), 'Rotr', 1)
    call SetPlayerTechResearched(Player(0), 'Rolf', 1)
    call SetPlayerTechResearched(Player(0), 'Rowt', 2)
    call SetPlayerTechResearched(Player(0), 'Rorb', 1)
    call SetPlayerTechResearched(Player(0), 'Ropm', 1)
    call SetPlayerTechResearched(Player(0), 'Robf', 1)
    call SetPlayerTechResearched(Player(0), 'R00C', 2)
    call SetPlayerTechResearched(Player(0), 'R00D', 1)
    call SetPlayerTechResearched(Player(0), 'R00E', 3)
    call SetPlayerTechResearched(Player(0), 'R00F', 3)
    call SetPlayerTechResearched(Player(0), 'R00G', 3)
    call SetPlayerTechResearched(Player(0), 'R00H', 3)
    call SetPlayerTechResearched(Player(0), 'Rume', 3)
    call SetPlayerTechResearched(Player(0), 'Rura', 3)
    call SetPlayerTechResearched(Player(0), 'Ruar', 3)
    call SetPlayerTechResearched(Player(0), 'Ruac', 1)
    call SetPlayerTechResearched(Player(0), 'Rugf', 1)
    call SetPlayerTechResearched(Player(0), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(0), 'Rusf', 1)
    call SetPlayerTechResearched(Player(0), 'Rune', 2)
    call SetPlayerTechResearched(Player(0), 'Ruba', 2)
    call SetPlayerTechResearched(Player(0), 'Rufb', 1)
    call SetPlayerTechResearched(Player(0), 'Rusl', 1)
    call SetPlayerTechResearched(Player(0), 'Rucr', 3)
    call SetPlayerTechResearched(Player(0), 'Ruex', 1)
    call SetPlayerTechResearched(Player(0), 'Rupm', 1)
    call SetPlayerTechResearched(Player(0), 'Rnen', 1)
    call SetPlayerTechResearched(Player(0), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(0), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(0), 'Rnat', 3)
    call SetPlayerTechResearched(Player(0), 'Rnam', 3)
    call SetPlayerTechResearched(Player(0), 'Rnsb', 1)
    call SetPlayerTechMaxAllowed(Player(0), 'R003', 1)
    call SetPlayerTechResearched(Player(0), 'Resm', 3)
    call SetPlayerTechResearched(Player(0), 'Resw', 3)
    call SetPlayerTechResearched(Player(0), 'Rema', 3)
    call SetPlayerTechResearched(Player(0), 'Rerh', 3)
    call SetPlayerTechResearched(Player(0), 'Renb', 1)
    call SetPlayerTechResearched(Player(0), 'Reuv', 1)
    call SetPlayerTechResearched(Player(0), 'Resc', 1)
    call SetPlayerTechResearched(Player(0), 'Remg', 1)
    call SetPlayerTechResearched(Player(0), 'Reib', 1)
    call SetPlayerTechResearched(Player(0), 'Remk', 1)
    call SetPlayerTechResearched(Player(0), 'Redt', 2)
    call SetPlayerTechResearched(Player(0), 'Redc', 2)
    call SetPlayerTechResearched(Player(0), 'Resi', 1)
    call SetPlayerTechResearched(Player(0), 'Recb', 1)
    call SetPlayerTechResearched(Player(0), 'Reht', 1)
    call SetPlayerTechResearched(Player(0), 'Repb', 1)
    call SetPlayerTechResearched(Player(0), 'Rers', 1)
    call SetPlayerTechResearched(Player(0), 'Rehs', 1)
    call SetPlayerTechResearched(Player(0), 'Reeb', 1)
    call SetPlayerTechResearched(Player(0), 'Reec', 1)
    call SetPlayerTechResearched(Player(0), 'Rews', 1)
    call SetPlayerTechResearched(Player(0), 'Repm', 1)
    call SetPlayerTechResearched(Player(0), 'Rovs', 1)
    call SetPlayerTechResearched(Player(0), 'Robk', 1)
    call SetPlayerTechResearched(Player(0), 'Rosp', 3)
    call SetPlayerTechResearched(Player(0), 'Rupc', 1)
    call SetPlayerTechResearched(Player(0), 'Rusm', 1)
    call SetPlayerTechResearched(Player(0), 'Rubu', 1)
    call SetPlayerTechResearched(Player(0), 'Rusp', 1)
    call SetPlayerTechResearched(Player(0), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(0), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(0), 'Rhse', 0)
endfunction

function InitUpgrades_Player1 takes nothing returns nothing
    call SetPlayerTechResearched(Player(1), 'Rhme', 3)
    call SetPlayerTechResearched(Player(1), 'Rhra', 3)
    call SetPlayerTechResearched(Player(1), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(1), 'Rhar', 3)
    call SetPlayerTechResearched(Player(1), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(1), 'R00A', 1)
    call SetPlayerTechResearched(Player(1), 'R003', 3)
    call SetPlayerTechResearched(Player(1), 'R004', 3)
    call SetPlayerTechResearched(Player(1), 'R005', 1)
    call SetPlayerTechResearched(Player(1), 'R006', 1)
    call SetPlayerTechResearched(Player(1), 'R007', 1)
    call SetPlayerTechResearched(Player(1), 'R008', 1)
    call SetPlayerTechResearched(Player(1), 'R009', 1)
    call SetPlayerTechResearched(Player(1), 'Rhac', 3)
    call SetPlayerTechResearched(Player(1), 'Rhde', 1)
    call SetPlayerTechResearched(Player(1), 'Rhan', 1)
    call SetPlayerTechResearched(Player(1), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(1), 'Rhst', 2)
    call SetPlayerTechResearched(Player(1), 'Rhla', 3)
    call SetPlayerTechResearched(Player(1), 'Rhri', 1)
    call SetPlayerTechResearched(Player(1), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(1), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(1), 'Rhss', 1)
    call SetPlayerTechResearched(Player(1), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(1), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(1), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(1), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(1), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(1), 'R000', 1)
    call SetPlayerTechResearched(Player(1), 'R001', 3)
    call SetPlayerTechResearched(Player(1), 'R002', 3)
    call SetPlayerTechResearched(Player(1), 'Rome', 3)
    call SetPlayerTechResearched(Player(1), 'Rora', 3)
    call SetPlayerTechResearched(Player(1), 'Roar', 3)
    call SetPlayerTechResearched(Player(1), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(1), 'Ropg', 1)
    call SetPlayerTechResearched(Player(1), 'Robs', 1)
    call SetPlayerTechResearched(Player(1), 'Rows', 1)
    call SetPlayerTechResearched(Player(1), 'Roen', 1)
    call SetPlayerTechResearched(Player(1), 'Rowd', 2)
    call SetPlayerTechResearched(Player(1), 'Rost', 2)
    call SetPlayerTechResearched(Player(1), 'Rotr', 1)
    call SetPlayerTechResearched(Player(1), 'Rolf', 1)
    call SetPlayerTechResearched(Player(1), 'Rowt', 2)
    call SetPlayerTechResearched(Player(1), 'Rorb', 1)
    call SetPlayerTechResearched(Player(1), 'Ropm', 1)
    call SetPlayerTechResearched(Player(1), 'Robf', 1)
    call SetPlayerTechResearched(Player(1), 'Rume', 3)
    call SetPlayerTechResearched(Player(1), 'Rura', 3)
    call SetPlayerTechResearched(Player(1), 'Ruar', 3)
    call SetPlayerTechResearched(Player(1), 'Ruac', 1)
    call SetPlayerTechResearched(Player(1), 'Rugf', 1)
    call SetPlayerTechResearched(Player(1), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(1), 'Rusf', 1)
    call SetPlayerTechResearched(Player(1), 'Rune', 2)
    call SetPlayerTechResearched(Player(1), 'Ruba', 2)
    call SetPlayerTechResearched(Player(1), 'Rufb', 1)
    call SetPlayerTechResearched(Player(1), 'Rusl', 1)
    call SetPlayerTechResearched(Player(1), 'Rucr', 3)
    call SetPlayerTechResearched(Player(1), 'Ruex', 1)
    call SetPlayerTechResearched(Player(1), 'Rupm', 1)
    call SetPlayerTechResearched(Player(1), 'Rnen', 1)
    call SetPlayerTechResearched(Player(1), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(1), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(1), 'Rnat', 3)
    call SetPlayerTechResearched(Player(1), 'Rnam', 3)
    call SetPlayerTechResearched(Player(1), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(1), 'Resm', 3)
    call SetPlayerTechResearched(Player(1), 'Resw', 3)
    call SetPlayerTechResearched(Player(1), 'Rema', 3)
    call SetPlayerTechResearched(Player(1), 'Rerh', 3)
    call SetPlayerTechResearched(Player(1), 'Renb', 1)
    call SetPlayerTechResearched(Player(1), 'Reuv', 1)
    call SetPlayerTechResearched(Player(1), 'Resc', 1)
    call SetPlayerTechResearched(Player(1), 'Remg', 1)
    call SetPlayerTechResearched(Player(1), 'Reib', 1)
    call SetPlayerTechResearched(Player(1), 'Remk', 1)
    call SetPlayerTechResearched(Player(1), 'Redt', 2)
    call SetPlayerTechResearched(Player(1), 'Redc', 2)
    call SetPlayerTechResearched(Player(1), 'Resi', 1)
    call SetPlayerTechResearched(Player(1), 'Recb', 1)
    call SetPlayerTechResearched(Player(1), 'Reht', 1)
    call SetPlayerTechResearched(Player(1), 'Repb', 1)
    call SetPlayerTechResearched(Player(1), 'Rers', 1)
    call SetPlayerTechResearched(Player(1), 'Rehs', 1)
    call SetPlayerTechResearched(Player(1), 'Reeb', 1)
    call SetPlayerTechResearched(Player(1), 'Reec', 1)
    call SetPlayerTechResearched(Player(1), 'Rews', 1)
    call SetPlayerTechResearched(Player(1), 'Repm', 1)
    call SetPlayerTechResearched(Player(1), 'Rovs', 1)
    call SetPlayerTechResearched(Player(1), 'Robk', 1)
    call SetPlayerTechResearched(Player(1), 'Rosp', 3)
    call SetPlayerTechResearched(Player(1), 'Rupc', 1)
    call SetPlayerTechResearched(Player(1), 'Rusm', 1)
    call SetPlayerTechResearched(Player(1), 'Rubu', 1)
    call SetPlayerTechResearched(Player(1), 'Rusp', 1)
    call SetPlayerTechResearched(Player(1), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(1), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(1), 'Rhse', 0)
endfunction

function InitUpgrades_Player2 takes nothing returns nothing
    call SetPlayerTechResearched(Player(2), 'Rhme', 3)
    call SetPlayerTechResearched(Player(2), 'Rhra', 3)
    call SetPlayerTechResearched(Player(2), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(2), 'Rhar', 3)
    call SetPlayerTechResearched(Player(2), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(2), 'Rhac', 3)
    call SetPlayerTechResearched(Player(2), 'Rhde', 1)
    call SetPlayerTechResearched(Player(2), 'Rhan', 1)
    call SetPlayerTechResearched(Player(2), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(2), 'Rhst', 2)
    call SetPlayerTechResearched(Player(2), 'Rhla', 3)
    call SetPlayerTechResearched(Player(2), 'Rhri', 1)
    call SetPlayerTechResearched(Player(2), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(2), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(2), 'Rhss', 1)
    call SetPlayerTechResearched(Player(2), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(2), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(2), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(2), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(2), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(2), 'Rome', 3)
    call SetPlayerTechResearched(Player(2), 'Rora', 3)
    call SetPlayerTechResearched(Player(2), 'Roar', 3)
    call SetPlayerTechResearched(Player(2), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(2), 'Ropg', 1)
    call SetPlayerTechResearched(Player(2), 'Robs', 1)
    call SetPlayerTechResearched(Player(2), 'Rows', 1)
    call SetPlayerTechResearched(Player(2), 'Roen', 1)
    call SetPlayerTechResearched(Player(2), 'Rowd', 2)
    call SetPlayerTechResearched(Player(2), 'Rost', 2)
    call SetPlayerTechResearched(Player(2), 'Rotr', 1)
    call SetPlayerTechResearched(Player(2), 'Rolf', 1)
    call SetPlayerTechResearched(Player(2), 'Rowt', 2)
    call SetPlayerTechResearched(Player(2), 'Rorb', 1)
    call SetPlayerTechResearched(Player(2), 'Ropm', 1)
    call SetPlayerTechResearched(Player(2), 'Robf', 1)
    call SetPlayerTechResearched(Player(2), 'Rume', 3)
    call SetPlayerTechResearched(Player(2), 'Rura', 3)
    call SetPlayerTechResearched(Player(2), 'Ruar', 3)
    call SetPlayerTechResearched(Player(2), 'Ruac', 1)
    call SetPlayerTechResearched(Player(2), 'Rugf', 1)
    call SetPlayerTechResearched(Player(2), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(2), 'Rusf', 1)
    call SetPlayerTechResearched(Player(2), 'Rune', 2)
    call SetPlayerTechResearched(Player(2), 'Ruba', 2)
    call SetPlayerTechResearched(Player(2), 'Rufb', 1)
    call SetPlayerTechResearched(Player(2), 'Rusl', 1)
    call SetPlayerTechResearched(Player(2), 'Rucr', 3)
    call SetPlayerTechResearched(Player(2), 'Ruex', 1)
    call SetPlayerTechResearched(Player(2), 'Rupm', 1)
    call SetPlayerTechResearched(Player(2), 'Rnen', 1)
    call SetPlayerTechResearched(Player(2), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(2), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(2), 'Rnat', 3)
    call SetPlayerTechResearched(Player(2), 'Rnam', 3)
    call SetPlayerTechResearched(Player(2), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(2), 'Resm', 3)
    call SetPlayerTechResearched(Player(2), 'Resw', 3)
    call SetPlayerTechResearched(Player(2), 'Rema', 3)
    call SetPlayerTechResearched(Player(2), 'Rerh', 3)
    call SetPlayerTechResearched(Player(2), 'Renb', 1)
    call SetPlayerTechResearched(Player(2), 'Reuv', 1)
    call SetPlayerTechResearched(Player(2), 'Resc', 1)
    call SetPlayerTechResearched(Player(2), 'Remg', 1)
    call SetPlayerTechResearched(Player(2), 'Reib', 1)
    call SetPlayerTechResearched(Player(2), 'Remk', 1)
    call SetPlayerTechResearched(Player(2), 'Redt', 2)
    call SetPlayerTechResearched(Player(2), 'Redc', 2)
    call SetPlayerTechResearched(Player(2), 'Resi', 1)
    call SetPlayerTechResearched(Player(2), 'Recb', 1)
    call SetPlayerTechResearched(Player(2), 'Reht', 1)
    call SetPlayerTechResearched(Player(2), 'Repb', 1)
    call SetPlayerTechResearched(Player(2), 'Rers', 1)
    call SetPlayerTechResearched(Player(2), 'Rehs', 1)
    call SetPlayerTechResearched(Player(2), 'Reeb', 1)
    call SetPlayerTechResearched(Player(2), 'Reec', 1)
    call SetPlayerTechResearched(Player(2), 'Rews', 1)
    call SetPlayerTechResearched(Player(2), 'Repm', 1)
    call SetPlayerTechResearched(Player(2), 'Rovs', 1)
    call SetPlayerTechResearched(Player(2), 'Robk', 1)
    call SetPlayerTechResearched(Player(2), 'Rosp', 3)
    call SetPlayerTechResearched(Player(2), 'Rupc', 1)
    call SetPlayerTechResearched(Player(2), 'Rusm', 1)
    call SetPlayerTechResearched(Player(2), 'Rubu', 1)
    call SetPlayerTechResearched(Player(2), 'Rusp', 1)
    call SetPlayerTechResearched(Player(2), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(2), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(2), 'Rhse', 0)
endfunction

function InitUpgrades_Player3 takes nothing returns nothing
    call SetPlayerTechResearched(Player(3), 'Rhme', 3)
    call SetPlayerTechResearched(Player(3), 'Rhra', 3)
    call SetPlayerTechResearched(Player(3), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(3), 'Rhar', 3)
    call SetPlayerTechResearched(Player(3), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(3), 'Rhac', 3)
    call SetPlayerTechResearched(Player(3), 'Rhde', 1)
    call SetPlayerTechResearched(Player(3), 'Rhan', 1)
    call SetPlayerTechResearched(Player(3), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(3), 'Rhst', 2)
    call SetPlayerTechResearched(Player(3), 'Rhla', 3)
    call SetPlayerTechResearched(Player(3), 'Rhri', 1)
    call SetPlayerTechResearched(Player(3), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(3), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(3), 'Rhss', 1)
    call SetPlayerTechResearched(Player(3), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(3), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(3), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(3), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(3), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(3), 'Rome', 3)
    call SetPlayerTechResearched(Player(3), 'Rora', 3)
    call SetPlayerTechResearched(Player(3), 'Roar', 3)
    call SetPlayerTechResearched(Player(3), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(3), 'Ropg', 1)
    call SetPlayerTechResearched(Player(3), 'Robs', 1)
    call SetPlayerTechResearched(Player(3), 'Rows', 1)
    call SetPlayerTechResearched(Player(3), 'Roen', 1)
    call SetPlayerTechResearched(Player(3), 'Rowd', 2)
    call SetPlayerTechResearched(Player(3), 'Rost', 2)
    call SetPlayerTechResearched(Player(3), 'Rotr', 1)
    call SetPlayerTechResearched(Player(3), 'Rolf', 1)
    call SetPlayerTechResearched(Player(3), 'Rowt', 2)
    call SetPlayerTechResearched(Player(3), 'Rorb', 1)
    call SetPlayerTechResearched(Player(3), 'Ropm', 1)
    call SetPlayerTechResearched(Player(3), 'Robf', 1)
    call SetPlayerTechResearched(Player(3), 'Rume', 3)
    call SetPlayerTechResearched(Player(3), 'Rura', 3)
    call SetPlayerTechResearched(Player(3), 'Ruar', 3)
    call SetPlayerTechResearched(Player(3), 'Ruac', 1)
    call SetPlayerTechResearched(Player(3), 'Rugf', 1)
    call SetPlayerTechResearched(Player(3), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(3), 'Rusf', 1)
    call SetPlayerTechResearched(Player(3), 'Rune', 2)
    call SetPlayerTechResearched(Player(3), 'Ruba', 2)
    call SetPlayerTechResearched(Player(3), 'Rufb', 1)
    call SetPlayerTechResearched(Player(3), 'Rusl', 1)
    call SetPlayerTechResearched(Player(3), 'Rucr', 3)
    call SetPlayerTechResearched(Player(3), 'Ruex', 1)
    call SetPlayerTechResearched(Player(3), 'Rupm', 1)
    call SetPlayerTechResearched(Player(3), 'Rnen', 1)
    call SetPlayerTechResearched(Player(3), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(3), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(3), 'Rnat', 3)
    call SetPlayerTechResearched(Player(3), 'Rnam', 3)
    call SetPlayerTechResearched(Player(3), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(3), 'Resm', 3)
    call SetPlayerTechResearched(Player(3), 'Resw', 3)
    call SetPlayerTechResearched(Player(3), 'Rema', 3)
    call SetPlayerTechResearched(Player(3), 'Rerh', 3)
    call SetPlayerTechResearched(Player(3), 'Renb', 1)
    call SetPlayerTechResearched(Player(3), 'Reuv', 1)
    call SetPlayerTechResearched(Player(3), 'Resc', 1)
    call SetPlayerTechResearched(Player(3), 'Remg', 1)
    call SetPlayerTechResearched(Player(3), 'Reib', 1)
    call SetPlayerTechResearched(Player(3), 'Remk', 1)
    call SetPlayerTechResearched(Player(3), 'Redt', 2)
    call SetPlayerTechResearched(Player(3), 'Redc', 2)
    call SetPlayerTechResearched(Player(3), 'Resi', 1)
    call SetPlayerTechResearched(Player(3), 'Recb', 1)
    call SetPlayerTechResearched(Player(3), 'Reht', 1)
    call SetPlayerTechResearched(Player(3), 'Repb', 1)
    call SetPlayerTechResearched(Player(3), 'Rers', 1)
    call SetPlayerTechResearched(Player(3), 'Rehs', 1)
    call SetPlayerTechResearched(Player(3), 'Reeb', 1)
    call SetPlayerTechResearched(Player(3), 'Reec', 1)
    call SetPlayerTechResearched(Player(3), 'Rews', 1)
    call SetPlayerTechResearched(Player(3), 'Repm', 1)
    call SetPlayerTechResearched(Player(3), 'Rovs', 1)
    call SetPlayerTechResearched(Player(3), 'Robk', 1)
    call SetPlayerTechResearched(Player(3), 'Rosp', 3)
    call SetPlayerTechResearched(Player(3), 'Rupc', 1)
    call SetPlayerTechResearched(Player(3), 'Rusm', 1)
    call SetPlayerTechResearched(Player(3), 'Rubu', 1)
    call SetPlayerTechResearched(Player(3), 'Rusp', 1)
    call SetPlayerTechResearched(Player(3), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(3), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(3), 'Rhse', 0)
endfunction

function InitUpgrades_Player4 takes nothing returns nothing
    call SetPlayerTechResearched(Player(4), 'Rhme', 3)
    call SetPlayerTechResearched(Player(4), 'Rhra', 3)
    call SetPlayerTechResearched(Player(4), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(4), 'Rhar', 3)
    call SetPlayerTechResearched(Player(4), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(4), 'Rhac', 3)
    call SetPlayerTechResearched(Player(4), 'Rhde', 1)
    call SetPlayerTechResearched(Player(4), 'Rhan', 1)
    call SetPlayerTechResearched(Player(4), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(4), 'Rhst', 2)
    call SetPlayerTechResearched(Player(4), 'Rhla', 3)
    call SetPlayerTechResearched(Player(4), 'Rhri', 1)
    call SetPlayerTechResearched(Player(4), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(4), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(4), 'Rhss', 1)
    call SetPlayerTechResearched(Player(4), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(4), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(4), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(4), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(4), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(4), 'Rome', 3)
    call SetPlayerTechResearched(Player(4), 'Rora', 3)
    call SetPlayerTechResearched(Player(4), 'Roar', 3)
    call SetPlayerTechResearched(Player(4), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(4), 'Ropg', 1)
    call SetPlayerTechResearched(Player(4), 'Robs', 1)
    call SetPlayerTechResearched(Player(4), 'Rows', 1)
    call SetPlayerTechResearched(Player(4), 'Roen', 1)
    call SetPlayerTechResearched(Player(4), 'Rowd', 2)
    call SetPlayerTechResearched(Player(4), 'Rost', 2)
    call SetPlayerTechResearched(Player(4), 'Rotr', 1)
    call SetPlayerTechResearched(Player(4), 'Rolf', 1)
    call SetPlayerTechResearched(Player(4), 'Rowt', 2)
    call SetPlayerTechResearched(Player(4), 'Rorb', 1)
    call SetPlayerTechResearched(Player(4), 'Ropm', 1)
    call SetPlayerTechResearched(Player(4), 'Robf', 1)
    call SetPlayerTechResearched(Player(4), 'Rume', 3)
    call SetPlayerTechResearched(Player(4), 'Rura', 3)
    call SetPlayerTechResearched(Player(4), 'Ruar', 3)
    call SetPlayerTechResearched(Player(4), 'Ruac', 1)
    call SetPlayerTechResearched(Player(4), 'Rugf', 1)
    call SetPlayerTechResearched(Player(4), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(4), 'Rusf', 1)
    call SetPlayerTechResearched(Player(4), 'Rune', 2)
    call SetPlayerTechResearched(Player(4), 'Ruba', 2)
    call SetPlayerTechResearched(Player(4), 'Rufb', 1)
    call SetPlayerTechResearched(Player(4), 'Rusl', 1)
    call SetPlayerTechResearched(Player(4), 'Rucr', 3)
    call SetPlayerTechResearched(Player(4), 'Ruex', 1)
    call SetPlayerTechResearched(Player(4), 'Rupm', 1)
    call SetPlayerTechResearched(Player(4), 'Rnen', 1)
    call SetPlayerTechResearched(Player(4), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(4), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(4), 'Rnat', 3)
    call SetPlayerTechResearched(Player(4), 'Rnam', 3)
    call SetPlayerTechResearched(Player(4), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(4), 'Resm', 3)
    call SetPlayerTechResearched(Player(4), 'Resw', 3)
    call SetPlayerTechResearched(Player(4), 'Rema', 3)
    call SetPlayerTechResearched(Player(4), 'Rerh', 3)
    call SetPlayerTechResearched(Player(4), 'Renb', 1)
    call SetPlayerTechResearched(Player(4), 'Reuv', 1)
    call SetPlayerTechResearched(Player(4), 'Resc', 1)
    call SetPlayerTechResearched(Player(4), 'Remg', 1)
    call SetPlayerTechResearched(Player(4), 'Reib', 1)
    call SetPlayerTechResearched(Player(4), 'Remk', 1)
    call SetPlayerTechResearched(Player(4), 'Redt', 2)
    call SetPlayerTechResearched(Player(4), 'Redc', 2)
    call SetPlayerTechResearched(Player(4), 'Resi', 1)
    call SetPlayerTechResearched(Player(4), 'Recb', 1)
    call SetPlayerTechResearched(Player(4), 'Reht', 1)
    call SetPlayerTechResearched(Player(4), 'Repb', 1)
    call SetPlayerTechResearched(Player(4), 'Rers', 1)
    call SetPlayerTechResearched(Player(4), 'Rehs', 1)
    call SetPlayerTechResearched(Player(4), 'Reeb', 1)
    call SetPlayerTechResearched(Player(4), 'Reec', 1)
    call SetPlayerTechResearched(Player(4), 'Rews', 1)
    call SetPlayerTechResearched(Player(4), 'Repm', 1)
    call SetPlayerTechResearched(Player(4), 'Rovs', 1)
    call SetPlayerTechResearched(Player(4), 'Robk', 1)
    call SetPlayerTechResearched(Player(4), 'Rosp', 3)
    call SetPlayerTechResearched(Player(4), 'Rupc', 1)
    call SetPlayerTechResearched(Player(4), 'Rusm', 1)
    call SetPlayerTechResearched(Player(4), 'Rubu', 1)
    call SetPlayerTechResearched(Player(4), 'Rusp', 1)
    call SetPlayerTechResearched(Player(4), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(4), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(4), 'Rhse', 0)
endfunction

function InitUpgrades_Player5 takes nothing returns nothing
    call SetPlayerTechResearched(Player(5), 'Rhme', 3)
    call SetPlayerTechResearched(Player(5), 'Rhra', 3)
    call SetPlayerTechResearched(Player(5), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(5), 'Rhar', 3)
    call SetPlayerTechResearched(Player(5), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(5), 'Rhac', 3)
    call SetPlayerTechResearched(Player(5), 'Rhde', 1)
    call SetPlayerTechResearched(Player(5), 'Rhan', 1)
    call SetPlayerTechResearched(Player(5), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(5), 'Rhst', 2)
    call SetPlayerTechResearched(Player(5), 'Rhla', 3)
    call SetPlayerTechResearched(Player(5), 'Rhri', 1)
    call SetPlayerTechResearched(Player(5), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(5), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(5), 'Rhss', 1)
    call SetPlayerTechResearched(Player(5), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(5), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(5), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(5), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(5), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(5), 'Rome', 3)
    call SetPlayerTechResearched(Player(5), 'Rora', 3)
    call SetPlayerTechResearched(Player(5), 'Roar', 3)
    call SetPlayerTechResearched(Player(5), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(5), 'Ropg', 1)
    call SetPlayerTechResearched(Player(5), 'Robs', 1)
    call SetPlayerTechResearched(Player(5), 'Rows', 1)
    call SetPlayerTechResearched(Player(5), 'Roen', 1)
    call SetPlayerTechResearched(Player(5), 'Rowd', 2)
    call SetPlayerTechResearched(Player(5), 'Rost', 2)
    call SetPlayerTechResearched(Player(5), 'Rotr', 1)
    call SetPlayerTechResearched(Player(5), 'Rolf', 1)
    call SetPlayerTechResearched(Player(5), 'Rowt', 2)
    call SetPlayerTechResearched(Player(5), 'Rorb', 1)
    call SetPlayerTechResearched(Player(5), 'Ropm', 1)
    call SetPlayerTechResearched(Player(5), 'Robf', 1)
    call SetPlayerTechResearched(Player(5), 'Rume', 3)
    call SetPlayerTechResearched(Player(5), 'Rura', 3)
    call SetPlayerTechResearched(Player(5), 'Ruar', 3)
    call SetPlayerTechResearched(Player(5), 'Ruac', 1)
    call SetPlayerTechResearched(Player(5), 'Rugf', 1)
    call SetPlayerTechResearched(Player(5), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(5), 'Rusf', 1)
    call SetPlayerTechResearched(Player(5), 'Rune', 2)
    call SetPlayerTechResearched(Player(5), 'Ruba', 2)
    call SetPlayerTechResearched(Player(5), 'Rufb', 1)
    call SetPlayerTechResearched(Player(5), 'Rusl', 1)
    call SetPlayerTechResearched(Player(5), 'Rucr', 3)
    call SetPlayerTechResearched(Player(5), 'Ruex', 1)
    call SetPlayerTechResearched(Player(5), 'Rupm', 1)
    call SetPlayerTechResearched(Player(5), 'Rnen', 1)
    call SetPlayerTechResearched(Player(5), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(5), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(5), 'Rnat', 3)
    call SetPlayerTechResearched(Player(5), 'Rnam', 3)
    call SetPlayerTechResearched(Player(5), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(5), 'Resm', 3)
    call SetPlayerTechResearched(Player(5), 'Resw', 3)
    call SetPlayerTechResearched(Player(5), 'Rema', 3)
    call SetPlayerTechResearched(Player(5), 'Rerh', 3)
    call SetPlayerTechResearched(Player(5), 'Renb', 1)
    call SetPlayerTechResearched(Player(5), 'Reuv', 1)
    call SetPlayerTechResearched(Player(5), 'Resc', 1)
    call SetPlayerTechResearched(Player(5), 'Remg', 1)
    call SetPlayerTechResearched(Player(5), 'Reib', 1)
    call SetPlayerTechResearched(Player(5), 'Remk', 1)
    call SetPlayerTechResearched(Player(5), 'Redt', 2)
    call SetPlayerTechResearched(Player(5), 'Redc', 2)
    call SetPlayerTechResearched(Player(5), 'Resi', 1)
    call SetPlayerTechResearched(Player(5), 'Recb', 1)
    call SetPlayerTechResearched(Player(5), 'Reht', 1)
    call SetPlayerTechResearched(Player(5), 'Repb', 1)
    call SetPlayerTechResearched(Player(5), 'Rers', 1)
    call SetPlayerTechResearched(Player(5), 'Rehs', 1)
    call SetPlayerTechResearched(Player(5), 'Reeb', 1)
    call SetPlayerTechResearched(Player(5), 'Reec', 1)
    call SetPlayerTechResearched(Player(5), 'Rews', 1)
    call SetPlayerTechResearched(Player(5), 'Repm', 1)
    call SetPlayerTechResearched(Player(5), 'Rovs', 1)
    call SetPlayerTechResearched(Player(5), 'Robk', 1)
    call SetPlayerTechResearched(Player(5), 'Rosp', 3)
    call SetPlayerTechResearched(Player(5), 'Rupc', 1)
    call SetPlayerTechResearched(Player(5), 'Rusm', 1)
    call SetPlayerTechResearched(Player(5), 'Rubu', 1)
    call SetPlayerTechResearched(Player(5), 'Rusp', 1)
    call SetPlayerTechResearched(Player(5), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(5), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(5), 'Rhse', 0)
endfunction

function InitUpgrades_Player6 takes nothing returns nothing
    call SetPlayerTechResearched(Player(6), 'Rhme', 3)
    call SetPlayerTechResearched(Player(6), 'Rhra', 3)
    call SetPlayerTechResearched(Player(6), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(6), 'Rhar', 3)
    call SetPlayerTechResearched(Player(6), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(6), 'Rhac', 3)
    call SetPlayerTechResearched(Player(6), 'Rhde', 1)
    call SetPlayerTechResearched(Player(6), 'Rhan', 1)
    call SetPlayerTechResearched(Player(6), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(6), 'Rhst', 2)
    call SetPlayerTechResearched(Player(6), 'Rhla', 3)
    call SetPlayerTechResearched(Player(6), 'Rhri', 1)
    call SetPlayerTechResearched(Player(6), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(6), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(6), 'Rhss', 1)
    call SetPlayerTechResearched(Player(6), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(6), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(6), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(6), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(6), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(6), 'Rome', 3)
    call SetPlayerTechResearched(Player(6), 'Rora', 3)
    call SetPlayerTechResearched(Player(6), 'Roar', 3)
    call SetPlayerTechResearched(Player(6), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(6), 'Ropg', 1)
    call SetPlayerTechResearched(Player(6), 'Robs', 1)
    call SetPlayerTechResearched(Player(6), 'Rows', 1)
    call SetPlayerTechResearched(Player(6), 'Roen', 1)
    call SetPlayerTechResearched(Player(6), 'Rowd', 2)
    call SetPlayerTechResearched(Player(6), 'Rost', 2)
    call SetPlayerTechResearched(Player(6), 'Rotr', 1)
    call SetPlayerTechResearched(Player(6), 'Rolf', 1)
    call SetPlayerTechResearched(Player(6), 'Rowt', 2)
    call SetPlayerTechResearched(Player(6), 'Rorb', 1)
    call SetPlayerTechResearched(Player(6), 'Ropm', 1)
    call SetPlayerTechResearched(Player(6), 'Robf', 1)
    call SetPlayerTechResearched(Player(6), 'Rume', 3)
    call SetPlayerTechResearched(Player(6), 'Rura', 3)
    call SetPlayerTechResearched(Player(6), 'Ruar', 3)
    call SetPlayerTechResearched(Player(6), 'Ruac', 1)
    call SetPlayerTechResearched(Player(6), 'Rugf', 1)
    call SetPlayerTechResearched(Player(6), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(6), 'Rusf', 1)
    call SetPlayerTechResearched(Player(6), 'Rune', 2)
    call SetPlayerTechResearched(Player(6), 'Ruba', 2)
    call SetPlayerTechResearched(Player(6), 'Rufb', 1)
    call SetPlayerTechResearched(Player(6), 'Rusl', 1)
    call SetPlayerTechResearched(Player(6), 'Rucr', 3)
    call SetPlayerTechResearched(Player(6), 'Ruex', 1)
    call SetPlayerTechResearched(Player(6), 'Rupm', 1)
    call SetPlayerTechResearched(Player(6), 'Rnen', 1)
    call SetPlayerTechResearched(Player(6), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(6), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(6), 'Rnat', 3)
    call SetPlayerTechResearched(Player(6), 'Rnam', 3)
    call SetPlayerTechResearched(Player(6), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(6), 'Resm', 3)
    call SetPlayerTechResearched(Player(6), 'Resw', 3)
    call SetPlayerTechResearched(Player(6), 'Rema', 3)
    call SetPlayerTechResearched(Player(6), 'Rerh', 3)
    call SetPlayerTechResearched(Player(6), 'Renb', 1)
    call SetPlayerTechResearched(Player(6), 'Reuv', 1)
    call SetPlayerTechResearched(Player(6), 'Resc', 1)
    call SetPlayerTechResearched(Player(6), 'Remg', 1)
    call SetPlayerTechResearched(Player(6), 'Reib', 1)
    call SetPlayerTechResearched(Player(6), 'Remk', 1)
    call SetPlayerTechResearched(Player(6), 'Redt', 2)
    call SetPlayerTechResearched(Player(6), 'Redc', 2)
    call SetPlayerTechResearched(Player(6), 'Resi', 1)
    call SetPlayerTechResearched(Player(6), 'Recb', 1)
    call SetPlayerTechResearched(Player(6), 'Reht', 1)
    call SetPlayerTechResearched(Player(6), 'Repb', 1)
    call SetPlayerTechResearched(Player(6), 'Rers', 1)
    call SetPlayerTechResearched(Player(6), 'Rehs', 1)
    call SetPlayerTechResearched(Player(6), 'Reeb', 1)
    call SetPlayerTechResearched(Player(6), 'Reec', 1)
    call SetPlayerTechResearched(Player(6), 'Rews', 1)
    call SetPlayerTechResearched(Player(6), 'Repm', 1)
    call SetPlayerTechResearched(Player(6), 'Rovs', 1)
    call SetPlayerTechResearched(Player(6), 'Robk', 1)
    call SetPlayerTechResearched(Player(6), 'Rosp', 3)
    call SetPlayerTechResearched(Player(6), 'Rupc', 1)
    call SetPlayerTechResearched(Player(6), 'Rusm', 1)
    call SetPlayerTechResearched(Player(6), 'Rubu', 1)
    call SetPlayerTechResearched(Player(6), 'Rusp', 1)
    call SetPlayerTechResearched(Player(6), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(6), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(6), 'Rhse', 0)
endfunction

function InitUpgrades_Player7 takes nothing returns nothing
    call SetPlayerTechResearched(Player(7), 'Rhme', 3)
    call SetPlayerTechResearched(Player(7), 'Rhra', 3)
    call SetPlayerTechResearched(Player(7), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(7), 'Rhar', 3)
    call SetPlayerTechResearched(Player(7), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(7), 'Rhac', 3)
    call SetPlayerTechResearched(Player(7), 'Rhde', 1)
    call SetPlayerTechResearched(Player(7), 'Rhan', 1)
    call SetPlayerTechResearched(Player(7), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(7), 'Rhst', 2)
    call SetPlayerTechResearched(Player(7), 'Rhla', 3)
    call SetPlayerTechResearched(Player(7), 'Rhri', 1)
    call SetPlayerTechResearched(Player(7), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(7), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(7), 'Rhss', 1)
    call SetPlayerTechResearched(Player(7), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(7), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(7), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(7), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(7), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(7), 'Rome', 3)
    call SetPlayerTechResearched(Player(7), 'Rora', 3)
    call SetPlayerTechResearched(Player(7), 'Roar', 3)
    call SetPlayerTechResearched(Player(7), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(7), 'Ropg', 1)
    call SetPlayerTechResearched(Player(7), 'Robs', 1)
    call SetPlayerTechResearched(Player(7), 'Rows', 1)
    call SetPlayerTechResearched(Player(7), 'Roen', 1)
    call SetPlayerTechResearched(Player(7), 'Rowd', 2)
    call SetPlayerTechResearched(Player(7), 'Rost', 2)
    call SetPlayerTechResearched(Player(7), 'Rotr', 1)
    call SetPlayerTechResearched(Player(7), 'Rolf', 1)
    call SetPlayerTechResearched(Player(7), 'Rowt', 2)
    call SetPlayerTechResearched(Player(7), 'Rorb', 1)
    call SetPlayerTechResearched(Player(7), 'Ropm', 1)
    call SetPlayerTechResearched(Player(7), 'Robf', 1)
    call SetPlayerTechResearched(Player(7), 'Rume', 3)
    call SetPlayerTechResearched(Player(7), 'Rura', 3)
    call SetPlayerTechResearched(Player(7), 'Ruar', 3)
    call SetPlayerTechResearched(Player(7), 'Ruac', 1)
    call SetPlayerTechResearched(Player(7), 'Rugf', 1)
    call SetPlayerTechResearched(Player(7), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(7), 'Rusf', 1)
    call SetPlayerTechResearched(Player(7), 'Rune', 2)
    call SetPlayerTechResearched(Player(7), 'Ruba', 2)
    call SetPlayerTechResearched(Player(7), 'Rufb', 1)
    call SetPlayerTechResearched(Player(7), 'Rusl', 1)
    call SetPlayerTechResearched(Player(7), 'Rucr', 3)
    call SetPlayerTechResearched(Player(7), 'Ruex', 1)
    call SetPlayerTechResearched(Player(7), 'Rupm', 1)
    call SetPlayerTechResearched(Player(7), 'Rnen', 1)
    call SetPlayerTechResearched(Player(7), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(7), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(7), 'Rnat', 3)
    call SetPlayerTechResearched(Player(7), 'Rnam', 3)
    call SetPlayerTechResearched(Player(7), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(7), 'Resm', 3)
    call SetPlayerTechResearched(Player(7), 'Resw', 3)
    call SetPlayerTechResearched(Player(7), 'Rema', 3)
    call SetPlayerTechResearched(Player(7), 'Rerh', 3)
    call SetPlayerTechResearched(Player(7), 'Renb', 1)
    call SetPlayerTechResearched(Player(7), 'Reuv', 1)
    call SetPlayerTechResearched(Player(7), 'Resc', 1)
    call SetPlayerTechResearched(Player(7), 'Remg', 1)
    call SetPlayerTechResearched(Player(7), 'Reib', 1)
    call SetPlayerTechResearched(Player(7), 'Remk', 1)
    call SetPlayerTechResearched(Player(7), 'Redt', 2)
    call SetPlayerTechResearched(Player(7), 'Redc', 2)
    call SetPlayerTechResearched(Player(7), 'Resi', 1)
    call SetPlayerTechResearched(Player(7), 'Recb', 1)
    call SetPlayerTechResearched(Player(7), 'Reht', 1)
    call SetPlayerTechResearched(Player(7), 'Repb', 1)
    call SetPlayerTechResearched(Player(7), 'Rers', 1)
    call SetPlayerTechResearched(Player(7), 'Rehs', 1)
    call SetPlayerTechResearched(Player(7), 'Reeb', 1)
    call SetPlayerTechResearched(Player(7), 'Reec', 1)
    call SetPlayerTechResearched(Player(7), 'Rews', 1)
    call SetPlayerTechResearched(Player(7), 'Repm', 1)
    call SetPlayerTechResearched(Player(7), 'Rovs', 1)
    call SetPlayerTechResearched(Player(7), 'Robk', 1)
    call SetPlayerTechResearched(Player(7), 'Rosp', 3)
    call SetPlayerTechResearched(Player(7), 'Rupc', 1)
    call SetPlayerTechResearched(Player(7), 'Rusm', 1)
    call SetPlayerTechResearched(Player(7), 'Rubu', 1)
    call SetPlayerTechResearched(Player(7), 'Rusp', 1)
    call SetPlayerTechResearched(Player(7), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(7), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(7), 'Rhse', 0)
endfunction

function InitUpgrades_Player8 takes nothing returns nothing
    call SetPlayerTechResearched(Player(8), 'Rhme', 3)
    call SetPlayerTechResearched(Player(8), 'Rhra', 3)
    call SetPlayerTechResearched(Player(8), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(8), 'Rhar', 3)
    call SetPlayerTechResearched(Player(8), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(8), 'Rhac', 3)
    call SetPlayerTechResearched(Player(8), 'Rhde', 1)
    call SetPlayerTechResearched(Player(8), 'Rhan', 1)
    call SetPlayerTechResearched(Player(8), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(8), 'Rhst', 2)
    call SetPlayerTechResearched(Player(8), 'Rhla', 3)
    call SetPlayerTechResearched(Player(8), 'Rhri', 1)
    call SetPlayerTechResearched(Player(8), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(8), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(8), 'Rhss', 1)
    call SetPlayerTechResearched(Player(8), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(8), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(8), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(8), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(8), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(8), 'Rome', 3)
    call SetPlayerTechResearched(Player(8), 'Rora', 3)
    call SetPlayerTechResearched(Player(8), 'Roar', 3)
    call SetPlayerTechResearched(Player(8), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(8), 'Ropg', 1)
    call SetPlayerTechResearched(Player(8), 'Robs', 1)
    call SetPlayerTechResearched(Player(8), 'Rows', 1)
    call SetPlayerTechResearched(Player(8), 'Roen', 1)
    call SetPlayerTechResearched(Player(8), 'Rowd', 2)
    call SetPlayerTechResearched(Player(8), 'Rost', 2)
    call SetPlayerTechResearched(Player(8), 'Rotr', 1)
    call SetPlayerTechResearched(Player(8), 'Rolf', 1)
    call SetPlayerTechResearched(Player(8), 'Rowt', 2)
    call SetPlayerTechResearched(Player(8), 'Rorb', 1)
    call SetPlayerTechResearched(Player(8), 'Ropm', 1)
    call SetPlayerTechResearched(Player(8), 'Robf', 1)
    call SetPlayerTechResearched(Player(8), 'Rume', 3)
    call SetPlayerTechResearched(Player(8), 'Rura', 3)
    call SetPlayerTechResearched(Player(8), 'Ruar', 3)
    call SetPlayerTechResearched(Player(8), 'Ruac', 1)
    call SetPlayerTechResearched(Player(8), 'Rugf', 1)
    call SetPlayerTechResearched(Player(8), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(8), 'Rusf', 1)
    call SetPlayerTechResearched(Player(8), 'Rune', 2)
    call SetPlayerTechResearched(Player(8), 'Ruba', 2)
    call SetPlayerTechResearched(Player(8), 'Rufb', 1)
    call SetPlayerTechResearched(Player(8), 'Rusl', 1)
    call SetPlayerTechResearched(Player(8), 'Rucr', 3)
    call SetPlayerTechResearched(Player(8), 'Ruex', 1)
    call SetPlayerTechResearched(Player(8), 'Rupm', 1)
    call SetPlayerTechResearched(Player(8), 'Rnen', 1)
    call SetPlayerTechResearched(Player(8), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(8), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(8), 'Rnat', 3)
    call SetPlayerTechResearched(Player(8), 'Rnam', 3)
    call SetPlayerTechResearched(Player(8), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(8), 'Resm', 3)
    call SetPlayerTechResearched(Player(8), 'Resw', 3)
    call SetPlayerTechResearched(Player(8), 'Rema', 3)
    call SetPlayerTechResearched(Player(8), 'Rerh', 3)
    call SetPlayerTechResearched(Player(8), 'Renb', 1)
    call SetPlayerTechResearched(Player(8), 'Reuv', 1)
    call SetPlayerTechResearched(Player(8), 'Resc', 1)
    call SetPlayerTechResearched(Player(8), 'Remg', 1)
    call SetPlayerTechResearched(Player(8), 'Reib', 1)
    call SetPlayerTechResearched(Player(8), 'Remk', 1)
    call SetPlayerTechResearched(Player(8), 'Redt', 2)
    call SetPlayerTechResearched(Player(8), 'Redc', 2)
    call SetPlayerTechResearched(Player(8), 'Resi', 1)
    call SetPlayerTechResearched(Player(8), 'Recb', 1)
    call SetPlayerTechResearched(Player(8), 'Reht', 1)
    call SetPlayerTechResearched(Player(8), 'Repb', 1)
    call SetPlayerTechResearched(Player(8), 'Rers', 1)
    call SetPlayerTechResearched(Player(8), 'Rehs', 1)
    call SetPlayerTechResearched(Player(8), 'Reeb', 1)
    call SetPlayerTechResearched(Player(8), 'Reec', 1)
    call SetPlayerTechResearched(Player(8), 'Rews', 1)
    call SetPlayerTechResearched(Player(8), 'Repm', 1)
    call SetPlayerTechResearched(Player(8), 'Rovs', 1)
    call SetPlayerTechResearched(Player(8), 'Robk', 1)
    call SetPlayerTechResearched(Player(8), 'Rosp', 3)
    call SetPlayerTechResearched(Player(8), 'Rupc', 1)
    call SetPlayerTechResearched(Player(8), 'Rusm', 1)
    call SetPlayerTechResearched(Player(8), 'Rubu', 1)
    call SetPlayerTechResearched(Player(8), 'Rusp', 1)
    call SetPlayerTechResearched(Player(8), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(8), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(8), 'Rhse', 0)
endfunction

function InitUpgrades_Player9 takes nothing returns nothing
    call SetPlayerTechResearched(Player(9), 'Rhme', 3)
    call SetPlayerTechResearched(Player(9), 'Rhra', 3)
    call SetPlayerTechResearched(Player(9), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(9), 'Rhar', 3)
    call SetPlayerTechResearched(Player(9), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(9), 'Rhac', 3)
    call SetPlayerTechResearched(Player(9), 'Rhde', 1)
    call SetPlayerTechResearched(Player(9), 'Rhan', 1)
    call SetPlayerTechResearched(Player(9), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(9), 'Rhst', 2)
    call SetPlayerTechResearched(Player(9), 'Rhla', 3)
    call SetPlayerTechResearched(Player(9), 'Rhri', 1)
    call SetPlayerTechResearched(Player(9), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(9), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(9), 'Rhss', 1)
    call SetPlayerTechResearched(Player(9), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(9), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(9), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(9), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(9), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(9), 'Rome', 3)
    call SetPlayerTechResearched(Player(9), 'Rora', 3)
    call SetPlayerTechResearched(Player(9), 'Roar', 3)
    call SetPlayerTechResearched(Player(9), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(9), 'Ropg', 1)
    call SetPlayerTechResearched(Player(9), 'Robs', 1)
    call SetPlayerTechResearched(Player(9), 'Rows', 1)
    call SetPlayerTechResearched(Player(9), 'Roen', 1)
    call SetPlayerTechResearched(Player(9), 'Rowd', 2)
    call SetPlayerTechResearched(Player(9), 'Rost', 2)
    call SetPlayerTechResearched(Player(9), 'Rotr', 1)
    call SetPlayerTechResearched(Player(9), 'Rolf', 1)
    call SetPlayerTechResearched(Player(9), 'Rowt', 2)
    call SetPlayerTechResearched(Player(9), 'Rorb', 1)
    call SetPlayerTechResearched(Player(9), 'Ropm', 1)
    call SetPlayerTechResearched(Player(9), 'Robf', 1)
    call SetPlayerTechResearched(Player(9), 'Rume', 3)
    call SetPlayerTechResearched(Player(9), 'Rura', 3)
    call SetPlayerTechResearched(Player(9), 'Ruar', 3)
    call SetPlayerTechResearched(Player(9), 'Ruac', 1)
    call SetPlayerTechResearched(Player(9), 'Rugf', 1)
    call SetPlayerTechResearched(Player(9), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(9), 'Rusf', 1)
    call SetPlayerTechResearched(Player(9), 'Rune', 2)
    call SetPlayerTechResearched(Player(9), 'Ruba', 2)
    call SetPlayerTechResearched(Player(9), 'Rufb', 1)
    call SetPlayerTechResearched(Player(9), 'Rusl', 1)
    call SetPlayerTechResearched(Player(9), 'Rucr', 3)
    call SetPlayerTechResearched(Player(9), 'Ruex', 1)
    call SetPlayerTechResearched(Player(9), 'Rupm', 1)
    call SetPlayerTechResearched(Player(9), 'Rnen', 1)
    call SetPlayerTechResearched(Player(9), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(9), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(9), 'Rnat', 3)
    call SetPlayerTechResearched(Player(9), 'Rnam', 3)
    call SetPlayerTechResearched(Player(9), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(9), 'Resm', 3)
    call SetPlayerTechResearched(Player(9), 'Resw', 3)
    call SetPlayerTechResearched(Player(9), 'Rema', 3)
    call SetPlayerTechResearched(Player(9), 'Rerh', 3)
    call SetPlayerTechResearched(Player(9), 'Renb', 1)
    call SetPlayerTechResearched(Player(9), 'Reuv', 1)
    call SetPlayerTechResearched(Player(9), 'Resc', 1)
    call SetPlayerTechResearched(Player(9), 'Remg', 1)
    call SetPlayerTechResearched(Player(9), 'Reib', 1)
    call SetPlayerTechResearched(Player(9), 'Remk', 1)
    call SetPlayerTechResearched(Player(9), 'Redt', 2)
    call SetPlayerTechResearched(Player(9), 'Redc', 2)
    call SetPlayerTechResearched(Player(9), 'Resi', 1)
    call SetPlayerTechResearched(Player(9), 'Recb', 1)
    call SetPlayerTechResearched(Player(9), 'Reht', 1)
    call SetPlayerTechResearched(Player(9), 'Repb', 1)
    call SetPlayerTechResearched(Player(9), 'Rers', 1)
    call SetPlayerTechResearched(Player(9), 'Rehs', 1)
    call SetPlayerTechResearched(Player(9), 'Reeb', 1)
    call SetPlayerTechResearched(Player(9), 'Reec', 1)
    call SetPlayerTechResearched(Player(9), 'Rews', 1)
    call SetPlayerTechResearched(Player(9), 'Repm', 1)
    call SetPlayerTechResearched(Player(9), 'Rovs', 1)
    call SetPlayerTechResearched(Player(9), 'Robk', 1)
    call SetPlayerTechResearched(Player(9), 'Rosp', 3)
    call SetPlayerTechResearched(Player(9), 'Rupc', 1)
    call SetPlayerTechResearched(Player(9), 'Rusm', 1)
    call SetPlayerTechResearched(Player(9), 'Rubu', 1)
    call SetPlayerTechResearched(Player(9), 'Rusp', 1)
    call SetPlayerTechResearched(Player(9), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(9), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(9), 'Rhse', 0)
endfunction

function InitUpgrades_Player10 takes nothing returns nothing
    call SetPlayerTechResearched(Player(10), 'Rhme', 3)
    call SetPlayerTechResearched(Player(10), 'Rhra', 3)
    call SetPlayerTechResearched(Player(10), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(10), 'Rhar', 3)
    call SetPlayerTechResearched(Player(10), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(10), 'Rhac', 3)
    call SetPlayerTechResearched(Player(10), 'Rhde', 1)
    call SetPlayerTechResearched(Player(10), 'Rhan', 1)
    call SetPlayerTechResearched(Player(10), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(10), 'Rhst', 2)
    call SetPlayerTechResearched(Player(10), 'Rhla', 3)
    call SetPlayerTechResearched(Player(10), 'Rhri', 1)
    call SetPlayerTechResearched(Player(10), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(10), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(10), 'Rhss', 1)
    call SetPlayerTechResearched(Player(10), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(10), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(10), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(10), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(10), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(10), 'Rome', 3)
    call SetPlayerTechResearched(Player(10), 'Rora', 3)
    call SetPlayerTechResearched(Player(10), 'Roar', 3)
    call SetPlayerTechResearched(Player(10), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(10), 'Ropg', 1)
    call SetPlayerTechResearched(Player(10), 'Robs', 1)
    call SetPlayerTechResearched(Player(10), 'Rows', 1)
    call SetPlayerTechResearched(Player(10), 'Roen', 1)
    call SetPlayerTechResearched(Player(10), 'Rowd', 2)
    call SetPlayerTechResearched(Player(10), 'Rost', 2)
    call SetPlayerTechResearched(Player(10), 'Rotr', 1)
    call SetPlayerTechResearched(Player(10), 'Rolf', 1)
    call SetPlayerTechResearched(Player(10), 'Rowt', 2)
    call SetPlayerTechResearched(Player(10), 'Rorb', 1)
    call SetPlayerTechResearched(Player(10), 'Ropm', 1)
    call SetPlayerTechResearched(Player(10), 'Robf', 1)
    call SetPlayerTechResearched(Player(10), 'Rume', 3)
    call SetPlayerTechResearched(Player(10), 'Rura', 3)
    call SetPlayerTechResearched(Player(10), 'Ruar', 3)
    call SetPlayerTechResearched(Player(10), 'Ruac', 1)
    call SetPlayerTechResearched(Player(10), 'Rugf', 1)
    call SetPlayerTechResearched(Player(10), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(10), 'Rusf', 1)
    call SetPlayerTechResearched(Player(10), 'Rune', 2)
    call SetPlayerTechResearched(Player(10), 'Ruba', 2)
    call SetPlayerTechResearched(Player(10), 'Rufb', 1)
    call SetPlayerTechResearched(Player(10), 'Rusl', 1)
    call SetPlayerTechResearched(Player(10), 'Rucr', 3)
    call SetPlayerTechResearched(Player(10), 'Ruex', 1)
    call SetPlayerTechResearched(Player(10), 'Rupm', 1)
    call SetPlayerTechResearched(Player(10), 'Rnen', 1)
    call SetPlayerTechResearched(Player(10), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(10), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(10), 'Rnat', 3)
    call SetPlayerTechResearched(Player(10), 'Rnam', 3)
    call SetPlayerTechResearched(Player(10), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(10), 'Resm', 3)
    call SetPlayerTechResearched(Player(10), 'Resw', 3)
    call SetPlayerTechResearched(Player(10), 'Rema', 3)
    call SetPlayerTechResearched(Player(10), 'Rerh', 3)
    call SetPlayerTechResearched(Player(10), 'Renb', 1)
    call SetPlayerTechResearched(Player(10), 'Reuv', 1)
    call SetPlayerTechResearched(Player(10), 'Resc', 1)
    call SetPlayerTechResearched(Player(10), 'Remg', 1)
    call SetPlayerTechResearched(Player(10), 'Reib', 1)
    call SetPlayerTechResearched(Player(10), 'Remk', 1)
    call SetPlayerTechResearched(Player(10), 'Redt', 2)
    call SetPlayerTechResearched(Player(10), 'Redc', 2)
    call SetPlayerTechResearched(Player(10), 'Resi', 1)
    call SetPlayerTechResearched(Player(10), 'Recb', 1)
    call SetPlayerTechResearched(Player(10), 'Reht', 1)
    call SetPlayerTechResearched(Player(10), 'Repb', 1)
    call SetPlayerTechResearched(Player(10), 'Rers', 1)
    call SetPlayerTechResearched(Player(10), 'Rehs', 1)
    call SetPlayerTechResearched(Player(10), 'Reeb', 1)
    call SetPlayerTechResearched(Player(10), 'Reec', 1)
    call SetPlayerTechResearched(Player(10), 'Rews', 1)
    call SetPlayerTechResearched(Player(10), 'Repm', 1)
    call SetPlayerTechResearched(Player(10), 'Rovs', 1)
    call SetPlayerTechResearched(Player(10), 'Robk', 1)
    call SetPlayerTechResearched(Player(10), 'Rosp', 3)
    call SetPlayerTechResearched(Player(10), 'Rupc', 1)
    call SetPlayerTechResearched(Player(10), 'Rusm', 1)
    call SetPlayerTechResearched(Player(10), 'Rubu', 1)
    call SetPlayerTechResearched(Player(10), 'Rusp', 1)
    call SetPlayerTechResearched(Player(10), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(10), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(10), 'Rhse', 0)
endfunction

function InitUpgrades_Player11 takes nothing returns nothing
    call SetPlayerTechResearched(Player(11), 'Rhme', 3)
    call SetPlayerTechResearched(Player(11), 'Rhra', 3)
    call SetPlayerTechResearched(Player(11), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(11), 'Rhar', 3)
    call SetPlayerTechResearched(Player(11), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(11), 'Rhac', 3)
    call SetPlayerTechResearched(Player(11), 'Rhde', 1)
    call SetPlayerTechResearched(Player(11), 'Rhan', 1)
    call SetPlayerTechResearched(Player(11), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(11), 'Rhst', 2)
    call SetPlayerTechResearched(Player(11), 'Rhla', 3)
    call SetPlayerTechResearched(Player(11), 'Rhri', 1)
    call SetPlayerTechResearched(Player(11), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(11), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(11), 'Rhss', 1)
    call SetPlayerTechResearched(Player(11), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(11), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(11), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(11), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(11), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(11), 'Rome', 3)
    call SetPlayerTechResearched(Player(11), 'Rora', 3)
    call SetPlayerTechResearched(Player(11), 'Roar', 3)
    call SetPlayerTechResearched(Player(11), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(11), 'Ropg', 1)
    call SetPlayerTechResearched(Player(11), 'Robs', 1)
    call SetPlayerTechResearched(Player(11), 'Rows', 1)
    call SetPlayerTechResearched(Player(11), 'Roen', 1)
    call SetPlayerTechResearched(Player(11), 'Rowd', 2)
    call SetPlayerTechResearched(Player(11), 'Rost', 2)
    call SetPlayerTechResearched(Player(11), 'Rotr', 1)
    call SetPlayerTechResearched(Player(11), 'Rolf', 1)
    call SetPlayerTechResearched(Player(11), 'Rowt', 2)
    call SetPlayerTechResearched(Player(11), 'Rorb', 1)
    call SetPlayerTechResearched(Player(11), 'Ropm', 1)
    call SetPlayerTechResearched(Player(11), 'Robf', 1)
    call SetPlayerTechResearched(Player(11), 'Rume', 3)
    call SetPlayerTechResearched(Player(11), 'Rura', 3)
    call SetPlayerTechResearched(Player(11), 'Ruar', 3)
    call SetPlayerTechResearched(Player(11), 'Ruac', 1)
    call SetPlayerTechResearched(Player(11), 'Rugf', 1)
    call SetPlayerTechResearched(Player(11), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(11), 'Rusf', 1)
    call SetPlayerTechResearched(Player(11), 'Rune', 2)
    call SetPlayerTechResearched(Player(11), 'Ruba', 2)
    call SetPlayerTechResearched(Player(11), 'Rufb', 1)
    call SetPlayerTechResearched(Player(11), 'Rusl', 1)
    call SetPlayerTechResearched(Player(11), 'Rucr', 3)
    call SetPlayerTechResearched(Player(11), 'Ruex', 1)
    call SetPlayerTechResearched(Player(11), 'Rupm', 1)
    call SetPlayerTechResearched(Player(11), 'Rnen', 1)
    call SetPlayerTechResearched(Player(11), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(11), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(11), 'Rnat', 3)
    call SetPlayerTechResearched(Player(11), 'Rnam', 3)
    call SetPlayerTechResearched(Player(11), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(11), 'Resm', 3)
    call SetPlayerTechResearched(Player(11), 'Resw', 3)
    call SetPlayerTechResearched(Player(11), 'Rema', 3)
    call SetPlayerTechResearched(Player(11), 'Rerh', 3)
    call SetPlayerTechResearched(Player(11), 'Renb', 1)
    call SetPlayerTechResearched(Player(11), 'Reuv', 1)
    call SetPlayerTechResearched(Player(11), 'Resc', 1)
    call SetPlayerTechResearched(Player(11), 'Remg', 1)
    call SetPlayerTechResearched(Player(11), 'Reib', 1)
    call SetPlayerTechResearched(Player(11), 'Remk', 1)
    call SetPlayerTechResearched(Player(11), 'Redt', 2)
    call SetPlayerTechResearched(Player(11), 'Redc', 2)
    call SetPlayerTechResearched(Player(11), 'Resi', 1)
    call SetPlayerTechResearched(Player(11), 'Recb', 1)
    call SetPlayerTechResearched(Player(11), 'Reht', 1)
    call SetPlayerTechResearched(Player(11), 'Repb', 1)
    call SetPlayerTechResearched(Player(11), 'Rers', 1)
    call SetPlayerTechResearched(Player(11), 'Rehs', 1)
    call SetPlayerTechResearched(Player(11), 'Reeb', 1)
    call SetPlayerTechResearched(Player(11), 'Reec', 1)
    call SetPlayerTechResearched(Player(11), 'Rews', 1)
    call SetPlayerTechResearched(Player(11), 'Repm', 1)
    call SetPlayerTechResearched(Player(11), 'Rovs', 1)
    call SetPlayerTechResearched(Player(11), 'Robk', 1)
    call SetPlayerTechResearched(Player(11), 'Rosp', 3)
    call SetPlayerTechResearched(Player(11), 'Rupc', 1)
    call SetPlayerTechResearched(Player(11), 'Rusm', 1)
    call SetPlayerTechResearched(Player(11), 'Rubu', 1)
    call SetPlayerTechResearched(Player(11), 'Rusp', 1)
    call SetPlayerTechResearched(Player(11), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(11), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(11), 'Rhse', 0)
endfunction

function InitUpgrades_Player12 takes nothing returns nothing
    call SetPlayerTechResearched(Player(12), 'Rhme', 3)
    call SetPlayerTechResearched(Player(12), 'Rhra', 3)
    call SetPlayerTechResearched(Player(12), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(12), 'Rhar', 3)
    call SetPlayerTechResearched(Player(12), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(12), 'Rhac', 3)
    call SetPlayerTechResearched(Player(12), 'Rhde', 1)
    call SetPlayerTechResearched(Player(12), 'Rhan', 1)
    call SetPlayerTechResearched(Player(12), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(12), 'Rhst', 2)
    call SetPlayerTechResearched(Player(12), 'Rhla', 3)
    call SetPlayerTechResearched(Player(12), 'Rhri', 1)
    call SetPlayerTechResearched(Player(12), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(12), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(12), 'Rhss', 1)
    call SetPlayerTechResearched(Player(12), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(12), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(12), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(12), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(12), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(12), 'Rome', 3)
    call SetPlayerTechResearched(Player(12), 'Rora', 3)
    call SetPlayerTechResearched(Player(12), 'Roar', 3)
    call SetPlayerTechResearched(Player(12), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(12), 'Ropg', 1)
    call SetPlayerTechResearched(Player(12), 'Robs', 1)
    call SetPlayerTechResearched(Player(12), 'Rows', 1)
    call SetPlayerTechResearched(Player(12), 'Roen', 1)
    call SetPlayerTechResearched(Player(12), 'Rowd', 2)
    call SetPlayerTechResearched(Player(12), 'Rost', 2)
    call SetPlayerTechResearched(Player(12), 'Rotr', 1)
    call SetPlayerTechResearched(Player(12), 'Rolf', 1)
    call SetPlayerTechResearched(Player(12), 'Rowt', 2)
    call SetPlayerTechResearched(Player(12), 'Rorb', 1)
    call SetPlayerTechResearched(Player(12), 'Ropm', 1)
    call SetPlayerTechResearched(Player(12), 'Robf', 1)
    call SetPlayerTechResearched(Player(12), 'Rume', 3)
    call SetPlayerTechResearched(Player(12), 'Rura', 3)
    call SetPlayerTechResearched(Player(12), 'Ruar', 3)
    call SetPlayerTechResearched(Player(12), 'Ruac', 1)
    call SetPlayerTechResearched(Player(12), 'Rugf', 1)
    call SetPlayerTechResearched(Player(12), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(12), 'Rusf', 1)
    call SetPlayerTechResearched(Player(12), 'Rune', 2)
    call SetPlayerTechResearched(Player(12), 'Ruba', 2)
    call SetPlayerTechResearched(Player(12), 'Rufb', 1)
    call SetPlayerTechResearched(Player(12), 'Rusl', 1)
    call SetPlayerTechResearched(Player(12), 'Rucr', 3)
    call SetPlayerTechResearched(Player(12), 'Ruex', 1)
    call SetPlayerTechResearched(Player(12), 'Rupm', 1)
    call SetPlayerTechResearched(Player(12), 'Rnen', 1)
    call SetPlayerTechResearched(Player(12), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(12), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(12), 'Rnat', 3)
    call SetPlayerTechResearched(Player(12), 'Rnam', 3)
    call SetPlayerTechResearched(Player(12), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(12), 'Resm', 3)
    call SetPlayerTechResearched(Player(12), 'Resw', 3)
    call SetPlayerTechResearched(Player(12), 'Rema', 3)
    call SetPlayerTechResearched(Player(12), 'Rerh', 3)
    call SetPlayerTechResearched(Player(12), 'Renb', 1)
    call SetPlayerTechResearched(Player(12), 'Reuv', 1)
    call SetPlayerTechResearched(Player(12), 'Resc', 1)
    call SetPlayerTechResearched(Player(12), 'Remg', 1)
    call SetPlayerTechResearched(Player(12), 'Reib', 1)
    call SetPlayerTechResearched(Player(12), 'Remk', 1)
    call SetPlayerTechResearched(Player(12), 'Redt', 2)
    call SetPlayerTechResearched(Player(12), 'Redc', 2)
    call SetPlayerTechResearched(Player(12), 'Resi', 1)
    call SetPlayerTechResearched(Player(12), 'Recb', 1)
    call SetPlayerTechResearched(Player(12), 'Reht', 1)
    call SetPlayerTechResearched(Player(12), 'Repb', 1)
    call SetPlayerTechResearched(Player(12), 'Rers', 1)
    call SetPlayerTechResearched(Player(12), 'Rehs', 1)
    call SetPlayerTechResearched(Player(12), 'Reeb', 1)
    call SetPlayerTechResearched(Player(12), 'Reec', 1)
    call SetPlayerTechResearched(Player(12), 'Rews', 1)
    call SetPlayerTechResearched(Player(12), 'Repm', 1)
    call SetPlayerTechResearched(Player(12), 'Rovs', 1)
    call SetPlayerTechResearched(Player(12), 'Robk', 1)
    call SetPlayerTechResearched(Player(12), 'Rosp', 3)
    call SetPlayerTechResearched(Player(12), 'Rupc', 1)
    call SetPlayerTechResearched(Player(12), 'Rusm', 1)
    call SetPlayerTechResearched(Player(12), 'Rubu', 1)
    call SetPlayerTechResearched(Player(12), 'Rusp', 1)
    call SetPlayerTechResearched(Player(12), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(12), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(12), 'Rhse', 0)
endfunction

function InitUpgrades_Player13 takes nothing returns nothing
    call SetPlayerTechResearched(Player(13), 'Rhme', 3)
    call SetPlayerTechResearched(Player(13), 'Rhra', 3)
    call SetPlayerTechResearched(Player(13), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(13), 'Rhar', 3)
    call SetPlayerTechResearched(Player(13), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(13), 'Rhac', 3)
    call SetPlayerTechResearched(Player(13), 'Rhde', 1)
    call SetPlayerTechResearched(Player(13), 'Rhan', 1)
    call SetPlayerTechResearched(Player(13), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(13), 'Rhst', 2)
    call SetPlayerTechResearched(Player(13), 'Rhla', 3)
    call SetPlayerTechResearched(Player(13), 'Rhri', 1)
    call SetPlayerTechResearched(Player(13), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(13), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(13), 'Rhss', 1)
    call SetPlayerTechResearched(Player(13), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(13), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(13), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(13), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(13), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(13), 'Rome', 3)
    call SetPlayerTechResearched(Player(13), 'Rora', 3)
    call SetPlayerTechResearched(Player(13), 'Roar', 3)
    call SetPlayerTechResearched(Player(13), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(13), 'Ropg', 1)
    call SetPlayerTechResearched(Player(13), 'Robs', 1)
    call SetPlayerTechResearched(Player(13), 'Rows', 1)
    call SetPlayerTechResearched(Player(13), 'Roen', 1)
    call SetPlayerTechResearched(Player(13), 'Rowd', 2)
    call SetPlayerTechResearched(Player(13), 'Rost', 2)
    call SetPlayerTechResearched(Player(13), 'Rotr', 1)
    call SetPlayerTechResearched(Player(13), 'Rolf', 1)
    call SetPlayerTechResearched(Player(13), 'Rowt', 2)
    call SetPlayerTechResearched(Player(13), 'Rorb', 1)
    call SetPlayerTechResearched(Player(13), 'Ropm', 1)
    call SetPlayerTechResearched(Player(13), 'Robf', 1)
    call SetPlayerTechResearched(Player(13), 'Rume', 3)
    call SetPlayerTechResearched(Player(13), 'Rura', 3)
    call SetPlayerTechResearched(Player(13), 'Ruar', 3)
    call SetPlayerTechResearched(Player(13), 'Ruac', 1)
    call SetPlayerTechResearched(Player(13), 'Rugf', 1)
    call SetPlayerTechResearched(Player(13), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(13), 'Rusf', 1)
    call SetPlayerTechResearched(Player(13), 'Rune', 2)
    call SetPlayerTechResearched(Player(13), 'Ruba', 2)
    call SetPlayerTechResearched(Player(13), 'Rufb', 1)
    call SetPlayerTechResearched(Player(13), 'Rusl', 1)
    call SetPlayerTechResearched(Player(13), 'Rucr', 3)
    call SetPlayerTechResearched(Player(13), 'Ruex', 1)
    call SetPlayerTechResearched(Player(13), 'Rupm', 1)
    call SetPlayerTechResearched(Player(13), 'Rnen', 1)
    call SetPlayerTechResearched(Player(13), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(13), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(13), 'Rnat', 3)
    call SetPlayerTechResearched(Player(13), 'Rnam', 3)
    call SetPlayerTechResearched(Player(13), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(13), 'Resm', 3)
    call SetPlayerTechResearched(Player(13), 'Resw', 3)
    call SetPlayerTechResearched(Player(13), 'Rema', 3)
    call SetPlayerTechResearched(Player(13), 'Rerh', 3)
    call SetPlayerTechResearched(Player(13), 'Renb', 1)
    call SetPlayerTechResearched(Player(13), 'Reuv', 1)
    call SetPlayerTechResearched(Player(13), 'Resc', 1)
    call SetPlayerTechResearched(Player(13), 'Remg', 1)
    call SetPlayerTechResearched(Player(13), 'Reib', 1)
    call SetPlayerTechResearched(Player(13), 'Remk', 1)
    call SetPlayerTechResearched(Player(13), 'Redt', 2)
    call SetPlayerTechResearched(Player(13), 'Redc', 2)
    call SetPlayerTechResearched(Player(13), 'Resi', 1)
    call SetPlayerTechResearched(Player(13), 'Recb', 1)
    call SetPlayerTechResearched(Player(13), 'Reht', 1)
    call SetPlayerTechResearched(Player(13), 'Repb', 1)
    call SetPlayerTechResearched(Player(13), 'Rers', 1)
    call SetPlayerTechResearched(Player(13), 'Rehs', 1)
    call SetPlayerTechResearched(Player(13), 'Reeb', 1)
    call SetPlayerTechResearched(Player(13), 'Reec', 1)
    call SetPlayerTechResearched(Player(13), 'Rews', 1)
    call SetPlayerTechResearched(Player(13), 'Repm', 1)
    call SetPlayerTechResearched(Player(13), 'Rovs', 1)
    call SetPlayerTechResearched(Player(13), 'Robk', 1)
    call SetPlayerTechResearched(Player(13), 'Rosp', 3)
    call SetPlayerTechResearched(Player(13), 'Rupc', 1)
    call SetPlayerTechResearched(Player(13), 'Rusm', 1)
    call SetPlayerTechResearched(Player(13), 'Rubu', 1)
    call SetPlayerTechResearched(Player(13), 'Rusp', 1)
    call SetPlayerTechResearched(Player(13), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(13), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(13), 'Rhse', 0)
endfunction

function InitUpgrades_Player14 takes nothing returns nothing
    call SetPlayerTechResearched(Player(14), 'Rhme', 3)
    call SetPlayerTechResearched(Player(14), 'Rhra', 3)
    call SetPlayerTechResearched(Player(14), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(14), 'Rhar', 3)
    call SetPlayerTechResearched(Player(14), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(14), 'Rhac', 3)
    call SetPlayerTechResearched(Player(14), 'Rhde', 1)
    call SetPlayerTechResearched(Player(14), 'Rhan', 1)
    call SetPlayerTechResearched(Player(14), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(14), 'Rhst', 2)
    call SetPlayerTechResearched(Player(14), 'Rhla', 3)
    call SetPlayerTechResearched(Player(14), 'Rhri', 1)
    call SetPlayerTechResearched(Player(14), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(14), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(14), 'Rhss', 1)
    call SetPlayerTechResearched(Player(14), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(14), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(14), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(14), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(14), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(14), 'Rome', 3)
    call SetPlayerTechResearched(Player(14), 'Rora', 3)
    call SetPlayerTechResearched(Player(14), 'Roar', 3)
    call SetPlayerTechResearched(Player(14), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(14), 'Ropg', 1)
    call SetPlayerTechResearched(Player(14), 'Robs', 1)
    call SetPlayerTechResearched(Player(14), 'Rows', 1)
    call SetPlayerTechResearched(Player(14), 'Roen', 1)
    call SetPlayerTechResearched(Player(14), 'Rowd', 2)
    call SetPlayerTechResearched(Player(14), 'Rost', 2)
    call SetPlayerTechResearched(Player(14), 'Rotr', 1)
    call SetPlayerTechResearched(Player(14), 'Rolf', 1)
    call SetPlayerTechResearched(Player(14), 'Rowt', 2)
    call SetPlayerTechResearched(Player(14), 'Rorb', 1)
    call SetPlayerTechResearched(Player(14), 'Ropm', 1)
    call SetPlayerTechResearched(Player(14), 'Robf', 1)
    call SetPlayerTechResearched(Player(14), 'Rume', 3)
    call SetPlayerTechResearched(Player(14), 'Rura', 3)
    call SetPlayerTechResearched(Player(14), 'Ruar', 3)
    call SetPlayerTechResearched(Player(14), 'Ruac', 1)
    call SetPlayerTechResearched(Player(14), 'Rugf', 1)
    call SetPlayerTechResearched(Player(14), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(14), 'Rusf', 1)
    call SetPlayerTechResearched(Player(14), 'Rune', 2)
    call SetPlayerTechResearched(Player(14), 'Ruba', 2)
    call SetPlayerTechResearched(Player(14), 'Rufb', 1)
    call SetPlayerTechResearched(Player(14), 'Rusl', 1)
    call SetPlayerTechResearched(Player(14), 'Rucr', 3)
    call SetPlayerTechResearched(Player(14), 'Ruex', 1)
    call SetPlayerTechResearched(Player(14), 'Rupm', 1)
    call SetPlayerTechResearched(Player(14), 'Rnen', 1)
    call SetPlayerTechResearched(Player(14), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(14), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(14), 'Rnat', 3)
    call SetPlayerTechResearched(Player(14), 'Rnam', 3)
    call SetPlayerTechResearched(Player(14), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(14), 'Resm', 3)
    call SetPlayerTechResearched(Player(14), 'Resw', 3)
    call SetPlayerTechResearched(Player(14), 'Rema', 3)
    call SetPlayerTechResearched(Player(14), 'Rerh', 3)
    call SetPlayerTechResearched(Player(14), 'Renb', 1)
    call SetPlayerTechResearched(Player(14), 'Reuv', 1)
    call SetPlayerTechResearched(Player(14), 'Resc', 1)
    call SetPlayerTechResearched(Player(14), 'Remg', 1)
    call SetPlayerTechResearched(Player(14), 'Reib', 1)
    call SetPlayerTechResearched(Player(14), 'Remk', 1)
    call SetPlayerTechResearched(Player(14), 'Redt', 2)
    call SetPlayerTechResearched(Player(14), 'Redc', 2)
    call SetPlayerTechResearched(Player(14), 'Resi', 1)
    call SetPlayerTechResearched(Player(14), 'Recb', 1)
    call SetPlayerTechResearched(Player(14), 'Reht', 1)
    call SetPlayerTechResearched(Player(14), 'Repb', 1)
    call SetPlayerTechResearched(Player(14), 'Rers', 1)
    call SetPlayerTechResearched(Player(14), 'Rehs', 1)
    call SetPlayerTechResearched(Player(14), 'Reeb', 1)
    call SetPlayerTechResearched(Player(14), 'Reec', 1)
    call SetPlayerTechResearched(Player(14), 'Rews', 1)
    call SetPlayerTechResearched(Player(14), 'Repm', 1)
    call SetPlayerTechResearched(Player(14), 'Rovs', 1)
    call SetPlayerTechResearched(Player(14), 'Robk', 1)
    call SetPlayerTechResearched(Player(14), 'Rosp', 3)
    call SetPlayerTechResearched(Player(14), 'Rupc', 1)
    call SetPlayerTechResearched(Player(14), 'Rusm', 1)
    call SetPlayerTechResearched(Player(14), 'Rubu', 1)
    call SetPlayerTechResearched(Player(14), 'Rusp', 1)
    call SetPlayerTechResearched(Player(14), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(14), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(14), 'Rhse', 0)
endfunction

function InitUpgrades_Player15 takes nothing returns nothing
    call SetPlayerTechResearched(Player(15), 'Rhme', 3)
    call SetPlayerTechResearched(Player(15), 'Rhra', 3)
    call SetPlayerTechResearched(Player(15), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(15), 'Rhar', 3)
    call SetPlayerTechResearched(Player(15), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(15), 'Rhac', 3)
    call SetPlayerTechResearched(Player(15), 'Rhde', 1)
    call SetPlayerTechResearched(Player(15), 'Rhan', 1)
    call SetPlayerTechResearched(Player(15), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(15), 'Rhst', 2)
    call SetPlayerTechResearched(Player(15), 'Rhla', 3)
    call SetPlayerTechResearched(Player(15), 'Rhri', 1)
    call SetPlayerTechResearched(Player(15), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(15), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(15), 'Rhss', 1)
    call SetPlayerTechResearched(Player(15), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(15), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(15), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(15), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(15), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(15), 'Rome', 3)
    call SetPlayerTechResearched(Player(15), 'Rora', 3)
    call SetPlayerTechResearched(Player(15), 'Roar', 3)
    call SetPlayerTechResearched(Player(15), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(15), 'Ropg', 1)
    call SetPlayerTechResearched(Player(15), 'Robs', 1)
    call SetPlayerTechResearched(Player(15), 'Rows', 1)
    call SetPlayerTechResearched(Player(15), 'Roen', 1)
    call SetPlayerTechResearched(Player(15), 'Rowd', 2)
    call SetPlayerTechResearched(Player(15), 'Rost', 2)
    call SetPlayerTechResearched(Player(15), 'Rotr', 1)
    call SetPlayerTechResearched(Player(15), 'Rolf', 1)
    call SetPlayerTechResearched(Player(15), 'Rowt', 2)
    call SetPlayerTechResearched(Player(15), 'Rorb', 1)
    call SetPlayerTechResearched(Player(15), 'Ropm', 1)
    call SetPlayerTechResearched(Player(15), 'Robf', 1)
    call SetPlayerTechResearched(Player(15), 'Rume', 3)
    call SetPlayerTechResearched(Player(15), 'Rura', 3)
    call SetPlayerTechResearched(Player(15), 'Ruar', 3)
    call SetPlayerTechResearched(Player(15), 'Ruac', 1)
    call SetPlayerTechResearched(Player(15), 'Rugf', 1)
    call SetPlayerTechResearched(Player(15), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(15), 'Rusf', 1)
    call SetPlayerTechResearched(Player(15), 'Rune', 2)
    call SetPlayerTechResearched(Player(15), 'Ruba', 2)
    call SetPlayerTechResearched(Player(15), 'Rufb', 1)
    call SetPlayerTechResearched(Player(15), 'Rusl', 1)
    call SetPlayerTechResearched(Player(15), 'Rucr', 3)
    call SetPlayerTechResearched(Player(15), 'Ruex', 1)
    call SetPlayerTechResearched(Player(15), 'Rupm', 1)
    call SetPlayerTechResearched(Player(15), 'Rnen', 1)
    call SetPlayerTechResearched(Player(15), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(15), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(15), 'Rnat', 3)
    call SetPlayerTechResearched(Player(15), 'Rnam', 3)
    call SetPlayerTechResearched(Player(15), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(15), 'Resm', 3)
    call SetPlayerTechResearched(Player(15), 'Resw', 3)
    call SetPlayerTechResearched(Player(15), 'Rema', 3)
    call SetPlayerTechResearched(Player(15), 'Rerh', 3)
    call SetPlayerTechResearched(Player(15), 'Renb', 1)
    call SetPlayerTechResearched(Player(15), 'Reuv', 1)
    call SetPlayerTechResearched(Player(15), 'Resc', 1)
    call SetPlayerTechResearched(Player(15), 'Remg', 1)
    call SetPlayerTechResearched(Player(15), 'Reib', 1)
    call SetPlayerTechResearched(Player(15), 'Remk', 1)
    call SetPlayerTechResearched(Player(15), 'Redt', 2)
    call SetPlayerTechResearched(Player(15), 'Redc', 2)
    call SetPlayerTechResearched(Player(15), 'Resi', 1)
    call SetPlayerTechResearched(Player(15), 'Recb', 1)
    call SetPlayerTechResearched(Player(15), 'Reht', 1)
    call SetPlayerTechResearched(Player(15), 'Repb', 1)
    call SetPlayerTechResearched(Player(15), 'Rers', 1)
    call SetPlayerTechResearched(Player(15), 'Rehs', 1)
    call SetPlayerTechResearched(Player(15), 'Reeb', 1)
    call SetPlayerTechResearched(Player(15), 'Reec', 1)
    call SetPlayerTechResearched(Player(15), 'Rews', 1)
    call SetPlayerTechResearched(Player(15), 'Repm', 1)
    call SetPlayerTechResearched(Player(15), 'Rovs', 1)
    call SetPlayerTechResearched(Player(15), 'Robk', 1)
    call SetPlayerTechResearched(Player(15), 'Rosp', 3)
    call SetPlayerTechResearched(Player(15), 'Rupc', 1)
    call SetPlayerTechResearched(Player(15), 'Rusm', 1)
    call SetPlayerTechResearched(Player(15), 'Rubu', 1)
    call SetPlayerTechResearched(Player(15), 'Rusp', 1)
    call SetPlayerTechResearched(Player(15), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(15), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(15), 'Rhse', 0)
endfunction

function InitUpgrades_Player16 takes nothing returns nothing
    call SetPlayerTechResearched(Player(16), 'Rhme', 3)
    call SetPlayerTechResearched(Player(16), 'Rhra', 3)
    call SetPlayerTechResearched(Player(16), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(16), 'Rhar', 3)
    call SetPlayerTechResearched(Player(16), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(16), 'Rhac', 3)
    call SetPlayerTechResearched(Player(16), 'Rhde', 1)
    call SetPlayerTechResearched(Player(16), 'Rhan', 1)
    call SetPlayerTechResearched(Player(16), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(16), 'Rhst', 2)
    call SetPlayerTechResearched(Player(16), 'Rhla', 3)
    call SetPlayerTechResearched(Player(16), 'Rhri', 1)
    call SetPlayerTechResearched(Player(16), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(16), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(16), 'Rhss', 1)
    call SetPlayerTechResearched(Player(16), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(16), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(16), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(16), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(16), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(16), 'Rome', 3)
    call SetPlayerTechResearched(Player(16), 'Rora', 3)
    call SetPlayerTechResearched(Player(16), 'Roar', 3)
    call SetPlayerTechResearched(Player(16), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(16), 'Ropg', 1)
    call SetPlayerTechResearched(Player(16), 'Robs', 1)
    call SetPlayerTechResearched(Player(16), 'Rows', 1)
    call SetPlayerTechResearched(Player(16), 'Roen', 1)
    call SetPlayerTechResearched(Player(16), 'Rowd', 2)
    call SetPlayerTechResearched(Player(16), 'Rost', 2)
    call SetPlayerTechResearched(Player(16), 'Rotr', 1)
    call SetPlayerTechResearched(Player(16), 'Rolf', 1)
    call SetPlayerTechResearched(Player(16), 'Rowt', 2)
    call SetPlayerTechResearched(Player(16), 'Rorb', 1)
    call SetPlayerTechResearched(Player(16), 'Ropm', 1)
    call SetPlayerTechResearched(Player(16), 'Robf', 1)
    call SetPlayerTechResearched(Player(16), 'Rume', 3)
    call SetPlayerTechResearched(Player(16), 'Rura', 3)
    call SetPlayerTechResearched(Player(16), 'Ruar', 3)
    call SetPlayerTechResearched(Player(16), 'Ruac', 1)
    call SetPlayerTechResearched(Player(16), 'Rugf', 1)
    call SetPlayerTechResearched(Player(16), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(16), 'Rusf', 1)
    call SetPlayerTechResearched(Player(16), 'Rune', 2)
    call SetPlayerTechResearched(Player(16), 'Ruba', 2)
    call SetPlayerTechResearched(Player(16), 'Rufb', 1)
    call SetPlayerTechResearched(Player(16), 'Rusl', 1)
    call SetPlayerTechResearched(Player(16), 'Rucr', 3)
    call SetPlayerTechResearched(Player(16), 'Ruex', 1)
    call SetPlayerTechResearched(Player(16), 'Rupm', 1)
    call SetPlayerTechResearched(Player(16), 'Rnen', 1)
    call SetPlayerTechResearched(Player(16), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(16), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(16), 'Rnat', 3)
    call SetPlayerTechResearched(Player(16), 'Rnam', 3)
    call SetPlayerTechResearched(Player(16), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(16), 'Resm', 3)
    call SetPlayerTechResearched(Player(16), 'Resw', 3)
    call SetPlayerTechResearched(Player(16), 'Rema', 3)
    call SetPlayerTechResearched(Player(16), 'Rerh', 3)
    call SetPlayerTechResearched(Player(16), 'Renb', 1)
    call SetPlayerTechResearched(Player(16), 'Reuv', 1)
    call SetPlayerTechResearched(Player(16), 'Resc', 1)
    call SetPlayerTechResearched(Player(16), 'Remg', 1)
    call SetPlayerTechResearched(Player(16), 'Reib', 1)
    call SetPlayerTechResearched(Player(16), 'Remk', 1)
    call SetPlayerTechResearched(Player(16), 'Redt', 2)
    call SetPlayerTechResearched(Player(16), 'Redc', 2)
    call SetPlayerTechResearched(Player(16), 'Resi', 1)
    call SetPlayerTechResearched(Player(16), 'Recb', 1)
    call SetPlayerTechResearched(Player(16), 'Reht', 1)
    call SetPlayerTechResearched(Player(16), 'Repb', 1)
    call SetPlayerTechResearched(Player(16), 'Rers', 1)
    call SetPlayerTechResearched(Player(16), 'Rehs', 1)
    call SetPlayerTechResearched(Player(16), 'Reeb', 1)
    call SetPlayerTechResearched(Player(16), 'Reec', 1)
    call SetPlayerTechResearched(Player(16), 'Rews', 1)
    call SetPlayerTechResearched(Player(16), 'Repm', 1)
    call SetPlayerTechResearched(Player(16), 'Rovs', 1)
    call SetPlayerTechResearched(Player(16), 'Robk', 1)
    call SetPlayerTechResearched(Player(16), 'Rosp', 3)
    call SetPlayerTechResearched(Player(16), 'Rupc', 1)
    call SetPlayerTechResearched(Player(16), 'Rusm', 1)
    call SetPlayerTechResearched(Player(16), 'Rubu', 1)
    call SetPlayerTechResearched(Player(16), 'Rusp', 1)
    call SetPlayerTechResearched(Player(16), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(16), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(16), 'Rhse', 0)
endfunction

function InitUpgrades_Player17 takes nothing returns nothing
    call SetPlayerTechResearched(Player(17), 'Rhme', 3)
    call SetPlayerTechResearched(Player(17), 'Rhra', 3)
    call SetPlayerTechResearched(Player(17), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(17), 'Rhar', 3)
    call SetPlayerTechResearched(Player(17), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(17), 'Rhac', 3)
    call SetPlayerTechResearched(Player(17), 'Rhde', 1)
    call SetPlayerTechResearched(Player(17), 'Rhan', 1)
    call SetPlayerTechResearched(Player(17), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(17), 'Rhst', 2)
    call SetPlayerTechResearched(Player(17), 'Rhla', 3)
    call SetPlayerTechResearched(Player(17), 'Rhri', 1)
    call SetPlayerTechResearched(Player(17), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(17), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(17), 'Rhss', 1)
    call SetPlayerTechResearched(Player(17), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(17), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(17), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(17), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(17), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(17), 'Rome', 3)
    call SetPlayerTechResearched(Player(17), 'Rora', 3)
    call SetPlayerTechResearched(Player(17), 'Roar', 3)
    call SetPlayerTechResearched(Player(17), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(17), 'Ropg', 1)
    call SetPlayerTechResearched(Player(17), 'Robs', 1)
    call SetPlayerTechResearched(Player(17), 'Rows', 1)
    call SetPlayerTechResearched(Player(17), 'Roen', 1)
    call SetPlayerTechResearched(Player(17), 'Rowd', 2)
    call SetPlayerTechResearched(Player(17), 'Rost', 2)
    call SetPlayerTechResearched(Player(17), 'Rotr', 1)
    call SetPlayerTechResearched(Player(17), 'Rolf', 1)
    call SetPlayerTechResearched(Player(17), 'Rowt', 2)
    call SetPlayerTechResearched(Player(17), 'Rorb', 1)
    call SetPlayerTechResearched(Player(17), 'Ropm', 1)
    call SetPlayerTechResearched(Player(17), 'Robf', 1)
    call SetPlayerTechResearched(Player(17), 'Rume', 3)
    call SetPlayerTechResearched(Player(17), 'Rura', 3)
    call SetPlayerTechResearched(Player(17), 'Ruar', 3)
    call SetPlayerTechResearched(Player(17), 'Ruac', 1)
    call SetPlayerTechResearched(Player(17), 'Rugf', 1)
    call SetPlayerTechResearched(Player(17), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(17), 'Rusf', 1)
    call SetPlayerTechResearched(Player(17), 'Rune', 2)
    call SetPlayerTechResearched(Player(17), 'Ruba', 2)
    call SetPlayerTechResearched(Player(17), 'Rufb', 1)
    call SetPlayerTechResearched(Player(17), 'Rusl', 1)
    call SetPlayerTechResearched(Player(17), 'Rucr', 3)
    call SetPlayerTechResearched(Player(17), 'Ruex', 1)
    call SetPlayerTechResearched(Player(17), 'Rupm', 1)
    call SetPlayerTechResearched(Player(17), 'Rnen', 1)
    call SetPlayerTechResearched(Player(17), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(17), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(17), 'Rnat', 3)
    call SetPlayerTechResearched(Player(17), 'Rnam', 3)
    call SetPlayerTechResearched(Player(17), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(17), 'Resm', 3)
    call SetPlayerTechResearched(Player(17), 'Resw', 3)
    call SetPlayerTechResearched(Player(17), 'Rema', 3)
    call SetPlayerTechResearched(Player(17), 'Rerh', 3)
    call SetPlayerTechResearched(Player(17), 'Renb', 1)
    call SetPlayerTechResearched(Player(17), 'Reuv', 1)
    call SetPlayerTechResearched(Player(17), 'Resc', 1)
    call SetPlayerTechResearched(Player(17), 'Remg', 1)
    call SetPlayerTechResearched(Player(17), 'Reib', 1)
    call SetPlayerTechResearched(Player(17), 'Remk', 1)
    call SetPlayerTechResearched(Player(17), 'Redt', 2)
    call SetPlayerTechResearched(Player(17), 'Redc', 2)
    call SetPlayerTechResearched(Player(17), 'Resi', 1)
    call SetPlayerTechResearched(Player(17), 'Recb', 1)
    call SetPlayerTechResearched(Player(17), 'Reht', 1)
    call SetPlayerTechResearched(Player(17), 'Repb', 1)
    call SetPlayerTechResearched(Player(17), 'Rers', 1)
    call SetPlayerTechResearched(Player(17), 'Rehs', 1)
    call SetPlayerTechResearched(Player(17), 'Reeb', 1)
    call SetPlayerTechResearched(Player(17), 'Reec', 1)
    call SetPlayerTechResearched(Player(17), 'Rews', 1)
    call SetPlayerTechResearched(Player(17), 'Repm', 1)
    call SetPlayerTechResearched(Player(17), 'Rovs', 1)
    call SetPlayerTechResearched(Player(17), 'Robk', 1)
    call SetPlayerTechResearched(Player(17), 'Rosp', 3)
    call SetPlayerTechResearched(Player(17), 'Rupc', 1)
    call SetPlayerTechResearched(Player(17), 'Rusm', 1)
    call SetPlayerTechResearched(Player(17), 'Rubu', 1)
    call SetPlayerTechResearched(Player(17), 'Rusp', 1)
    call SetPlayerTechResearched(Player(17), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(17), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(17), 'Rhse', 0)
endfunction

function InitUpgrades_Player18 takes nothing returns nothing
    call SetPlayerTechResearched(Player(18), 'Rhme', 3)
    call SetPlayerTechResearched(Player(18), 'Rhra', 3)
    call SetPlayerTechResearched(Player(18), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(18), 'Rhar', 3)
    call SetPlayerTechResearched(Player(18), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(18), 'Rhac', 3)
    call SetPlayerTechResearched(Player(18), 'Rhde', 1)
    call SetPlayerTechResearched(Player(18), 'Rhan', 1)
    call SetPlayerTechResearched(Player(18), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(18), 'Rhst', 2)
    call SetPlayerTechResearched(Player(18), 'Rhla', 3)
    call SetPlayerTechResearched(Player(18), 'Rhri', 1)
    call SetPlayerTechResearched(Player(18), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(18), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(18), 'Rhss', 1)
    call SetPlayerTechResearched(Player(18), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(18), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(18), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(18), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(18), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(18), 'Rome', 3)
    call SetPlayerTechResearched(Player(18), 'Rora', 3)
    call SetPlayerTechResearched(Player(18), 'Roar', 3)
    call SetPlayerTechResearched(Player(18), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(18), 'Ropg', 1)
    call SetPlayerTechResearched(Player(18), 'Robs', 1)
    call SetPlayerTechResearched(Player(18), 'Rows', 1)
    call SetPlayerTechResearched(Player(18), 'Roen', 1)
    call SetPlayerTechResearched(Player(18), 'Rowd', 2)
    call SetPlayerTechResearched(Player(18), 'Rost', 2)
    call SetPlayerTechResearched(Player(18), 'Rotr', 1)
    call SetPlayerTechResearched(Player(18), 'Rolf', 1)
    call SetPlayerTechResearched(Player(18), 'Rowt', 2)
    call SetPlayerTechResearched(Player(18), 'Rorb', 1)
    call SetPlayerTechResearched(Player(18), 'Ropm', 1)
    call SetPlayerTechResearched(Player(18), 'Robf', 1)
    call SetPlayerTechResearched(Player(18), 'Rume', 3)
    call SetPlayerTechResearched(Player(18), 'Rura', 3)
    call SetPlayerTechResearched(Player(18), 'Ruar', 3)
    call SetPlayerTechResearched(Player(18), 'Ruac', 1)
    call SetPlayerTechResearched(Player(18), 'Rugf', 1)
    call SetPlayerTechResearched(Player(18), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(18), 'Rusf', 1)
    call SetPlayerTechResearched(Player(18), 'Rune', 2)
    call SetPlayerTechResearched(Player(18), 'Ruba', 2)
    call SetPlayerTechResearched(Player(18), 'Rufb', 1)
    call SetPlayerTechResearched(Player(18), 'Rusl', 1)
    call SetPlayerTechResearched(Player(18), 'Rucr', 3)
    call SetPlayerTechResearched(Player(18), 'Ruex', 1)
    call SetPlayerTechResearched(Player(18), 'Rupm', 1)
    call SetPlayerTechResearched(Player(18), 'Rnen', 1)
    call SetPlayerTechResearched(Player(18), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(18), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(18), 'Rnat', 3)
    call SetPlayerTechResearched(Player(18), 'Rnam', 3)
    call SetPlayerTechResearched(Player(18), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(18), 'Resm', 3)
    call SetPlayerTechResearched(Player(18), 'Resw', 3)
    call SetPlayerTechResearched(Player(18), 'Rema', 3)
    call SetPlayerTechResearched(Player(18), 'Rerh', 3)
    call SetPlayerTechResearched(Player(18), 'Renb', 1)
    call SetPlayerTechResearched(Player(18), 'Reuv', 1)
    call SetPlayerTechResearched(Player(18), 'Resc', 1)
    call SetPlayerTechResearched(Player(18), 'Remg', 1)
    call SetPlayerTechResearched(Player(18), 'Reib', 1)
    call SetPlayerTechResearched(Player(18), 'Remk', 1)
    call SetPlayerTechResearched(Player(18), 'Redt', 2)
    call SetPlayerTechResearched(Player(18), 'Redc', 2)
    call SetPlayerTechResearched(Player(18), 'Resi', 1)
    call SetPlayerTechResearched(Player(18), 'Recb', 1)
    call SetPlayerTechResearched(Player(18), 'Reht', 1)
    call SetPlayerTechResearched(Player(18), 'Repb', 1)
    call SetPlayerTechResearched(Player(18), 'Rers', 1)
    call SetPlayerTechResearched(Player(18), 'Rehs', 1)
    call SetPlayerTechResearched(Player(18), 'Reeb', 1)
    call SetPlayerTechResearched(Player(18), 'Reec', 1)
    call SetPlayerTechResearched(Player(18), 'Rews', 1)
    call SetPlayerTechResearched(Player(18), 'Repm', 1)
    call SetPlayerTechResearched(Player(18), 'Rovs', 1)
    call SetPlayerTechResearched(Player(18), 'Robk', 1)
    call SetPlayerTechResearched(Player(18), 'Rosp', 3)
    call SetPlayerTechResearched(Player(18), 'Rupc', 1)
    call SetPlayerTechResearched(Player(18), 'Rusm', 1)
    call SetPlayerTechResearched(Player(18), 'Rubu', 1)
    call SetPlayerTechResearched(Player(18), 'Rusp', 1)
    call SetPlayerTechResearched(Player(18), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(18), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(18), 'Rhse', 0)
endfunction

function InitUpgrades_Player19 takes nothing returns nothing
    call SetPlayerTechResearched(Player(19), 'Rhme', 3)
    call SetPlayerTechResearched(Player(19), 'Rhra', 3)
    call SetPlayerTechResearched(Player(19), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(19), 'Rhar', 3)
    call SetPlayerTechResearched(Player(19), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(19), 'Rhac', 3)
    call SetPlayerTechResearched(Player(19), 'Rhde', 1)
    call SetPlayerTechResearched(Player(19), 'Rhan', 1)
    call SetPlayerTechResearched(Player(19), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(19), 'Rhst', 2)
    call SetPlayerTechResearched(Player(19), 'Rhla', 3)
    call SetPlayerTechResearched(Player(19), 'Rhri', 1)
    call SetPlayerTechResearched(Player(19), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(19), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(19), 'Rhss', 1)
    call SetPlayerTechResearched(Player(19), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(19), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(19), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(19), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(19), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(19), 'Rome', 3)
    call SetPlayerTechResearched(Player(19), 'Rora', 3)
    call SetPlayerTechResearched(Player(19), 'Roar', 3)
    call SetPlayerTechResearched(Player(19), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(19), 'Ropg', 1)
    call SetPlayerTechResearched(Player(19), 'Robs', 1)
    call SetPlayerTechResearched(Player(19), 'Rows', 1)
    call SetPlayerTechResearched(Player(19), 'Roen', 1)
    call SetPlayerTechResearched(Player(19), 'Rowd', 2)
    call SetPlayerTechResearched(Player(19), 'Rost', 2)
    call SetPlayerTechResearched(Player(19), 'Rotr', 1)
    call SetPlayerTechResearched(Player(19), 'Rolf', 1)
    call SetPlayerTechResearched(Player(19), 'Rowt', 2)
    call SetPlayerTechResearched(Player(19), 'Rorb', 1)
    call SetPlayerTechResearched(Player(19), 'Ropm', 1)
    call SetPlayerTechResearched(Player(19), 'Robf', 1)
    call SetPlayerTechResearched(Player(19), 'Rume', 3)
    call SetPlayerTechResearched(Player(19), 'Rura', 3)
    call SetPlayerTechResearched(Player(19), 'Ruar', 3)
    call SetPlayerTechResearched(Player(19), 'Ruac', 1)
    call SetPlayerTechResearched(Player(19), 'Rugf', 1)
    call SetPlayerTechResearched(Player(19), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(19), 'Rusf', 1)
    call SetPlayerTechResearched(Player(19), 'Rune', 2)
    call SetPlayerTechResearched(Player(19), 'Ruba', 2)
    call SetPlayerTechResearched(Player(19), 'Rufb', 1)
    call SetPlayerTechResearched(Player(19), 'Rusl', 1)
    call SetPlayerTechResearched(Player(19), 'Rucr', 3)
    call SetPlayerTechResearched(Player(19), 'Ruex', 1)
    call SetPlayerTechResearched(Player(19), 'Rupm', 1)
    call SetPlayerTechResearched(Player(19), 'Rnen', 1)
    call SetPlayerTechResearched(Player(19), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(19), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(19), 'Rnat', 3)
    call SetPlayerTechResearched(Player(19), 'Rnam', 3)
    call SetPlayerTechResearched(Player(19), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(19), 'Resm', 3)
    call SetPlayerTechResearched(Player(19), 'Resw', 3)
    call SetPlayerTechResearched(Player(19), 'Rema', 3)
    call SetPlayerTechResearched(Player(19), 'Rerh', 3)
    call SetPlayerTechResearched(Player(19), 'Renb', 1)
    call SetPlayerTechResearched(Player(19), 'Reuv', 1)
    call SetPlayerTechResearched(Player(19), 'Resc', 1)
    call SetPlayerTechResearched(Player(19), 'Remg', 1)
    call SetPlayerTechResearched(Player(19), 'Reib', 1)
    call SetPlayerTechResearched(Player(19), 'Remk', 1)
    call SetPlayerTechResearched(Player(19), 'Redt', 2)
    call SetPlayerTechResearched(Player(19), 'Redc', 2)
    call SetPlayerTechResearched(Player(19), 'Resi', 1)
    call SetPlayerTechResearched(Player(19), 'Recb', 1)
    call SetPlayerTechResearched(Player(19), 'Reht', 1)
    call SetPlayerTechResearched(Player(19), 'Repb', 1)
    call SetPlayerTechResearched(Player(19), 'Rers', 1)
    call SetPlayerTechResearched(Player(19), 'Rehs', 1)
    call SetPlayerTechResearched(Player(19), 'Reeb', 1)
    call SetPlayerTechResearched(Player(19), 'Reec', 1)
    call SetPlayerTechResearched(Player(19), 'Rews', 1)
    call SetPlayerTechResearched(Player(19), 'Repm', 1)
    call SetPlayerTechResearched(Player(19), 'Rovs', 1)
    call SetPlayerTechResearched(Player(19), 'Robk', 1)
    call SetPlayerTechResearched(Player(19), 'Rosp', 3)
    call SetPlayerTechResearched(Player(19), 'Rupc', 1)
    call SetPlayerTechResearched(Player(19), 'Rusm', 1)
    call SetPlayerTechResearched(Player(19), 'Rubu', 1)
    call SetPlayerTechResearched(Player(19), 'Rusp', 1)
    call SetPlayerTechResearched(Player(19), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(19), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(19), 'Rhse', 0)
endfunction

function InitUpgrades_Player20 takes nothing returns nothing
    call SetPlayerTechResearched(Player(20), 'Rhme', 3)
    call SetPlayerTechResearched(Player(20), 'Rhra', 3)
    call SetPlayerTechResearched(Player(20), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(20), 'Rhar', 3)
    call SetPlayerTechResearched(Player(20), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(20), 'Rhac', 3)
    call SetPlayerTechResearched(Player(20), 'Rhde', 1)
    call SetPlayerTechResearched(Player(20), 'Rhan', 1)
    call SetPlayerTechResearched(Player(20), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(20), 'Rhst', 2)
    call SetPlayerTechResearched(Player(20), 'Rhla', 3)
    call SetPlayerTechResearched(Player(20), 'Rhri', 1)
    call SetPlayerTechResearched(Player(20), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(20), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(20), 'Rhss', 1)
    call SetPlayerTechResearched(Player(20), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(20), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(20), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(20), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(20), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(20), 'Rome', 3)
    call SetPlayerTechResearched(Player(20), 'Rora', 3)
    call SetPlayerTechResearched(Player(20), 'Roar', 3)
    call SetPlayerTechResearched(Player(20), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(20), 'Ropg', 1)
    call SetPlayerTechResearched(Player(20), 'Robs', 1)
    call SetPlayerTechResearched(Player(20), 'Rows', 1)
    call SetPlayerTechResearched(Player(20), 'Roen', 1)
    call SetPlayerTechResearched(Player(20), 'Rowd', 2)
    call SetPlayerTechResearched(Player(20), 'Rost', 2)
    call SetPlayerTechResearched(Player(20), 'Rotr', 1)
    call SetPlayerTechResearched(Player(20), 'Rolf', 1)
    call SetPlayerTechResearched(Player(20), 'Rowt', 2)
    call SetPlayerTechResearched(Player(20), 'Rorb', 1)
    call SetPlayerTechResearched(Player(20), 'Ropm', 1)
    call SetPlayerTechResearched(Player(20), 'Robf', 1)
    call SetPlayerTechResearched(Player(20), 'Rume', 3)
    call SetPlayerTechResearched(Player(20), 'Rura', 3)
    call SetPlayerTechResearched(Player(20), 'Ruar', 3)
    call SetPlayerTechResearched(Player(20), 'Ruac', 1)
    call SetPlayerTechResearched(Player(20), 'Rugf', 1)
    call SetPlayerTechResearched(Player(20), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(20), 'Rusf', 1)
    call SetPlayerTechResearched(Player(20), 'Rune', 2)
    call SetPlayerTechResearched(Player(20), 'Ruba', 2)
    call SetPlayerTechResearched(Player(20), 'Rufb', 1)
    call SetPlayerTechResearched(Player(20), 'Rusl', 1)
    call SetPlayerTechResearched(Player(20), 'Rucr', 3)
    call SetPlayerTechResearched(Player(20), 'Ruex', 1)
    call SetPlayerTechResearched(Player(20), 'Rupm', 1)
    call SetPlayerTechResearched(Player(20), 'Rnen', 1)
    call SetPlayerTechResearched(Player(20), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(20), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(20), 'Rnat', 3)
    call SetPlayerTechResearched(Player(20), 'Rnam', 3)
    call SetPlayerTechResearched(Player(20), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(20), 'Resm', 3)
    call SetPlayerTechResearched(Player(20), 'Resw', 3)
    call SetPlayerTechResearched(Player(20), 'Rema', 3)
    call SetPlayerTechResearched(Player(20), 'Rerh', 3)
    call SetPlayerTechResearched(Player(20), 'Renb', 1)
    call SetPlayerTechResearched(Player(20), 'Reuv', 1)
    call SetPlayerTechResearched(Player(20), 'Resc', 1)
    call SetPlayerTechResearched(Player(20), 'Remg', 1)
    call SetPlayerTechResearched(Player(20), 'Reib', 1)
    call SetPlayerTechResearched(Player(20), 'Remk', 1)
    call SetPlayerTechResearched(Player(20), 'Redt', 2)
    call SetPlayerTechResearched(Player(20), 'Redc', 2)
    call SetPlayerTechResearched(Player(20), 'Resi', 1)
    call SetPlayerTechResearched(Player(20), 'Recb', 1)
    call SetPlayerTechResearched(Player(20), 'Reht', 1)
    call SetPlayerTechResearched(Player(20), 'Repb', 1)
    call SetPlayerTechResearched(Player(20), 'Rers', 1)
    call SetPlayerTechResearched(Player(20), 'Rehs', 1)
    call SetPlayerTechResearched(Player(20), 'Reeb', 1)
    call SetPlayerTechResearched(Player(20), 'Reec', 1)
    call SetPlayerTechResearched(Player(20), 'Rews', 1)
    call SetPlayerTechResearched(Player(20), 'Repm', 1)
    call SetPlayerTechResearched(Player(20), 'Rovs', 1)
    call SetPlayerTechResearched(Player(20), 'Robk', 1)
    call SetPlayerTechResearched(Player(20), 'Rosp', 3)
    call SetPlayerTechResearched(Player(20), 'Rupc', 1)
    call SetPlayerTechResearched(Player(20), 'Rusm', 1)
    call SetPlayerTechResearched(Player(20), 'Rubu', 1)
    call SetPlayerTechResearched(Player(20), 'Rusp', 1)
    call SetPlayerTechResearched(Player(20), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(20), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(20), 'Rhse', 0)
endfunction

function InitUpgrades_Player21 takes nothing returns nothing
    call SetPlayerTechResearched(Player(21), 'Rhme', 3)
    call SetPlayerTechResearched(Player(21), 'Rhra', 3)
    call SetPlayerTechResearched(Player(21), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(21), 'Rhar', 3)
    call SetPlayerTechResearched(Player(21), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(21), 'Rhac', 3)
    call SetPlayerTechResearched(Player(21), 'Rhde', 1)
    call SetPlayerTechResearched(Player(21), 'Rhan', 1)
    call SetPlayerTechResearched(Player(21), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(21), 'Rhst', 2)
    call SetPlayerTechResearched(Player(21), 'Rhla', 3)
    call SetPlayerTechResearched(Player(21), 'Rhri', 1)
    call SetPlayerTechResearched(Player(21), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(21), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(21), 'Rhss', 1)
    call SetPlayerTechResearched(Player(21), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(21), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(21), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(21), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(21), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(21), 'Rome', 3)
    call SetPlayerTechResearched(Player(21), 'Rora', 3)
    call SetPlayerTechResearched(Player(21), 'Roar', 3)
    call SetPlayerTechResearched(Player(21), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(21), 'Ropg', 1)
    call SetPlayerTechResearched(Player(21), 'Robs', 1)
    call SetPlayerTechResearched(Player(21), 'Rows', 1)
    call SetPlayerTechResearched(Player(21), 'Roen', 1)
    call SetPlayerTechResearched(Player(21), 'Rowd', 2)
    call SetPlayerTechResearched(Player(21), 'Rost', 2)
    call SetPlayerTechResearched(Player(21), 'Rotr', 1)
    call SetPlayerTechResearched(Player(21), 'Rolf', 1)
    call SetPlayerTechResearched(Player(21), 'Rowt', 2)
    call SetPlayerTechResearched(Player(21), 'Rorb', 1)
    call SetPlayerTechResearched(Player(21), 'Ropm', 1)
    call SetPlayerTechResearched(Player(21), 'Robf', 1)
    call SetPlayerTechResearched(Player(21), 'Rume', 3)
    call SetPlayerTechResearched(Player(21), 'Rura', 3)
    call SetPlayerTechResearched(Player(21), 'Ruar', 3)
    call SetPlayerTechResearched(Player(21), 'Ruac', 1)
    call SetPlayerTechResearched(Player(21), 'Rugf', 1)
    call SetPlayerTechResearched(Player(21), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(21), 'Rusf', 1)
    call SetPlayerTechResearched(Player(21), 'Rune', 2)
    call SetPlayerTechResearched(Player(21), 'Ruba', 2)
    call SetPlayerTechResearched(Player(21), 'Rufb', 1)
    call SetPlayerTechResearched(Player(21), 'Rusl', 1)
    call SetPlayerTechResearched(Player(21), 'Rucr', 3)
    call SetPlayerTechResearched(Player(21), 'Ruex', 1)
    call SetPlayerTechResearched(Player(21), 'Rupm', 1)
    call SetPlayerTechResearched(Player(21), 'Rnen', 1)
    call SetPlayerTechResearched(Player(21), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(21), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(21), 'Rnat', 3)
    call SetPlayerTechResearched(Player(21), 'Rnam', 3)
    call SetPlayerTechResearched(Player(21), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(21), 'Resm', 3)
    call SetPlayerTechResearched(Player(21), 'Resw', 3)
    call SetPlayerTechResearched(Player(21), 'Rema', 3)
    call SetPlayerTechResearched(Player(21), 'Rerh', 3)
    call SetPlayerTechResearched(Player(21), 'Renb', 1)
    call SetPlayerTechResearched(Player(21), 'Reuv', 1)
    call SetPlayerTechResearched(Player(21), 'Resc', 1)
    call SetPlayerTechResearched(Player(21), 'Remg', 1)
    call SetPlayerTechResearched(Player(21), 'Reib', 1)
    call SetPlayerTechResearched(Player(21), 'Remk', 1)
    call SetPlayerTechResearched(Player(21), 'Redt', 2)
    call SetPlayerTechResearched(Player(21), 'Redc', 2)
    call SetPlayerTechResearched(Player(21), 'Resi', 1)
    call SetPlayerTechResearched(Player(21), 'Recb', 1)
    call SetPlayerTechResearched(Player(21), 'Reht', 1)
    call SetPlayerTechResearched(Player(21), 'Repb', 1)
    call SetPlayerTechResearched(Player(21), 'Rers', 1)
    call SetPlayerTechResearched(Player(21), 'Rehs', 1)
    call SetPlayerTechResearched(Player(21), 'Reeb', 1)
    call SetPlayerTechResearched(Player(21), 'Reec', 1)
    call SetPlayerTechResearched(Player(21), 'Rews', 1)
    call SetPlayerTechResearched(Player(21), 'Repm', 1)
    call SetPlayerTechResearched(Player(21), 'Rovs', 1)
    call SetPlayerTechResearched(Player(21), 'Robk', 1)
    call SetPlayerTechResearched(Player(21), 'Rosp', 3)
    call SetPlayerTechResearched(Player(21), 'Rupc', 1)
    call SetPlayerTechResearched(Player(21), 'Rusm', 1)
    call SetPlayerTechResearched(Player(21), 'Rubu', 1)
    call SetPlayerTechResearched(Player(21), 'Rusp', 1)
    call SetPlayerTechResearched(Player(21), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(21), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(21), 'Rhse', 0)
endfunction

function InitUpgrades_Player22 takes nothing returns nothing
    call SetPlayerTechResearched(Player(22), 'Rhme', 3)
    call SetPlayerTechResearched(Player(22), 'Rhra', 3)
    call SetPlayerTechResearched(Player(22), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(22), 'Rhar', 3)
    call SetPlayerTechResearched(Player(22), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(22), 'Rhac', 3)
    call SetPlayerTechResearched(Player(22), 'Rhde', 1)
    call SetPlayerTechResearched(Player(22), 'Rhan', 1)
    call SetPlayerTechResearched(Player(22), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(22), 'Rhst', 2)
    call SetPlayerTechResearched(Player(22), 'Rhla', 3)
    call SetPlayerTechResearched(Player(22), 'Rhri', 1)
    call SetPlayerTechResearched(Player(22), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(22), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(22), 'Rhss', 1)
    call SetPlayerTechResearched(Player(22), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(22), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(22), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(22), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(22), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(22), 'Rome', 3)
    call SetPlayerTechResearched(Player(22), 'Rora', 3)
    call SetPlayerTechResearched(Player(22), 'Roar', 3)
    call SetPlayerTechResearched(Player(22), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(22), 'Ropg', 1)
    call SetPlayerTechResearched(Player(22), 'Robs', 1)
    call SetPlayerTechResearched(Player(22), 'Rows', 1)
    call SetPlayerTechResearched(Player(22), 'Roen', 1)
    call SetPlayerTechResearched(Player(22), 'Rowd', 2)
    call SetPlayerTechResearched(Player(22), 'Rost', 2)
    call SetPlayerTechResearched(Player(22), 'Rotr', 1)
    call SetPlayerTechResearched(Player(22), 'Rolf', 1)
    call SetPlayerTechResearched(Player(22), 'Rowt', 2)
    call SetPlayerTechResearched(Player(22), 'Rorb', 1)
    call SetPlayerTechResearched(Player(22), 'Ropm', 1)
    call SetPlayerTechResearched(Player(22), 'Robf', 1)
    call SetPlayerTechResearched(Player(22), 'Rume', 3)
    call SetPlayerTechResearched(Player(22), 'Rura', 3)
    call SetPlayerTechResearched(Player(22), 'Ruar', 3)
    call SetPlayerTechResearched(Player(22), 'Ruac', 1)
    call SetPlayerTechResearched(Player(22), 'Rugf', 1)
    call SetPlayerTechResearched(Player(22), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(22), 'Rusf', 1)
    call SetPlayerTechResearched(Player(22), 'Rune', 2)
    call SetPlayerTechResearched(Player(22), 'Ruba', 2)
    call SetPlayerTechResearched(Player(22), 'Rufb', 1)
    call SetPlayerTechResearched(Player(22), 'Rusl', 1)
    call SetPlayerTechResearched(Player(22), 'Rucr', 3)
    call SetPlayerTechResearched(Player(22), 'Ruex', 1)
    call SetPlayerTechResearched(Player(22), 'Rupm', 1)
    call SetPlayerTechResearched(Player(22), 'Rnen', 1)
    call SetPlayerTechResearched(Player(22), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(22), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(22), 'Rnat', 3)
    call SetPlayerTechResearched(Player(22), 'Rnam', 3)
    call SetPlayerTechResearched(Player(22), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(22), 'Resm', 3)
    call SetPlayerTechResearched(Player(22), 'Resw', 3)
    call SetPlayerTechResearched(Player(22), 'Rema', 3)
    call SetPlayerTechResearched(Player(22), 'Rerh', 3)
    call SetPlayerTechResearched(Player(22), 'Renb', 1)
    call SetPlayerTechResearched(Player(22), 'Reuv', 1)
    call SetPlayerTechResearched(Player(22), 'Resc', 1)
    call SetPlayerTechResearched(Player(22), 'Remg', 1)
    call SetPlayerTechResearched(Player(22), 'Reib', 1)
    call SetPlayerTechResearched(Player(22), 'Remk', 1)
    call SetPlayerTechResearched(Player(22), 'Redt', 2)
    call SetPlayerTechResearched(Player(22), 'Redc', 2)
    call SetPlayerTechResearched(Player(22), 'Resi', 1)
    call SetPlayerTechResearched(Player(22), 'Recb', 1)
    call SetPlayerTechResearched(Player(22), 'Reht', 1)
    call SetPlayerTechResearched(Player(22), 'Repb', 1)
    call SetPlayerTechResearched(Player(22), 'Rers', 1)
    call SetPlayerTechResearched(Player(22), 'Rehs', 1)
    call SetPlayerTechResearched(Player(22), 'Reeb', 1)
    call SetPlayerTechResearched(Player(22), 'Reec', 1)
    call SetPlayerTechResearched(Player(22), 'Rews', 1)
    call SetPlayerTechResearched(Player(22), 'Repm', 1)
    call SetPlayerTechResearched(Player(22), 'Rovs', 1)
    call SetPlayerTechResearched(Player(22), 'Robk', 1)
    call SetPlayerTechResearched(Player(22), 'Rosp', 3)
    call SetPlayerTechResearched(Player(22), 'Rupc', 1)
    call SetPlayerTechResearched(Player(22), 'Rusm', 1)
    call SetPlayerTechResearched(Player(22), 'Rubu', 1)
    call SetPlayerTechResearched(Player(22), 'Rusp', 1)
    call SetPlayerTechResearched(Player(22), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(22), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(22), 'Rhse', 0)
endfunction

function InitUpgrades_Player23 takes nothing returns nothing
    call SetPlayerTechResearched(Player(23), 'Rhme', 3)
    call SetPlayerTechResearched(Player(23), 'Rhra', 3)
    call SetPlayerTechResearched(Player(23), 'Rhhb', 1)
    call SetPlayerTechResearched(Player(23), 'Rhar', 3)
    call SetPlayerTechResearched(Player(23), 'Rhgb', 1)
    call SetPlayerTechResearched(Player(23), 'Rhac', 3)
    call SetPlayerTechResearched(Player(23), 'Rhde', 1)
    call SetPlayerTechResearched(Player(23), 'Rhan', 1)
    call SetPlayerTechResearched(Player(23), 'Rhpt', 2)
    call SetPlayerTechResearched(Player(23), 'Rhst', 2)
    call SetPlayerTechResearched(Player(23), 'Rhla', 3)
    call SetPlayerTechResearched(Player(23), 'Rhri', 1)
    call SetPlayerTechResearched(Player(23), 'Rhlh', 2)
    call SetPlayerTechResearched(Player(23), 'Rhfl', 1)
    call SetPlayerTechResearched(Player(23), 'Rhss', 1)
    call SetPlayerTechResearched(Player(23), 'Rhrt', 1)
    call SetPlayerTechResearched(Player(23), 'Rhpm', 1)
    call SetPlayerTechResearched(Player(23), 'Rhfc', 1)
    call SetPlayerTechResearched(Player(23), 'Rhfs', 1)
    call SetPlayerTechResearched(Player(23), 'Rhcd', 1)
    call SetPlayerTechResearched(Player(23), 'Rome', 3)
    call SetPlayerTechResearched(Player(23), 'Rora', 3)
    call SetPlayerTechResearched(Player(23), 'Roar', 3)
    call SetPlayerTechResearched(Player(23), 'Rwdm', 1)
    call SetPlayerTechResearched(Player(23), 'Ropg', 1)
    call SetPlayerTechResearched(Player(23), 'Robs', 1)
    call SetPlayerTechResearched(Player(23), 'Rows', 1)
    call SetPlayerTechResearched(Player(23), 'Roen', 1)
    call SetPlayerTechResearched(Player(23), 'Rowd', 2)
    call SetPlayerTechResearched(Player(23), 'Rost', 2)
    call SetPlayerTechResearched(Player(23), 'Rotr', 1)
    call SetPlayerTechResearched(Player(23), 'Rolf', 1)
    call SetPlayerTechResearched(Player(23), 'Rowt', 2)
    call SetPlayerTechResearched(Player(23), 'Rorb', 1)
    call SetPlayerTechResearched(Player(23), 'Ropm', 1)
    call SetPlayerTechResearched(Player(23), 'Robf', 1)
    call SetPlayerTechResearched(Player(23), 'Rume', 3)
    call SetPlayerTechResearched(Player(23), 'Rura', 3)
    call SetPlayerTechResearched(Player(23), 'Ruar', 3)
    call SetPlayerTechResearched(Player(23), 'Ruac', 1)
    call SetPlayerTechResearched(Player(23), 'Rugf', 1)
    call SetPlayerTechResearched(Player(23), 'Ruwb', 1)
    call SetPlayerTechResearched(Player(23), 'Rusf', 1)
    call SetPlayerTechResearched(Player(23), 'Rune', 2)
    call SetPlayerTechResearched(Player(23), 'Ruba', 2)
    call SetPlayerTechResearched(Player(23), 'Rufb', 1)
    call SetPlayerTechResearched(Player(23), 'Rusl', 1)
    call SetPlayerTechResearched(Player(23), 'Rucr', 3)
    call SetPlayerTechResearched(Player(23), 'Ruex', 1)
    call SetPlayerTechResearched(Player(23), 'Rupm', 1)
    call SetPlayerTechResearched(Player(23), 'Rnen', 1)
    call SetPlayerTechResearched(Player(23), 'Rnsw', 2)
    call SetPlayerTechResearched(Player(23), 'Rnsi', 1)
    call SetPlayerTechResearched(Player(23), 'Rnat', 3)
    call SetPlayerTechResearched(Player(23), 'Rnam', 3)
    call SetPlayerTechResearched(Player(23), 'Rnsb', 1)
    call SetPlayerTechResearched(Player(23), 'Resm', 3)
    call SetPlayerTechResearched(Player(23), 'Resw', 3)
    call SetPlayerTechResearched(Player(23), 'Rema', 3)
    call SetPlayerTechResearched(Player(23), 'Rerh', 3)
    call SetPlayerTechResearched(Player(23), 'Renb', 1)
    call SetPlayerTechResearched(Player(23), 'Reuv', 1)
    call SetPlayerTechResearched(Player(23), 'Resc', 1)
    call SetPlayerTechResearched(Player(23), 'Remg', 1)
    call SetPlayerTechResearched(Player(23), 'Reib', 1)
    call SetPlayerTechResearched(Player(23), 'Remk', 1)
    call SetPlayerTechResearched(Player(23), 'Redt', 2)
    call SetPlayerTechResearched(Player(23), 'Redc', 2)
    call SetPlayerTechResearched(Player(23), 'Resi', 1)
    call SetPlayerTechResearched(Player(23), 'Recb', 1)
    call SetPlayerTechResearched(Player(23), 'Reht', 1)
    call SetPlayerTechResearched(Player(23), 'Repb', 1)
    call SetPlayerTechResearched(Player(23), 'Rers', 1)
    call SetPlayerTechResearched(Player(23), 'Rehs', 1)
    call SetPlayerTechResearched(Player(23), 'Reeb', 1)
    call SetPlayerTechResearched(Player(23), 'Reec', 1)
    call SetPlayerTechResearched(Player(23), 'Rews', 1)
    call SetPlayerTechResearched(Player(23), 'Repm', 1)
    call SetPlayerTechResearched(Player(23), 'Rovs', 1)
    call SetPlayerTechResearched(Player(23), 'Robk', 1)
    call SetPlayerTechResearched(Player(23), 'Rosp', 3)
    call SetPlayerTechResearched(Player(23), 'Rupc', 1)
    call SetPlayerTechResearched(Player(23), 'Rusm', 1)
    call SetPlayerTechResearched(Player(23), 'Rubu', 1)
    call SetPlayerTechResearched(Player(23), 'Rusp', 1)
    call SetPlayerTechResearched(Player(23), 'Rgfo', 3)
    call SetPlayerTechResearched(Player(23), 'Rguv', 1)
    call SetPlayerTechMaxAllowed(Player(23), 'Rhse', 0)
endfunction

function InitUpgrades takes nothing returns nothing
    call InitUpgrades_Player0()
    call InitUpgrades_Player1()
    call InitUpgrades_Player2()
    call InitUpgrades_Player3()
    call InitUpgrades_Player4()
    call InitUpgrades_Player5()
    call InitUpgrades_Player6()
    call InitUpgrades_Player7()
    call InitUpgrades_Player8()
    call InitUpgrades_Player9()
    call InitUpgrades_Player10()
    call InitUpgrades_Player11()
    call InitUpgrades_Player12()
    call InitUpgrades_Player13()
    call InitUpgrades_Player14()
    call InitUpgrades_Player15()
    call InitUpgrades_Player16()
    call InitUpgrades_Player17()
    call InitUpgrades_Player18()
    call InitUpgrades_Player19()
    call InitUpgrades_Player20()
    call InitUpgrades_Player21()
    call InitUpgrades_Player22()
    call InitUpgrades_Player23()
endfunction

//***************************************************************************
//*
//*  Players
//*
//***************************************************************************

function InitCustomPlayerSlots takes nothing returns nothing

    // Player 0
    call SetPlayerStartLocation(Player(0), 0)
    call ForcePlayerStartLocation(Player(0), 0)
    call SetPlayerColor(Player(0), ConvertPlayerColor(0))
    call SetPlayerRacePreference(Player(0), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(0), false)
    call SetPlayerController(Player(0), MAP_CONTROL_USER)

    // Player 1
    call SetPlayerStartLocation(Player(1), 1)
    call ForcePlayerStartLocation(Player(1), 1)
    call SetPlayerColor(Player(1), ConvertPlayerColor(1))
    call SetPlayerRacePreference(Player(1), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(1), false)
    call SetPlayerController(Player(1), MAP_CONTROL_USER)

    // Player 2
    call SetPlayerStartLocation(Player(2), 2)
    call ForcePlayerStartLocation(Player(2), 2)
    call SetPlayerColor(Player(2), ConvertPlayerColor(2))
    call SetPlayerRacePreference(Player(2), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(2), false)
    call SetPlayerController(Player(2), MAP_CONTROL_USER)

    // Player 3
    call SetPlayerStartLocation(Player(3), 3)
    call ForcePlayerStartLocation(Player(3), 3)
    call SetPlayerColor(Player(3), ConvertPlayerColor(3))
    call SetPlayerRacePreference(Player(3), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(3), false)
    call SetPlayerController(Player(3), MAP_CONTROL_USER)

    // Player 4
    call SetPlayerStartLocation(Player(4), 4)
    call ForcePlayerStartLocation(Player(4), 4)
    call SetPlayerColor(Player(4), ConvertPlayerColor(4))
    call SetPlayerRacePreference(Player(4), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(4), false)
    call SetPlayerController(Player(4), MAP_CONTROL_USER)

    // Player 5
    call SetPlayerStartLocation(Player(5), 5)
    call ForcePlayerStartLocation(Player(5), 5)
    call SetPlayerColor(Player(5), ConvertPlayerColor(5))
    call SetPlayerRacePreference(Player(5), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(5), false)
    call SetPlayerController(Player(5), MAP_CONTROL_USER)

    // Player 6
    call SetPlayerStartLocation(Player(6), 6)
    call ForcePlayerStartLocation(Player(6), 6)
    call SetPlayerColor(Player(6), ConvertPlayerColor(6))
    call SetPlayerRacePreference(Player(6), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(6), false)
    call SetPlayerController(Player(6), MAP_CONTROL_USER)

    // Player 7
    call SetPlayerStartLocation(Player(7), 7)
    call ForcePlayerStartLocation(Player(7), 7)
    call SetPlayerColor(Player(7), ConvertPlayerColor(7))
    call SetPlayerRacePreference(Player(7), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(7), false)
    call SetPlayerController(Player(7), MAP_CONTROL_USER)

    // Player 8
    call SetPlayerStartLocation(Player(8), 8)
    call ForcePlayerStartLocation(Player(8), 8)
    call SetPlayerColor(Player(8), ConvertPlayerColor(8))
    call SetPlayerRacePreference(Player(8), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(8), false)
    call SetPlayerController(Player(8), MAP_CONTROL_USER)

    // Player 9
    call SetPlayerStartLocation(Player(9), 9)
    call ForcePlayerStartLocation(Player(9), 9)
    call SetPlayerColor(Player(9), ConvertPlayerColor(9))
    call SetPlayerRacePreference(Player(9), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(9), false)
    call SetPlayerController(Player(9), MAP_CONTROL_USER)

    // Player 10
    call SetPlayerStartLocation(Player(10), 10)
    call ForcePlayerStartLocation(Player(10), 10)
    call SetPlayerColor(Player(10), ConvertPlayerColor(10))
    call SetPlayerRacePreference(Player(10), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(10), false)
    call SetPlayerController(Player(10), MAP_CONTROL_USER)

    // Player 11
    call SetPlayerStartLocation(Player(11), 11)
    call ForcePlayerStartLocation(Player(11), 11)
    call SetPlayerColor(Player(11), ConvertPlayerColor(11))
    call SetPlayerRacePreference(Player(11), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(11), false)
    call SetPlayerController(Player(11), MAP_CONTROL_USER)

    // Player 12
    call SetPlayerStartLocation(Player(12), 12)
    call ForcePlayerStartLocation(Player(12), 12)
    call SetPlayerColor(Player(12), ConvertPlayerColor(12))
    call SetPlayerRacePreference(Player(12), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(12), false)
    call SetPlayerController(Player(12), MAP_CONTROL_USER)

    // Player 13
    call SetPlayerStartLocation(Player(13), 13)
    call ForcePlayerStartLocation(Player(13), 13)
    call SetPlayerColor(Player(13), ConvertPlayerColor(13))
    call SetPlayerRacePreference(Player(13), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(13), false)
    call SetPlayerController(Player(13), MAP_CONTROL_USER)

    // Player 14
    call SetPlayerStartLocation(Player(14), 14)
    call ForcePlayerStartLocation(Player(14), 14)
    call SetPlayerColor(Player(14), ConvertPlayerColor(14))
    call SetPlayerRacePreference(Player(14), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(14), false)
    call SetPlayerController(Player(14), MAP_CONTROL_USER)

    // Player 15
    call SetPlayerStartLocation(Player(15), 15)
    call ForcePlayerStartLocation(Player(15), 15)
    call SetPlayerColor(Player(15), ConvertPlayerColor(15))
    call SetPlayerRacePreference(Player(15), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(15), false)
    call SetPlayerController(Player(15), MAP_CONTROL_USER)

    // Player 16
    call SetPlayerStartLocation(Player(16), 16)
    call ForcePlayerStartLocation(Player(16), 16)
    call SetPlayerColor(Player(16), ConvertPlayerColor(16))
    call SetPlayerRacePreference(Player(16), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(16), false)
    call SetPlayerController(Player(16), MAP_CONTROL_USER)

    // Player 17
    call SetPlayerStartLocation(Player(17), 17)
    call ForcePlayerStartLocation(Player(17), 17)
    call SetPlayerColor(Player(17), ConvertPlayerColor(17))
    call SetPlayerRacePreference(Player(17), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(17), false)
    call SetPlayerController(Player(17), MAP_CONTROL_USER)

    // Player 18
    call SetPlayerStartLocation(Player(18), 18)
    call ForcePlayerStartLocation(Player(18), 18)
    call SetPlayerColor(Player(18), ConvertPlayerColor(18))
    call SetPlayerRacePreference(Player(18), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(18), false)
    call SetPlayerController(Player(18), MAP_CONTROL_USER)

    // Player 19
    call SetPlayerStartLocation(Player(19), 19)
    call ForcePlayerStartLocation(Player(19), 19)
    call SetPlayerColor(Player(19), ConvertPlayerColor(19))
    call SetPlayerRacePreference(Player(19), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(19), false)
    call SetPlayerController(Player(19), MAP_CONTROL_USER)

    // Player 20
    call SetPlayerStartLocation(Player(20), 20)
    call ForcePlayerStartLocation(Player(20), 20)
    call SetPlayerColor(Player(20), ConvertPlayerColor(20))
    call SetPlayerRacePreference(Player(20), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(20), false)
    call SetPlayerController(Player(20), MAP_CONTROL_USER)

    // Player 21
    call SetPlayerStartLocation(Player(21), 21)
    call ForcePlayerStartLocation(Player(21), 21)
    call SetPlayerColor(Player(21), ConvertPlayerColor(21))
    call SetPlayerRacePreference(Player(21), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(21), false)
    call SetPlayerController(Player(21), MAP_CONTROL_USER)

    // Player 22
    call SetPlayerStartLocation(Player(22), 22)
    call ForcePlayerStartLocation(Player(22), 22)
    call SetPlayerColor(Player(22), ConvertPlayerColor(22))
    call SetPlayerRacePreference(Player(22), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(22), false)
    call SetPlayerController(Player(22), MAP_CONTROL_USER)

    // Player 23
    call SetPlayerStartLocation(Player(23), 23)
    call ForcePlayerStartLocation(Player(23), 23)
    call SetPlayerColor(Player(23), ConvertPlayerColor(23))
    call SetPlayerRacePreference(Player(23), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(23), false)
    call SetPlayerController(Player(23), MAP_CONTROL_USER)

endfunction

function InitCustomTeams takes nothing returns nothing
    // Force: TRIGSTR_049
    call SetPlayerTeam(Player(0), 0)

    // Force: TRIGSTR_050
    call SetPlayerTeam(Player(1), 1)
    call SetPlayerTeam(Player(2), 1)
    call SetPlayerTeam(Player(3), 1)
    call SetPlayerTeam(Player(4), 1)
    call SetPlayerTeam(Player(5), 1)
    call SetPlayerTeam(Player(6), 1)
    call SetPlayerTeam(Player(7), 1)
    call SetPlayerTeam(Player(8), 1)
    call SetPlayerTeam(Player(9), 1)
    call SetPlayerTeam(Player(10), 1)
    call SetPlayerTeam(Player(11), 1)
    call SetPlayerTeam(Player(12), 1)
    call SetPlayerTeam(Player(13), 1)
    call SetPlayerTeam(Player(14), 1)
    call SetPlayerTeam(Player(15), 1)
    call SetPlayerTeam(Player(16), 1)
    call SetPlayerTeam(Player(17), 1)
    call SetPlayerTeam(Player(18), 1)
    call SetPlayerTeam(Player(19), 1)
    call SetPlayerTeam(Player(20), 1)
    call SetPlayerTeam(Player(21), 1)
    call SetPlayerTeam(Player(22), 1)
    call SetPlayerTeam(Player(23), 1)

    //   Allied
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(12), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(13), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(14), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(15), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(16), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(17), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(18), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(19), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(20), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(22), true)
    call SetPlayerAllianceStateAllyBJ(Player(21), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(22), Player(23), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(12), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(13), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(14), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(15), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(16), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(17), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(18), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(19), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(20), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(21), true)
    call SetPlayerAllianceStateAllyBJ(Player(23), Player(22), true)

    //   Shared Vision
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(1), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(2), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(3), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(4), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(5), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(6), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(7), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(8), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(9), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(10), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(11), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(12), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(13), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(14), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(15), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(16), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(17), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(18), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(19), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(20), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(22), true)
    call SetPlayerAllianceStateVisionBJ(Player(21), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(22), Player(23), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(1), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(2), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(3), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(4), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(5), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(6), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(7), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(8), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(9), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(10), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(11), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(12), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(13), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(14), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(15), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(16), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(17), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(18), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(19), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(20), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(21), true)
    call SetPlayerAllianceStateVisionBJ(Player(23), Player(22), true)

endfunction

function InitAllyPriorities takes nothing returns nothing

    call SetStartLocPrioCount(0, 1)
    call SetStartLocPrio(0, 0, 14, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(1, 3)
    call SetStartLocPrio(1, 0, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 1, 16, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 2, 17, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(2, 4)
    call SetStartLocPrio(2, 0, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 1, 4, MAP_LOC_PRIO_LOW)
    call SetStartLocPrio(2, 2, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 3, 17, MAP_LOC_PRIO_LOW)

    call SetStartLocPrioCount(3, 1)
    call SetStartLocPrio(3, 0, 19, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(4, 6)
    call SetStartLocPrio(4, 0, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 1, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 2, 5, MAP_LOC_PRIO_LOW)
    call SetStartLocPrio(4, 3, 8, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 4, 16, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 5, 18, MAP_LOC_PRIO_LOW)

    call SetStartLocPrioCount(5, 4)
    call SetStartLocPrio(5, 0, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 1, 6, MAP_LOC_PRIO_LOW)
    call SetStartLocPrio(5, 2, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 3, 10, MAP_LOC_PRIO_LOW)

    call SetStartLocPrioCount(6, 1)
    call SetStartLocPrio(6, 0, 20, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(7, 5)
    call SetStartLocPrio(7, 0, 4, MAP_LOC_PRIO_LOW)
    call SetStartLocPrio(7, 1, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 2, 6, MAP_LOC_PRIO_LOW)
    call SetStartLocPrio(7, 3, 8, MAP_LOC_PRIO_LOW)
    call SetStartLocPrio(7, 4, 20, MAP_LOC_PRIO_LOW)

    call SetStartLocPrioCount(8, 4)
    call SetStartLocPrio(8, 0, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 1, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 2, 13, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 3, 18, MAP_LOC_PRIO_LOW)

    call SetStartLocPrioCount(9, 2)
    call SetStartLocPrio(9, 0, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(9, 1, 20, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(10, 4)
    call SetStartLocPrio(10, 0, 5, MAP_LOC_PRIO_LOW)
    call SetStartLocPrio(10, 1, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(10, 2, 12, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(10, 3, 20, MAP_LOC_PRIO_LOW)

    call SetStartLocPrioCount(11, 2)
    call SetStartLocPrio(11, 0, 12, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(11, 1, 19, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(12, 4)
    call SetStartLocPrio(12, 0, 2, MAP_LOC_PRIO_LOW)
    call SetStartLocPrio(12, 1, 5, MAP_LOC_PRIO_LOW)
    call SetStartLocPrio(12, 2, 10, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(12, 3, 11, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(13, 2)
    call SetStartLocPrio(13, 0, 8, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(13, 1, 18, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(14, 1)
    call SetStartLocPrio(14, 0, 0, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(15, 3)
    call SetStartLocPrio(15, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(15, 1, 3, MAP_LOC_PRIO_LOW)
    call SetStartLocPrio(15, 2, 21, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(16, 3)
    call SetStartLocPrio(16, 0, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(16, 1, 4, MAP_LOC_PRIO_LOW)
    call SetStartLocPrio(16, 2, 22, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(17, 2)
    call SetStartLocPrio(17, 0, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(17, 1, 21, MAP_LOC_PRIO_LOW)

    call SetStartLocPrioCount(18, 4)
    call SetStartLocPrio(18, 0, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(18, 1, 8, MAP_LOC_PRIO_LOW)
    call SetStartLocPrio(18, 2, 13, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(18, 3, 16, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(19, 2)
    call SetStartLocPrio(19, 0, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(19, 1, 11, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(20, 1)
    call SetStartLocPrio(20, 0, 6, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(21, 4)
    call SetStartLocPrio(21, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(21, 1, 14, MAP_LOC_PRIO_LOW)
    call SetStartLocPrio(21, 2, 15, MAP_LOC_PRIO_LOW)
    call SetStartLocPrio(21, 3, 17, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(22, 1)
    call SetStartLocPrio(22, 0, 23, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(23, 1)
    call SetStartLocPrio(23, 0, 22, MAP_LOC_PRIO_HIGH)
endfunction

//***************************************************************************
//*
//*  Main Initialization
//*
//***************************************************************************

//===========================================================================
function main takes nothing returns nothing
    call SetCameraBounds(- 28800.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), - 19968.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM), 32256.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), 29184.0 - GetCameraMargin(CAMERA_MARGIN_TOP), - 28800.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), 29184.0 - GetCameraMargin(CAMERA_MARGIN_TOP), 32256.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), - 19968.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM))
    call SetDayNightModels("Environment\\DNC\\DNCLordaeron\\DNCLordaeronTerrain\\DNCLordaeronTerrain.mdl", "Environment\\DNC\\DNCLordaeron\\DNCLordaeronUnit\\DNCLordaeronUnit.mdl")
    call NewSoundEnvironment("Default")
    call SetAmbientDaySound("CityScapeDay")
    call SetAmbientNightSound("CityScapeNight")
    call SetMapMusic("Music", true, 0)
    call InitSounds()
    call CreateRegions()
    call CreateCameras()
    call InitUpgrades()
    call CreateAllDestructables()
    call CreateAllUnits()
    call InitBlizzard()

call ExecuteFunc("jasshelper__initstructs865443562")
call ExecuteFunc("CombatTag__onInit")
call ExecuteFunc("DestructableLib___Initialization")
call ExecuteFunc("MultiPatrol___onInit")
call ExecuteFunc("FilterTransformations__onInit")
call ExecuteFunc("UnitVisualMods___onInit")
call ExecuteFunc("UserDefinedRects___onInit")
call ExecuteFunc("RectGenerator___onInit")
call LoPItemCleanup___onInit()
call TitanPowers___onInit()
call MultiPatrolCommands___onInit()
call MultiPatrolOrder___onInit()
call MultiPatrolDisplayOnSelect___onInit()

    call InitGlobals()
    call InitCustomTriggers()
    call RunInitializationTriggers()

endfunction

//***************************************************************************
//*
//*  Map Configuration
//*
//***************************************************************************

function config takes nothing returns nothing
    call SetMapName("Titan Land: LoP 1.0.0a")
    call SetMapDescription("Titan land map based on RoK and BotE. Inspiration received from KoT.\n\nShould be a playable version.\n\nROLEPLAY MAP!")
    call SetPlayers(24)
    call SetTeams(24)
    call SetGamePlacement(MAP_PLACEMENT_TEAMS_TOGETHER)

    call DefineStartLocation(0, - 23296.0, 23296.0)
    call DefineStartLocation(1, - 16128.0, 3520.0)
    call DefineStartLocation(2, - 8960.0, 1664.0)
    call DefineStartLocation(3, 4352.0, 26496.0)
    call DefineStartLocation(4, - 16128.0, - 6080.0)
    call DefineStartLocation(5, - 4416.0, - 4608.0)
    call DefineStartLocation(6, 5696.0, - 9600.0)
    call DefineStartLocation(7, - 5376.0, - 13504.0)
    call DefineStartLocation(8, - 16512.0, - 16064.0)
    call DefineStartLocation(9, 12224.0, - 13184.0)
    call DefineStartLocation(10, 6400.0, - 832.0)
    call DefineStartLocation(11, 12352.0, 12288.0)
    call DefineStartLocation(12, 2432.0, 8576.0)
    call DefineStartLocation(13, - 27392.0, - 18688.0)
    call DefineStartLocation(14, - 26560.0, 19392.0)
    call DefineStartLocation(15, - 12032.0, 28096.0)
    call DefineStartLocation(16, - 21376.0, 768.0)
    call DefineStartLocation(17, - 15680.0, 9472.0)
    call DefineStartLocation(18, - 27328.0, - 9024.0)
    call DefineStartLocation(19, 12032.0, 21760.0)
    call DefineStartLocation(20, 6336.0, - 12224.0)
    call DefineStartLocation(21, - 16192.0, 17664.0)
    call DefineStartLocation(22, - 26880.0, 5696.0)
    call DefineStartLocation(23, - 25856.0, 9280.0)

    // Player setup
    call InitCustomPlayerSlots()
    call InitCustomTeams()
    call InitAllyPriorities()
endfunction




//Struct method generated initializers/callers:
function sa__Table__get_real takes nothing returns boolean
local integer this=f__arg_this
set f__result_integer= this
   return true
endfunction
function sa__Table__get_unit takes nothing returns boolean
local integer this=f__arg_this
set f__result_integer= this
   return true
endfunction
function sa__Table_create takes nothing returns boolean

        local integer this= (LoadInteger(Table___ht, ((Table___listK)), (0))) // INLINED!!
        if this == 0 then
            set this=Table___more + 1
            set Table___more=this
        else
            call SaveInteger(Table___ht, ((Table___listK)), (0), ( (LoadInteger(Table___ht, ((Table___listK)), (this))))) // INLINED!!
            call RemoveSavedInteger(Table___ht, ((Table___listK)), (this)) //Clear hashed memory // INLINED!!
        endif
set f__result_integer= this
   return true
endfunction
function sa__Table___units__getindex takes nothing returns boolean
local integer this=f__arg_this
local integer key=f__arg_integer1
set f__result_unit= LoadUnitHandle(Table___ht, this, key)
   return true
endfunction
function sa__Table___units__setindex takes nothing returns boolean
    call SaveUnitHandle(Table___ht, (f__arg_this), (f__arg_integer1), (f__arg_unit1)) // INLINED!!
   return true
endfunction
function sa__Table___units_remove takes nothing returns boolean
local integer this=f__arg_this
local integer key=f__arg_integer1
        call RemoveSavedHandle(Table___ht, this, key)
   return true
endfunction
function sa__Table___reals__getindex takes nothing returns boolean
local integer this=f__arg_this
local integer key=f__arg_integer1
set f__result_real= LoadReal(Table___ht, this, key)
   return true
endfunction
function sa__Table___reals__setindex takes nothing returns boolean
local integer this=f__arg_this
local integer key=f__arg_integer1
local real value=f__arg_real1
        call SaveReal(Table___ht, this, key, value)
   return true
endfunction

function jasshelper__initstructs865443562 takes nothing returns nothing
    set st__Table__get_real=CreateTrigger()
    call TriggerAddCondition(st__Table__get_real,Condition( function sa__Table__get_real))
    set st__Table__get_unit=CreateTrigger()
    call TriggerAddCondition(st__Table__get_unit,Condition( function sa__Table__get_unit))
    set st__Table_create=CreateTrigger()
    call TriggerAddCondition(st__Table_create,Condition( function sa__Table_create))
    set st__Table___units__getindex=CreateTrigger()
    call TriggerAddCondition(st__Table___units__getindex,Condition( function sa__Table___units__getindex))
    set st__Table___units__setindex=CreateTrigger()
    call TriggerAddCondition(st__Table___units__setindex,Condition( function sa__Table___units__setindex))
    set st__Table___units_remove=CreateTrigger()
    call TriggerAddCondition(st__Table___units_remove,Condition( function sa__Table___units_remove))
    set st__Table___reals__getindex=CreateTrigger()
    call TriggerAddCondition(st__Table___reals__getindex,Condition( function sa__Table___reals__getindex))
    set st__Table___reals__setindex=CreateTrigger()
    call TriggerAddCondition(st__Table___reals__setindex,Condition( function sa__Table___reals__setindex))


















































call ExecuteFunc("s__WorldBounds_WorldBounds___WorldBoundInit___onInit")















































call ExecuteFunc("s__DummyRecycler___S_DummyRecycler___M___onInit")

call ExecuteFunc("s__TileDefinition___TileDefinition_TileDefinition___Init___onInit")


























































call ExecuteFunc("s__AutoRectEnvironment___InitStruct_AutoRectEnvironment___InitModule___onInit")




    call ExecuteFunc("s__GameTime_onInit")
endfunction

